"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8130],{7735:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"goner-meter","metadata":{"permalink":"/blog/goner-meter","editUrl":"https://github.com/gone-io/v2-site/tree/main/blog/blog/2025-05-09-goner-meter.md","source":"@site/blog/2025-05-09-goner-meter.md","title":"\u4f7f\u7528goner/otel/meter\u5b9e\u73b0\u5e94\u7528\u6307\u6807\u76d1\u63a7","description":"\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Gone\u6846\u67b6\u7684goner/otel/meter\u7ec4\u4ef6\uff0c\u7ed3\u5408Prometheus\u5b9e\u73b0\u5e94\u7528\u7684\u6307\u6807\u76d1\u63a7\u3001\u6570\u636e\u91c7\u96c6\u548c\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u8f7b\u677e\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u76d1\u63a7\u7cfb\u7edf","date":"2025-05-09T22:00:00.000Z","tags":[{"inline":true,"label":"OpenTelemetry","permalink":"/blog/tags/open-telemetry"},{"inline":true,"label":"Gone","permalink":"/blog/tags/gone"},{"inline":true,"label":"\u53ef\u89c2\u6d4b\u6027","permalink":"/blog/tags/\u53ef\u89c2\u6d4b\u6027"},{"inline":true,"label":"\u6280\u672f\u5b9e\u8df5","permalink":"/blog/tags/\u6280\u672f\u5b9e\u8df5"}],"readingTime":19.655,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"goner-meter","description":"\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Gone\u6846\u67b6\u7684goner/otel/meter\u7ec4\u4ef6\uff0c\u7ed3\u5408Prometheus\u5b9e\u73b0\u5e94\u7528\u7684\u6307\u6807\u76d1\u63a7\u3001\u6570\u636e\u91c7\u96c6\u548c\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u8f7b\u677e\u6784\u5efa\u5b8c\u6574\u7684\u5e94\u7528\u76d1\u63a7\u7cfb\u7edf","keywords":["OpenTelemetry","Gone\u6846\u67b6","Prometheus\u76d1\u63a7","\u5e94\u7528\u6307\u6807","\u6027\u80fd\u76d1\u63a7","\u53ef\u89c2\u6d4b\u6027","\u76d1\u63a7\u7cfb\u7edf","\u6307\u6807\u91c7\u96c6"],"tags":["OpenTelemetry","Gone","\u53ef\u89c2\u6d4b\u6027","\u6280\u672f\u5b9e\u8df5"],"date":"2025-05-09T22:00"},"unlisted":false,"nextItem":{"title":"\u4f7f\u7528goner/otel\u63a5\u5165OpenTelemetry","permalink":"/blog/goner-otel-integration-guide"}},"content":"## \u5f15\u8a00\\n\\n\u5728\u73b0\u4ee3\u5fae\u670d\u52a1\u67b6\u6784\u548c\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u53ef\u89c2\u6d4b\u6027\uff08Observability\uff09\u5df2\u7ecf\u6210\u4e3a\u786e\u4fdd\u7cfb\u7edf\u7a33\u5b9a\u6027\u548c\u6027\u80fd\u7684\u5173\u952e\u56e0\u7d20\u3002\u53ef\u89c2\u6d4b\u6027\u901a\u5e38\u7531\u4e09\u5927\u652f\u67f1\u7ec4\u6210\uff1a\u65e5\u5fd7\uff08Logs\uff09\u3001\u6307\u6807\uff08Metrics\uff09\u548c\u8ffd\u8e2a\uff08Traces\uff09\u3002\u672c\u6587\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5176\u4e2d\u7684\\"\u6307\u6807\\"\u90e8\u5206\uff0c\u63a2\u8ba8\u5982\u4f55\u4f7f\u7528Gone\u6846\u67b6\u7684`goner/otel/meter`\u7ec4\u4ef6\u6765\u9ad8\u6548\u5730\u6536\u96c6\u3001\u7ba1\u7406\u548c\u53ef\u89c6\u5316\u5e94\u7528\u6307\u6807\u6570\u636e\u3002\\n\\n\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a\u5065\u58ee\u7684\u6307\u6807\u76d1\u63a7\u7cfb\u7edf\uff0c\u5f00\u53d1\u56e2\u961f\u53ef\u4ee5\u5b9e\u73b0\uff1a\\n\\n- \u5b9e\u65f6\u76d1\u63a7\u5e94\u7528\u6027\u80fd\u548c\u5065\u5eb7\u72b6\u6001\\n- \u63d0\u524d\u53d1\u73b0\u6f5c\u5728\u95ee\u9898\uff0c\u9632\u60a3\u4e8e\u672a\u7136\\n- \u5efa\u7acb\u57fa\u4e8e\u6570\u636e\u7684\u51b3\u7b56\u673a\u5236\uff0c\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\\n- \u6709\u6548\u8fdb\u884c\u5bb9\u91cf\u89c4\u5212\u548c\u8d44\u6e90\u5206\u914d\\n\\n## \u6280\u672f\u6808\u4ecb\u7ecd\\n\\n### Gone\u6846\u67b6\\n\\nGone\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684Go\u8bed\u8a00\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\uff0c\u8bbe\u8ba1\u7406\u5ff5\u7c7b\u4f3c\u4e8eJava\u7684Spring\u6846\u67b6\u3002\u5b83\u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u7ec4\u7ec7\u4ee3\u7801\uff0c\u4f7f\u5e94\u7528\u66f4\u52a0\u6a21\u5757\u5316\u3001\u53ef\u7ef4\u62a4\u548c\u53ef\u6d4b\u8bd5\u3002Gone\u6846\u67b6\u7684\u6838\u5fc3\u4f18\u52bf\u5728\u4e8e\u5176\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u7ec4\u4ef6\u7ba1\u7406\u673a\u5236\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u5404\u79cd\u529f\u80fd\u6a21\u5757\u96c6\u6210\u5230\u5e94\u7528\u4e2d\u3002\\n\\n### OpenTelemetry (OTel)\\n\\nOpenTelemetry\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u53ef\u89c2\u6d4b\u6027\u6846\u67b6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u5957\u6807\u51c6\u5316\u7684API\u3001\u5e93\u548c\u4ee3\u7406\uff0c\u7528\u4e8e\u6536\u96c6\u548c\u5904\u7406\u9065\u6d4b\u6570\u636e\uff08\u65e5\u5fd7\u3001\u6307\u6807\u548c\u8ffd\u8e2a\uff09\u3002OpenTelemetry\u7684\u51fa\u73b0\u89e3\u51b3\u4e86\u53ef\u89c2\u6d4b\u6027\u5de5\u5177\u788e\u7247\u5316\u7684\u95ee\u9898\uff0c\u4f7f\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528\u7edf\u4e00\u7684API\u6536\u96c6\u9065\u6d4b\u6570\u636e\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u6570\u636e\u53d1\u9001\u5230\u4efb\u4f55\u540e\u7aef\u5206\u6790\u5de5\u5177\u3002\\n\\n`goner/otel/meter`\u662fGone\u6846\u67b6\u5bf9OpenTelemetry\u6307\u6807\u6536\u96c6\u529f\u80fd\u7684\u5c01\u88c5\uff0c\u5b83\u4f7f\u5f97\u5728Gone\u5e94\u7528\u4e2d\u96c6\u6210OpenTelemetry\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u3002\\n\\n### Prometheus\\n\\nPrometheus\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u76d1\u63a7\u548c\u8b66\u62a5\u7cfb\u7edf\uff0c\u4e13\u4e3a\u9ad8\u5ea6\u52a8\u6001\u7684\u4e91\u539f\u751f\u73af\u5883\u8bbe\u8ba1\u3002\u5b83\u901a\u8fc7\u4ee5\u4e0b\u7279\u6027\u8131\u9896\u800c\u51fa\uff1a\\n\\n- \u591a\u7ef4\u6570\u636e\u6a21\u578b\uff1a\u6bcf\u4e2a\u65f6\u95f4\u5e8f\u5217\u7531\u6307\u6807\u540d\u79f0\u548c\u952e\u503c\u5bf9\u6807\u7b7e\u5b9a\u4e49\\n- \u5f3a\u5927\u7684\u67e5\u8be2\u8bed\u8a00PromQL\uff1a\u652f\u6301\u590d\u6742\u7684\u6570\u636e\u805a\u5408\u548c\u8f6c\u6362\\n- \u65e0\u9700\u4f9d\u8d56\u5b58\u50a8\uff1a\u652f\u6301\u672c\u5730\u5b58\u50a8\u548c\u8fdc\u7a0b\u5b58\u50a8\\n- \u57fa\u4e8eHTTP\u7684Pull\u6a21\u5f0f\u91c7\u96c6\uff1a\u7b80\u5316\u4e86\u7f51\u7edc\u914d\u7f6e\\n- \u652f\u6301Push\u6a21\u5f0f\u7684\u7f51\u5173\uff1a\u7528\u4e8e\u77ed\u671f\u4efb\u52a1\u7684\u76d1\u63a7\\n- \u4e30\u5bcc\u7684\u53ef\u89c6\u5316\u96c6\u6210\uff1a\u539f\u751f\u652f\u6301Grafana\u7b49\u5de5\u5177\\n\\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Prometheus\u4f5c\u4e3a\u6307\u6807\u6570\u636e\u7684\u5b58\u50a8\u548c\u67e5\u8be2\u540e\u7aef\u3002\\n\x3c!-- truncate --\x3e\\n## \u5feb\u901f\u5f00\u59cb\\n\\n### 1. \u51c6\u5907\u5de5\u4f5c\\n\\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5Gone\u6846\u67b6\u7684\u547d\u4ee4\u884c\u5de5\u5177`gonectl`\u3002\u5b83\u80fd\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u521b\u5efa\u548c\u7ba1\u7406Gone\u9879\u76ee\uff1a\\n\\n```bash\\ngo install github.com/gone-io/gonectl@latest\\n```\\n\\n`gonectl`\u5de5\u5177\u529f\u80fd\u5f3a\u5927\uff0c\u63d0\u4f9b\u4e86\u9879\u76ee\u811a\u624b\u67b6\u3001\u4ee3\u7801\u751f\u6210\u548c\u9879\u76ee\u7ba1\u7406\u7b49\u529f\u80fd\uff0c\u5927\u5927\u7b80\u5316\u4e86\u4f7f\u7528Gone\u6846\u67b6\u7684\u5f00\u53d1\u6d41\u7a0b\u3002\u786e\u4fdd\u60a8\u7684`$GOPATH/bin`\u5df2\u6dfb\u52a0\u5230\u7cfb\u7edf\u8def\u5f84\u4e2d\uff0c\u8fd9\u6837\u624d\u80fd\u5728\u547d\u4ee4\u884c\u4e2d\u76f4\u63a5\u4f7f\u7528`gonectl`\u547d\u4ee4\u3002\\n\\n### 2. \u521b\u5efa\u793a\u4f8b\u9879\u76ee\\n\\n\u4f7f\u7528`gonectl`\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e`otel/meter/prometheus`\u6a21\u677f\u7684\u9879\u76ee\u3002\u8fd9\u4e2a\u6a21\u677f\u5df2\u7ecf\u5305\u542b\u4e86\u6240\u6709\u5fc5\u8981\u7684\u76d1\u63a7\u7ec4\u4ef6\u914d\u7f6e\uff1a\\n\\n```bash\\ngonectl create -t otel/meter/prometheus meter-prometheus\\n```\\n\\n\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\u540e\uff0c`gonectl`\u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a`meter-prometheus`\u7684\u9879\u76ee\u76ee\u5f55\uff0c\u5e76\u751f\u6210\u6240\u6709\u5fc5\u8981\u7684\u6587\u4ef6\u548c\u914d\u7f6e\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c`gonectl`\u4e3b\u8981\u5b8c\u6210\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a\\n\\n- \u521b\u5efa\u57fa\u672c\u7684\u9879\u76ee\u7ed3\u6784\\n- \u81ea\u52a8\u751f\u6210Gone\u6846\u67b6\u6240\u9700\u7684\u4f9d\u8d56\u6ce8\u5165\u914d\u7f6e\u6587\u4ef6\\n- \u914d\u7f6eOpenTelemetry\u548cPrometheus\u76f8\u5173\u7ec4\u4ef6\\n- \u6dfb\u52a0\u793a\u4f8b\u63a7\u5236\u5668\u548cAPI\u7aef\u70b9\\n- \u521b\u5efaDocker Compose\u914d\u7f6e\uff0c\u4fbf\u4e8e\u542f\u52a8Prometheus\u670d\u52a1\\n\\n### 3. \u542f\u52a8\u5e94\u7528\\n\\n\u8fdb\u5165\u9879\u76ee\u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u5e94\u7528\u670d\u52a1\uff1a\\n\\n```bash\\ngo run ./cmd\\n```\\n\\n\u5f53\u4f60\u770b\u5230\u7c7b\u4f3c\u4e8e`Server started at :8080`\u7684\u8f93\u51fa\u65f6\uff0c\u8868\u793a\u5e94\u7528\u5df2\u7ecf\u6210\u529f\u542f\u52a8\u3002\u6b64\u65f6\uff0cGone\u6846\u67b6\u5df2\u7ecf\u81ea\u52a8\u5b8c\u6210\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a\\n\\n- \u521d\u59cb\u5316\u4e86\u6240\u6709\u6ce8\u518c\u7684\u7ec4\u4ef6\\n- \u914d\u7f6e\u4e86OpenTelemetry\u6307\u6807\u6536\u96c6\u5668\\n- \u542f\u52a8\u4e86\u4e00\u4e2aGin HTTP\u670d\u52a1\u5668\\n- \u6ce8\u518c\u4e86`/metrics`\u7aef\u70b9\uff0c\u7528\u4e8e\u66b4\u9732Prometheus\u683c\u5f0f\u7684\u6307\u6807\u6570\u636e\\n- \u542f\u52a8\u4e86\u6211\u4eec\u5b9a\u4e49\u7684API\u7aef\u70b9\uff08\u5982`/hello`\uff09\\n\\n### 4. \u542f\u52a8Prometheus\u76d1\u63a7\u670d\u52a1\\n\\n\u9879\u76ee\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86Prometheus\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528Docker\u542f\u52a8Prometheus\u670d\u52a1\uff1a\\n\\n```bash\\ndocker compose up -d\\n```\\n\\n\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u542f\u52a8\u4e00\u4e2aPrometheus\u5bb9\u5668\uff0c\u5e76\u4f7f\u7528\u9879\u76ee\u4e2d\u7684`prometheus.yml`\u914d\u7f6e\u6587\u4ef6\u3002Prometheus\u670d\u52a1\u542f\u52a8\u540e\uff0c\u5b83\u4f1a\u6309\u7167\u914d\u7f6e\u5b9a\u671f\u4ece\u6211\u4eec\u7684\u5e94\u7528\u7684`/metrics`\u7aef\u70b9\u62c9\u53d6\u6307\u6807\u6570\u636e\u3002\\n\\nPrometheus\u7684\u5de5\u4f5c\u539f\u7406\u662f\u5b9a\u671f\\"\u522e\u53d6\\"\uff08scrape\uff09\u76ee\u6807\u670d\u52a1\u7684\u6307\u6807\u6570\u636e\uff0c\u7136\u540e\u5b58\u50a8\u5728\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\u4e2d\u3002\u8fd9\u79cdPull\u6a21\u5f0f\u7684\u91c7\u96c6\u65b9\u5f0f\u6709\u51e0\u4e2a\u4f18\u70b9\uff1a\\n\\n- \u7b80\u5316\u4e86\u9632\u706b\u5899\u914d\u7f6e\uff08\u53ea\u9700\u8981Prometheus\u80fd\u591f\u8bbf\u95ee\u76ee\u6807\u670d\u52a1\uff09\\n- \u4f7f\u5f97Prometheus\u80fd\u591f\u68c0\u6d4b\u5230\u76ee\u6807\u670d\u52a1\u7684\u5065\u5eb7\u72b6\u6001\\n- \u51cf\u8f7b\u4e86\u76ee\u6807\u670d\u52a1\u7684\u8d1f\u62c5\uff08\u7531Prometheus\u63a7\u5236\u91c7\u96c6\u9891\u7387\uff09\\n\\n### 5. \u9a8c\u8bc1\u76d1\u63a7\u6548\u679c\\n\\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u9a8c\u8bc1\u76d1\u63a7\u7cfb\u7edf\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a\\n\\n1. \u591a\u6b21\u8bbf\u95ee\u793a\u4f8b\u63a5\u53e3\uff0c\u4ea7\u751f\u4e00\u4e9b\u76d1\u63a7\u6570\u636e\uff1a\\n```bash\\ncurl http://localhost:8080/hello\\n```\\n\\n\u6bcf\u6b21\u8c03\u7528\u8fd9\u4e2a\u63a5\u53e3\uff0c\u6211\u4eec\u7684\u5e94\u7528\u90fd\u4f1a\u589e\u52a0\u4e00\u4e2a\u540d\u4e3a`api.counter`\u7684\u6307\u6807\u8ba1\u6570\u5668\u3002\\n\\n2. \u67e5\u770b\u539f\u59cb\u6307\u6807\u6570\u636e\uff1a\\n```bash\\ncurl http://localhost:8080/metrics\\n```\\n\\n\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u663e\u793a\u5f53\u524d\u5e94\u7528\u66b4\u9732\u7684\u6240\u6709\u6307\u6807\u6570\u636e\uff0c\u683c\u5f0f\u7b26\u5408Prometheus\u7684\u6570\u636e\u683c\u5f0f\u89c4\u8303\u3002\u4f60\u5e94\u8be5\u80fd\u770b\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a\\n\\n```\\n# HELP api_counter API\u8c03\u7528\u7684\u6b21\u6570\\n# TYPE api_counter counter\\napi_counter{} 5 1620847200000\\n```\\n\\n\u8fd9\u4e2a\u8f93\u51fa\u8868\u660e\uff1a\\n- `api_counter`\u662f\u4e00\u4e2a\u8ba1\u6570\u5668\u7c7b\u578b\u7684\u6307\u6807\\n- \u5b83\u7684\u63cf\u8ff0\u662f\\"API\u8c03\u7528\u7684\u6b21\u6570\\"\\n- \u5f53\u524d\u503c\u662f5\uff08\u8868\u793aAPI\u5df2\u88ab\u8c03\u75285\u6b21\uff09\\n- \u65f6\u95f4\u6233\u662f1620847200000\uff08\u8fd9\u662f\u4e00\u4e2aUnix\u6beb\u79d2\u65f6\u95f4\u6233\uff09\\n\\n3. \u5728Prometheus\u63a7\u5236\u53f0\u67e5\u770b\u53ef\u89c6\u5316\u7684\u6307\u6807\u6570\u636e\uff1a\\n   - \u6253\u5f00Prometheus\u754c\u9762\uff1ahttp://localhost:9090/graph\\n   - \u5728\u67e5\u8be2\u6846\u4e2d\u8f93\u5165\uff1a`api_counter_total`\\n   - \u70b9\u51fb\\"\u6267\u884c\\"\u6309\u94ae\uff0c\u4f60\u5c06\u770b\u5230\u7c7b\u4f3c\u4e0b\u56fe\u7684\u76d1\u63a7\u6570\u636e\u5c55\u793a\uff1a\\n\\n![Prometheus\u6307\u6807\u67e5\u8be2\u7ed3\u679c](/img/2025-05-09-goner-meter-screenshot.png)\\n\\n\u5728Prometheus\u7684Web\u754c\u9762\u4e2d\uff0c\u4f60\u53ef\u4ee5\uff1a\\n- \u67e5\u770b\u6307\u6807\u968f\u65f6\u95f4\u7684\u53d8\u5316\u8d8b\u52bf\\n- \u4f7f\u7528PromQL\u8fdb\u884c\u590d\u6742\u7684\u67e5\u8be2\u548c\u6570\u636e\u5206\u6790\\n- \u521b\u5efa\u81ea\u5b9a\u4e49\u7684\u76d1\u63a7\u9762\u677f\\n- \u8bbe\u7f6e\u544a\u8b66\u89c4\u5219\uff08\u9700\u8981\u989d\u5916\u914d\u7f6eAlertManager\uff09\\n\\n## \u4ee3\u7801\u8be6\u89e3\\n\\n\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u8fd9\u4e2a\u76d1\u63a7\u7cfb\u7edf\u7684\u5b9e\u73b0\u539f\u7406\u548c\u6838\u5fc3\u4ee3\u7801\u3002\\n\\n### \u9879\u76ee\u7ed3\u6784\\n\\n```bash\\n.\\n\u251c\u2500\u2500 cmd\\n\u2502   \u251c\u2500\u2500 import.gone.go  # \u81ea\u52a8\u751f\u6210\u7684\u7ec4\u4ef6\u5bfc\u5165\u6587\u4ef6\\n\u2502   \u2514\u2500\u2500 server.go       # \u5e94\u7528\u5165\u53e3\u6587\u4ef6\\n\u251c\u2500\u2500 controller\\n\u2502   \u251c\u2500\u2500 ctr.go          # API\u63a5\u53e3\u5b9a\u4e49\u548c\u6307\u6807\u6536\u96c6\u903b\u8f91\\n\u2502   \u2514\u2500\u2500 init.gone.go    # \u63a7\u5236\u5668\u521d\u59cb\u5316\u6587\u4ef6\\n\u251c\u2500\u2500 docker-compose.yaml # Docker\u914d\u7f6e\u6587\u4ef6\\n\u251c\u2500\u2500 prometheus.yml     # Prometheus\u914d\u7f6e\u6587\u4ef6\\n\u251c\u2500\u2500 init.gone.go\\n\u2514\u2500\u2500 module.load.go     # Gone\u6a21\u5757\u52a0\u8f7d\u914d\u7f6e\\n```\\n\\n\u8fd9\u79cd\u9879\u76ee\u7ed3\u6784\u9075\u5faa\u4e86Gone\u6846\u67b6\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u5c06\u4e0d\u540c\u529f\u80fd\u6a21\u5757\u6e05\u6670\u5730\u5206\u79bb\u3002\u5176\u4e2d\uff1a\\n\\n- `cmd`\u76ee\u5f55\u5305\u542b\u5e94\u7528\u7684\u5165\u53e3\u70b9\u548c\u81ea\u52a8\u751f\u6210\u7684\u7ec4\u4ef6\u5bfc\u5165\u6587\u4ef6\\n- `controller`\u76ee\u5f55\u5305\u542bAPI\u63a7\u5236\u5668\u548c\u8def\u7531\u5b9a\u4e49\\n- \u6839\u76ee\u5f55\u5305\u542bGone\u6846\u67b6\u7684\u914d\u7f6e\u6587\u4ef6\u548cPrometheus\u76f8\u5173\u914d\u7f6e\\n\\n### \u6838\u5fc3\u7ec4\u4ef6\u8bf4\u660e\\n\\n\u9879\u76ee\u4f7f\u7528\u4e86`goner/otel/meter/prometheus/gin`\u7ec4\u4ef6\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6307\u6807\u76d1\u63a7\u89e3\u51b3\u65b9\u6848\uff0c\u5305\u62ec\uff1a\\n\\n- \u81ea\u52a8\u521b\u5efa\u4e00\u4e2aHTTP\u670d\u52a1\uff08\u9ed8\u8ba4\u7aef\u53e38080\uff09\\n- \u63d0\u4f9b`/metrics`\u63a5\u53e3\u7528\u4e8e\u66b4\u9732\u7b26\u5408Prometheus\u683c\u5f0f\u7684\u76d1\u63a7\u6307\u6807\\n- \u96c6\u6210\u4e86OpenTelemetry\u6307\u6807\u6536\u96c6\u548cPrometheus\u5bfc\u51fa\u529f\u80fd\\n- \u57fa\u4e8eGin\u6846\u67b6\u5b9e\u73b0Web\u670d\u52a1\u548c\u8def\u7531\u7ba1\u7406\\n\\n\u8fd9\u4e2a\u7ec4\u4ef6\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7ec4\u5408\u7ec4\u4ef6\uff0c\u5b83\u5305\u542b\u4e86\u4ee5\u4e0b\u529f\u80fd\u6a21\u5757\uff1a\\n\\n- `goner/otel/meter/prometheus`\uff1aPrometheus\u6307\u6807\u6536\u96c6\u5668\u548c\u5bfc\u51fa\u5668\\n- `goner/otel/meter`\uff1aOpenTelemetry\u6307\u6807\u7ba1\u7406\u6838\u5fc3\u529f\u80fd\\n- `goner/otel`\uff1aOpenTelemetry\u57fa\u7840\u529f\u80fd\u548c\u914d\u7f6e\\n- `goner/gin`\uff1a\u57fa\u4e8eGin\u7684Web\u670d\u52a1\u6846\u67b6\\n\\n\u901a\u8fc7Gone\u6846\u67b6\u7684\u4f9d\u8d56\u6ce8\u5165\u673a\u5236\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u88ab\u81ea\u52a8\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u76d1\u63a7\u89e3\u51b3\u65b9\u6848\u3002\\n\\n### \u6307\u6807\u7c7b\u578b\u8be6\u89e3\\n\\n\u5728OpenTelemetry\u4e2d\uff0c\u6709\u56db\u79cd\u57fa\u672c\u7684\u6307\u6807\u7c7b\u578b\uff1a\\n\\n1. **Counter\uff08\u8ba1\u6570\u5668\uff09**\uff1a\u53ea\u589e\u4e0d\u51cf\u7684\u7d2f\u8ba1\u503c\uff0c\u9002\u7528\u4e8e\u8bb0\u5f55\u4e8b\u4ef6\u53d1\u751f\u7684\u6b21\u6570\u3001\u8bf7\u6c42\u6570\u7b49\u3002\\n   - \u793a\u4f8b\uff1aAPI\u8c03\u7528\u6b21\u6570\u3001\u9519\u8bef\u53d1\u751f\u6b21\u6570\\n\\n2. **Gauge\uff08\u4eea\u8868\u76d8\uff09**\uff1a\u53ef\u589e\u53ef\u51cf\u7684\u77ac\u65f6\u503c\uff0c\u9002\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u3002\\n   - \u793a\u4f8b\uff1a\u5f53\u524d\u6d3b\u8dc3\u8fde\u63a5\u6570\u3001\u5f53\u524d\u5185\u5b58\u4f7f\u7528\u91cf\\n\\n3. **Histogram\uff08\u76f4\u65b9\u56fe\uff09**\uff1a\u8bb0\u5f55\u89c2\u6d4b\u503c\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u9002\u7528\u4e8e\u5206\u6790\u6570\u636e\u7684\u5206\u5e03\u7279\u5f81\u3002\\n   - \u793a\u4f8b\uff1a\u8bf7\u6c42\u54cd\u5e94\u65f6\u95f4\u5206\u5e03\u3001\u6587\u4ef6\u5927\u5c0f\u5206\u5e03\\n\\n4. **Summary\uff08\u6458\u8981\uff09**\uff1a\u7c7b\u4f3c\u4e8e\u76f4\u65b9\u56fe\uff0c\u4f46\u76f4\u63a5\u8ba1\u7b97\u5206\u4f4d\u6570\u3002\\n   - \u793a\u4f8b\uff1a\u54cd\u5e94\u65f6\u95f4\u768495\u5206\u4f4d\u6570\u300199\u5206\u4f4d\u6570\\n\\n\u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6700\u7b80\u5355\u7684Counter\u7c7b\u578b\u6765\u8bb0\u5f55API\u8c03\u7528\u6b21\u6570\u3002\\n\\n### \u6307\u6807\u6536\u96c6\u793a\u4f8b\\n\\n\u5728`controller/ctr.go`\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u8ba1\u6570\u5668\u6307\u6807\uff1a\\n\\n```go\\npackage controller\\n\\nimport (\\n\\t\\"github.com/gin-gonic/gin\\"\\n\\t\\"github.com/gone-io/gone/v2\\"\\n\\t\\"github.com/gone-io/goner/g\\"\\n\\t\\"go.opentelemetry.io/otel\\"\\n\\t\\"go.opentelemetry.io/otel/metric\\"\\n)\\n\\ntype ctr struct {\\n\\tgone.Flag\\n\\tr g.IRoutes `gone:\\"*\\"`  // \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u83b7\u53d6\u8def\u7531\u7ec4\u4ef6\\n}\\n\\nfunc (c *ctr) Mount() (err g.MountError) {\\n\\t// \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\\"my-service-meter\\"\u7684\u6307\u6807\u6536\u96c6\u5668\\n\\tvar meter = otel.Meter(\\"my-service-meter\\")\\n\\n\\t// \u5b9a\u4e49\u4e00\u4e2a\u8ba1\u6570\u5668\u7c7b\u578b\u7684\u6307\u6807\\n\\tapiCounter, err := meter.Int64Counter(\\n\\t\\t\\"api.counter\\",           // \u6307\u6807\u540d\u79f0\\n\\t\\tmetric.WithDescription(\\"API\u8c03\u7528\u7684\u6b21\u6570\\"), // \u6307\u6807\u63cf\u8ff0\\n\\t\\tmetric.WithUnit(\\"{\u6b21}\\"),   // \u8ba1\u91cf\u5355\u4f4d\\n\\t)\\n\\tif err != nil {\\n\\t\\treturn gone.ToErrorWithMsg(err, \\"\u521b\u5efaapi.counter\u5931\u8d25\\")\\n\\t}\\n\\n\\t// \u6ce8\u518cHTTP\u63a5\u53e3\uff0c\u6bcf\u6b21\u8bbf\u95ee\u65f6\u589e\u52a0\u8ba1\u6570\u5668\\n\\tc.r.GET(\\"/hello\\", func(ctx *gin.Context) string {\\n\\t\\tapiCounter.Add(ctx, 1)  // \u8ba1\u6570\u5668\u52a01\\n\\t\\treturn \\"hello, world\\"\\n\\t})\\n\\treturn\\n}\\n```\\n\\n\u8fd9\u6bb5\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\uff1a\\n\\n1. **\u521b\u5efa\u6307\u6807\u6536\u96c6\u5668\uff08Meter\uff09**\uff1a\u4f7f\u7528`otel.Meter(\\"my-service-meter\\")`\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\\"my-service-meter\\"\u7684\u6307\u6807\u6536\u96c6\u5668\u3002\u6307\u6807\u6536\u96c6\u5668\u662f\u521b\u5efa\u548c\u7ba1\u7406\u6307\u6807\u7684\u5165\u53e3\u70b9\u3002\\n\\n2. **\u5b9a\u4e49\u6307\u6807\uff08Metric\uff09**\uff1a\u4f7f\u7528`meter.Int64Counter`\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\\"api.counter\\"\u768464\u4f4d\u6574\u6570\u8ba1\u6570\u5668\u3002\u6211\u4eec\u8fd8\u4e3a\u8fd9\u4e2a\u6307\u6807\u6dfb\u52a0\u4e86\u63cf\u8ff0\u548c\u5355\u4f4d\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u4f1a\u5728Prometheus\u754c\u9762\u4e2d\u663e\u793a\uff0c\u5e2e\u52a9\u7528\u6237\u7406\u89e3\u8fd9\u4e2a\u6307\u6807\u7684\u542b\u4e49\u3002\\n\\n3. **\u8bb0\u5f55\u6307\u6807\u6570\u636e**\uff1a\u5728API\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u4f7f\u7528`apiCounter.Add(ctx, 1)`\u6765\u589e\u52a0\u8ba1\u6570\u5668\u7684\u503c\u3002\u6bcf\u6b21\u8bbf\u95ee`/hello`\u63a5\u53e3\u65f6\uff0c\u8ba1\u6570\u5668\u7684\u503c\u90fd\u4f1a\u589e\u52a01\u3002\\n\\n4. **\u6ce8\u518c\u8def\u7531**\uff1a\u4f7f\u7528`c.r.GET`\u65b9\u6cd5\u6ce8\u518c\u4e00\u4e2aHTTP GET\u8def\u7531\uff0c\u5f53\u8bbf\u95ee`/hello`\u8def\u5f84\u65f6\uff0c\u4f1a\u6267\u884c\u6211\u4eec\u5b9a\u4e49\u7684\u5904\u7406\u51fd\u6570\u3002\\n\\n\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u76d1\u63a7API\u7684\u8c03\u7528\u6b21\u6570\uff0c\u4ece\u800c\u4e86\u89e3\u5e94\u7528\u7684\u4f7f\u7528\u60c5\u51b5\u3002\\n\\n### \u6307\u6807\u6807\u7b7e\uff08Labels\uff09\u7684\u4f7f\u7528\\n\\n\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4e3a\u6307\u6807\u6dfb\u52a0\u6807\u7b7e\uff08Labels\uff09\uff0c\u4ee5\u4fbf\u66f4\u7ec6\u7c92\u5ea6\u5730\u5206\u6790\u6570\u636e\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3aAPI\u8c03\u7528\u8ba1\u6570\u5668\u6dfb\u52a0\\"method\\"\u548c\\"path\\"\u6807\u7b7e\uff0c\u4ee5\u533a\u5206\u4e0d\u540cAPI\u7684\u8c03\u7528\u60c5\u51b5\uff1a\\n\\n```go\\n// \u5b9a\u4e49\u6307\u6807\\napiCounter, err := meter.Int64Counter(\\n    \\"api.counter\\",\\n    metric.WithDescription(\\"API\u8c03\u7528\u7684\u6b21\u6570\\"),\\n    metric.WithUnit(\\"{\u6b21}\\"),\\n)\\n\\n// \u6ce8\u518cHTTP\u63a5\u53e3\\nc.r.GET(\\"/hello\\", func(ctx *gin.Context) string {\\n    // \u5e26\u6807\u7b7e\u7684\u6307\u6807\u8bb0\u5f55\\n    apiCounter.Add(ctx, 1, metric.WithAttributes(\\n        attribute.String(\\"method\\", \\"GET\\"),\\n        attribute.String(\\"path\\", \\"/hello\\"),\\n    ))\\n    return \\"hello, world\\"\\n})\\n\\nc.r.POST(\\"/data\\", func(ctx *gin.Context) string {\\n    // \u4f7f\u7528\u4e0d\u540c\u7684\u6807\u7b7e\u503c\\n    apiCounter.Add(ctx, 1, metric.WithAttributes(\\n        attribute.String(\\"method\\", \\"POST\\"),\\n        attribute.String(\\"path\\", \\"/data\\"),\\n    ))\\n    return \\"data received\\"\\n})\\n```\\n\\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728Prometheus\u4e2d\u5206\u522b\u67e5\u8be2\u4e0d\u540cAPI\u7684\u8c03\u7528\u6b21\u6570\uff0c\u4f8b\u5982\uff1a\\n- `api_counter_total{method=\\"GET\\", path=\\"/hello\\"}`\\n- `api_counter_total{method=\\"POST\\", path=\\"/data\\"}`\\n\\n### \u76d1\u63a7\u6570\u636e\u91c7\u96c6\u914d\u7f6e\\n\\nPrometheus\u7684\u914d\u7f6e\uff08`prometheus.yml`\uff09\u4e5f\u5f88\u7b80\u5355\uff1a\\n\\n```yaml\\nscrape_configs:\\n  - job_name: \'node\'\\n    scrape_interval: 5s    # \u6bcf5\u79d2\u91c7\u96c6\u4e00\u6b21\u6570\u636e\\n    static_configs:\\n      - targets: [\'localhost:8080\']\\n        labels:\\n          group: \'canary\'\\n```\\n\\n\u8fd9\u4e2a\u914d\u7f6e\u544a\u8bc9Prometheus\uff1a\\n\\n- \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\\"node\\"\u7684\u91c7\u96c6\u4efb\u52a1\uff08job\uff09\\n- \u6bcf5\u79d2\u4ece`localhost:8080`\uff08\u6211\u4eec\u7684\u5e94\u7528\uff09\u62c9\u53d6\u4e00\u6b21\u6307\u6807\u6570\u636e\\n- \u4e3a\u91c7\u96c6\u5230\u7684\u6240\u6709\u6307\u6807\u6dfb\u52a0\u4e00\u4e2a`group=\\"canary\\"`\u7684\u6807\u7b7e\\n\\nPrometheus\u4f1a\u81ea\u52a8\u5c06\u8fd9\u4e9b\u914d\u7f6e\u5e94\u7528\u5230\u91c7\u96c6\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u5c06\u91c7\u96c6\u5230\u7684\u6570\u636e\u5b58\u50a8\u5728\u5176\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\u4e2d\u3002\\n\\n## \u9ad8\u7ea7\u529f\u80fd\\n\\n### \u4f7f\u7528Gauge\u76d1\u63a7\u7cfb\u7edf\u8d44\u6e90\\n\\n\u9664\u4e86\u8ba1\u6570\u5668\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528Gauge\uff08\u4eea\u8868\u76d8\uff09\u7c7b\u578b\u7684\u6307\u6807\u6765\u76d1\u63a7\u7cfb\u7edf\u8d44\u6e90\u7684\u4f7f\u7528\u60c5\u51b5\uff1a\\n\\n```go\\n// \u521b\u5efa\u5185\u5b58\u4f7f\u7528\u91cf\u6307\u6807\\nmemoryGauge, _ := meter.Float64ObservableGauge(\\n    \\"system.memory.usage\\",\\n    metric.WithDescription(\\"\u7cfb\u7edf\u5185\u5b58\u4f7f\u7528\u91cf\\"),\\n    metric.WithUnit(\\"MB\\"),\\n)\\n\\n// \u6ce8\u518c\u89c2\u5bdf\u51fd\u6570\uff0c\u5b9a\u671f\u66f4\u65b0\u6307\u6807\u503c\\nmeter.RegisterCallback(\\n    func(ctx context.Context, o metric.Observer) error {\\n        var m runtime.MemStats\\n        runtime.ReadMemStats(&m)\\n        o.ObserveFloat64(memoryGauge, float64(m.Alloc)/1024/1024)  // \u8f6c\u6362\u4e3aMB\\n        return nil\\n    },\\n    memoryGauge,\\n)\\n```\\n\\n\u8fd9\u6bb5\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u89c2\u5bdf\u7684Gauge\u6307\u6807\uff0c\u7528\u4e8e\u76d1\u63a7\u5e94\u7528\u7684\u5185\u5b58\u4f7f\u7528\u91cf\u3002\u901a\u8fc7\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u671f\u8bfb\u53d6\u7cfb\u7edf\u5185\u5b58\u72b6\u6001\uff0c\u5e76\u66f4\u65b0\u6307\u6807\u503c\u3002\\n\\n### \u4f7f\u7528Histogram\u76d1\u63a7\u8bf7\u6c42\u54cd\u5e94\u65f6\u95f4\\n\\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528Histogram\uff08\u76f4\u65b9\u56fe\uff09\u7c7b\u578b\u7684\u6307\u6807\u6765\u76d1\u63a7\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u95f4\u5206\u5e03\uff1a\\n\\n```go\\n// \u521b\u5efa\u54cd\u5e94\u65f6\u95f4\u76f4\u65b9\u56fe\\nresponseTimeHistogram, _ := meter.Int64Histogram(\\n    \\"api.response.time\\",\\n    metric.WithDescription(\\"API\u54cd\u5e94\u65f6\u95f4\\"),\\n    metric.WithUnit(\\"ms\\"),\\n)\\n\\n// \u521b\u5efa\u4e2d\u95f4\u4ef6\uff0c\u8bb0\u5f55\u8bf7\u6c42\u5904\u7406\u65f6\u95f4\\nfunc MetricsMiddleware(apiCounter metric.Int64Counter, responseTimeHistogram metric.Int64Histogram) gin.HandlerFunc {\\n    return func(c *gin.Context) {\\n        start := time.Now()\\n\\n        // \u5904\u7406\u8bf7\u6c42\\n        c.Next()\\n\\n        // \u8bb0\u5f55\u54cd\u5e94\u65f6\u95f4\\n        duration := time.Since(start).Milliseconds()\\n        responseTimeHistogram.Record(c, duration,\\n            metric.WithAttributes(\\n                attribute.String(\\"path\\", c.Request.URL.Path),\\n                attribute.Int(\\"status\\", c.Writer.Status()),\\n            ),\\n        )\\n\\n        // \u8bb0\u5f55\u8bf7\u6c42\u8ba1\u6570\\n        apiCounter.Add(c, 1,\\n            metric.WithAttributes(\\n                attribute.String(\\"path\\", c.Request.URL.Path),\\n                attribute.Int(\\"status\\", c.Writer.Status()),\\n            ),\\n        )\\n    }\\n}\\n```\\n\\n\u8fd9\u6bb5\u4ee3\u7801\u521b\u5efa\u4e86\u4e00\u4e2aGin\u4e2d\u95f4\u4ef6\uff0c\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u8bf7\u6c42\u7684\u5904\u7406\u65f6\u95f4\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\u4e3a\u76f4\u65b9\u56fe\u6307\u6807\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6790API\u7684\u6027\u80fd\u7279\u5f81\uff0c\u4f8b\u5982\u54cd\u5e94\u65f6\u95f4\u7684\u5206\u5e03\u3001\u4e2d\u4f4d\u6570\u300195\u5206\u4f4d\u6570\u7b49\u3002\\n\\n### \u4f7f\u7528Grafana\u6784\u5efa\u53ef\u89c6\u5316\u4eea\u8868\u76d8\\n\\n\u867d\u7136Prometheus\u81ea\u5e26\u4e86\u57fa\u672c\u7684\u53ef\u89c6\u5316\u529f\u80fd\uff0c\u4f46\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u4f7f\u7528Grafana\u6765\u6784\u5efa\u66f4\u4e30\u5bcc\u3001\u66f4\u7f8e\u89c2\u7684\u76d1\u63a7\u4eea\u8868\u76d8\u3002Grafana\u53ef\u4ee5\u8fde\u63a5\u591a\u79cd\u6570\u636e\u6e90\uff0c\u5305\u62ecPrometheus\uff0c\u5e76\u63d0\u4f9b\u5f3a\u5927\u7684\u53ef\u89c6\u5316\u548c\u544a\u8b66\u529f\u80fd\u3002\\n\\n\u8981\u96c6\u6210Grafana\uff0c\u6211\u4eec\u53ef\u4ee5\u5728`docker-compose.yaml`\u4e2d\u6dfb\u52a0Grafana\u670d\u52a1\uff1a\\n\\n```yaml\\nservices:\\n  prometheus:\\n    image: prom/prometheus\\n    ports:\\n      - \\"9090:9090\\"\\n    volumes:\\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\\n  grafana:\\n    image: grafana/grafana\\n    ports:\\n      - \\"3000:3000\\"\\n    volumes:\\n      - grafana-storage:/var/lib/grafana\\n    depends_on:\\n      - prometheus\\n\\nvolumes:\\n  grafana-storage:\\n```\\n\\n\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95eeGrafana\u754c\u9762\uff08 http://localhost:3000 \uff09\uff0c\u914d\u7f6ePrometheus\u6570\u636e\u6e90\uff0c\u5e76\u521b\u5efa\u81ea\u5b9a\u4e49\u4eea\u8868\u76d8\u3002\\n\\n## \u6700\u4f73\u5b9e\u8df5\\n\\n### \u6307\u6807\u547d\u540d\u89c4\u8303\\n\\n\u826f\u597d\u7684\u6307\u6807\u547d\u540d\u89c4\u8303\u53ef\u4ee5\u4f7f\u76d1\u63a7\u7cfb\u7edf\u66f4\u6613\u4e8e\u4f7f\u7528\u548c\u7ef4\u62a4\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5e94\u8be5\u9075\u5faa\u8fd9\u4e9b\u539f\u5219\uff1a\\n\\n- \u4f7f\u7528\u70b9\u5206\u9694\u7684\u547d\u540d\u7a7a\u95f4\uff1a\u4f8b\u5982`app.api.counter`\\n- \u5728\u540d\u79f0\u4e2d\u5305\u542b\u5ea6\u91cf\u7c7b\u578b\uff1a\u4f8b\u5982`api.request.count`\u3001`api.response.time`\\n- \u4f7f\u7528\u6709\u610f\u4e49\u7684\u524d\u7f00\uff1a\u4f8b\u5982`app`\u3001`system`\u3001`db`\\n- \u4fdd\u6301\u4e00\u81f4\u6027\uff1a\u5728\u6574\u4e2a\u5e94\u7528\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u547d\u540d\u6a21\u5f0f\\n\\n### \u907f\u514d\u8fc7\u5ea6\u4f7f\u7528\u6807\u7b7e\\n\\n\u867d\u7136\u6807\u7b7e\u53ef\u4ee5\u63d0\u4f9b\u66f4\u7ec6\u7c92\u5ea6\u7684\u6570\u636e\u5206\u6790\uff0c\u4f46\u8fc7\u5ea6\u4f7f\u7528\u6807\u7b7e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\u3002\u6bcf\u4e2a\u6807\u7b7e\u7ec4\u5408\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u65f6\u95f4\u5e8f\u5217\uff0c\u8fd9\u4f1a\u589e\u52a0Prometheus\u7684\u5185\u5b58\u548cCPU\u4f7f\u7528\u91cf\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5e94\u8be5\uff1a\\n\\n- \u53ea\u4f7f\u7528\u5fc5\u8981\u7684\u6807\u7b7e\\n- \u907f\u514d\u4f7f\u7528\u9ad8\u57fa\u6570\u7684\u6807\u7b7e\uff08\u5982\u7528\u6237ID\u3001\u8bf7\u6c42ID\u7b49\uff09\\n- \u9650\u5236\u6807\u7b7e\u503c\u7684\u6570\u91cf\\n\\n### \u96c6\u6210\u544a\u8b66\u7cfb\u7edf\\n\\n\u76d1\u63a7\u7cfb\u7edf\u7684\u6700\u7ec8\u76ee\u7684\u662f\u53ca\u65f6\u53d1\u73b0\u95ee\u9898\uff0c\u5e76\u91c7\u53d6\u76f8\u5e94\u7684\u63aa\u65bd\u3002Prometheus\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u544a\u8b66\u529f\u80fd\uff0c\u53ef\u4ee5\u57fa\u4e8e\u6307\u6807\u6570\u636e\u89e6\u53d1\u544a\u8b66\u3002\u6211\u4eec\u53ef\u4ee5\u914d\u7f6eAlertManager\u6765\u5904\u7406\u8fd9\u4e9b\u544a\u8b66\uff0c\u5e76\u5c06\u5b83\u4eec\u53d1\u9001\u5230\u4e0d\u540c\u7684\u901a\u77e5\u6e20\u9053\uff08\u5982\u90ae\u4ef6\u3001Slack\u3001PagerDuty\u7b49\uff09\u3002\\n\\n## \u603b\u7ed3\\n\\n\u901a\u8fc7\u672c\u6587\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528Gone\u6846\u67b6\u7684`goner/otel/meter`\u7ec4\u4ef6\uff0c\u7ed3\u5408Prometheus\u548cOpenTelemetry\u6280\u672f\u6808\uff0c\u5b9e\u73b0\u5e94\u7528\u7684\u6307\u6807\u76d1\u63a7\u7cfb\u7edf\u3002\u8fd9\u79cd\u76d1\u63a7\u7cfb\u7edf\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a\\n\\n- \u6807\u51c6\u5316\uff1a\u57fa\u4e8eOpenTelemetry\u6807\u51c6\uff0c\u4e0e\u751f\u6001\u7cfb\u7edf\u517c\u5bb9\\n- \u53ef\u6269\u5c55\uff1a\u652f\u6301\u591a\u79cd\u6307\u6807\u7c7b\u578b\u548c\u590d\u6742\u7684\u6570\u636e\u5206\u6790\\n- \u4f4e\u4fb5\u5165\u6027\uff1a\u901a\u8fc7\u7b80\u5355\u7684API\u8c03\u7528\u5373\u53ef\u5b9e\u73b0\u6307\u6807\u6536\u96c6\\n- \u9ad8\u6027\u80fd\uff1a\u5bf9\u5e94\u7528\u6027\u80fd\u7684\u5f71\u54cd\u6781\u5c0f\\n\\n\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u6269\u5c55\u8fd9\u4e2a\u57fa\u7840\u7cfb\u7edf\uff0c\u6dfb\u52a0\u66f4\u591a\u7684\u6307\u6807\u3001\u6784\u5efa\u66f4\u4e30\u5bcc\u7684\u4eea\u8868\u76d8\uff0c\u4ee5\u53ca\u96c6\u6210\u66f4\u5b8c\u5584\u7684\u544a\u8b66\u7cfb\u7edf\u3002\u901a\u8fc7\u8fd9\u4e9b\u52aa\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u5168\u9762\u3001\u9ad8\u6548\u7684\u5e94\u7528\u76d1\u63a7\u7cfb\u7edf\uff0c\u63d0\u9ad8\u5e94\u7528\u7684\u53ef\u89c2\u6d4b\u6027\u548c\u53ef\u9760\u6027\u3002\\n\\n## \u53c2\u8003\u8d44\u6599\\n\\n- [Gone\u6846\u67b6\u5b98\u65b9\u6587\u6863](https://github.com/gone-io/gone)\\n- [OpenTelemetry\u5b98\u65b9\u6587\u6863](https://opentelemetry.io/docs/)\\n- [Prometheus\u5b98\u65b9\u6587\u6863](https://prometheus.io/docs/introduction/overview/)\\n- [Grafana\u5b98\u65b9\u6587\u6863](https://grafana.com/docs/)"},{"id":"goner-otel-integration-guide","metadata":{"permalink":"/blog/goner-otel-integration-guide","editUrl":"https://github.com/gone-io/v2-site/tree/main/blog/blog/2025-05-08-otel-goner.md","source":"@site/blog/2025-05-08-otel-goner.md","title":"\u4f7f\u7528goner/otel\u63a5\u5165OpenTelemetry","description":"\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5728Gone\u6846\u67b6\u4e2d\u96c6\u6210OpenTelemetry\uff0c\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ffd\u8e2a\u3001\u6307\u6807\u6536\u96c6\u548c\u65e5\u5fd7\u7ba1\u7406\u3002\u901a\u8fc7goner/otel\u7ec4\u4ef6\uff0c\u8ba9\u60a8\u7684\u5fae\u670d\u52a1\u8f7b\u677e\u5177\u5907\u5b8c\u6574\u7684\u53ef\u89c2\u6d4b\u6027\u80fd\u529b\uff0c\u5305\u542b\u5b9e\u6218\u793a\u4f8b\u548c\u6700\u4f73\u5b9e\u8df5\u6307\u5357\u3002","date":"2025-05-08T11:50:00.000Z","tags":[{"inline":true,"label":"OpenTelemetry","permalink":"/blog/tags/open-telemetry"},{"inline":true,"label":"Gone","permalink":"/blog/tags/gone"},{"inline":true,"label":"\u53ef\u89c2\u6d4b\u6027","permalink":"/blog/tags/\u53ef\u89c2\u6d4b\u6027"},{"inline":true,"label":"\u6280\u672f\u5b9e\u8df5","permalink":"/blog/tags/\u6280\u672f\u5b9e\u8df5"}],"readingTime":8.98,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"goner-otel-integration-guide","description":"\u672c\u6587\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5728Gone\u6846\u67b6\u4e2d\u96c6\u6210OpenTelemetry\uff0c\u5b9e\u73b0\u5206\u5e03\u5f0f\u8ffd\u8e2a\u3001\u6307\u6807\u6536\u96c6\u548c\u65e5\u5fd7\u7ba1\u7406\u3002\u901a\u8fc7goner/otel\u7ec4\u4ef6\uff0c\u8ba9\u60a8\u7684\u5fae\u670d\u52a1\u8f7b\u677e\u5177\u5907\u5b8c\u6574\u7684\u53ef\u89c2\u6d4b\u6027\u80fd\u529b\uff0c\u5305\u542b\u5b9e\u6218\u793a\u4f8b\u548c\u6700\u4f73\u5b9e\u8df5\u6307\u5357\u3002","keywords":["OpenTelemetry","Gone\u6846\u67b6","\u53ef\u89c2\u6d4b\u6027","\u5206\u5e03\u5f0f\u8ffd\u8e2a","\u6027\u80fd\u76d1\u63a7","\u5fae\u670d\u52a1\u76d1\u63a7","Go\u8bed\u8a00","\u4e91\u539f\u751f","\u7cfb\u7edf\u76d1\u63a7","\u65e5\u5fd7\u7ba1\u7406"],"tags":["OpenTelemetry","Gone","\u53ef\u89c2\u6d4b\u6027","\u6280\u672f\u5b9e\u8df5"],"date":"2025-05-08T11:50"},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528goner/otel/meter\u5b9e\u73b0\u5e94\u7528\u6307\u6807\u76d1\u63a7","permalink":"/blog/goner-meter"},"nextItem":{"title":"OpenTelemetry\u4ecb\u7ecd","permalink":"/blog/opentelemetry-introduction-guide"}},"content":"## \u80cc\u666f\u4e0e\u610f\u4e49\\n[OpenTelemetry](https://opentelemetry.io/) \u662f\u5f53\u524d\u4e91\u539f\u751f\u9886\u57df\u4e8b\u5b9e\u6807\u51c6\u7684\u53ef\u89c2\u6d4b\u6027\u6846\u67b6\uff0c\u652f\u6301\u5206\u5e03\u5f0f\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\u7684\u91c7\u96c6\u4e0e\u5bfc\u51fa\u3002\u5b83\u5e2e\u52a9\u5f00\u53d1\u8005\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e0b\u5feb\u901f\u5b9a\u4f4d\u95ee\u9898\u3001\u5206\u6790\u6027\u80fd\u74f6\u9888\u3002\\n\\n[Gone\u6846\u67b6](https://github.com/gone-io/gone) \u662f\u4e00\u4e2a\u57fa\u4e8eGo\u8bed\u8a00\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\uff0c\u4e13\u6ce8\u4e8e\u7b80\u5316\u670d\u52a1\u6ce8\u518c\u3001\u4f9d\u8d56\u7ba1\u7406\u548c\u7ec4\u4ef6\u89e3\u8026\u3002[goner](https://github.com/gone-io/goner) \u662fGone\u751f\u6001\u4e0b\u7684\u7ec4\u4ef6\u5e93\uff0c\u63d0\u4f9b\u4e86\u65e5\u5fd7\u3001\u914d\u7f6e\u3001\u6570\u636e\u5e93\u3001\u7f13\u5b58\u7b49\u5e38\u7528\u80fd\u529b\u3002\\n\\n\u5c06 OpenTelemetry \u4e0e Gone \u6846\u67b6\u7ed3\u5408\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7684\u5fae\u670d\u52a1\u5929\u7136\u5177\u5907\u5206\u5e03\u5f0f\u8ffd\u8e2a\u80fd\u529b\uff0c\u6781\u5927\u63d0\u5347\u7cfb\u7edf\u53ef\u89c2\u6d4b\u6027\u548c\u8fd0\u7ef4\u6548\u7387\u3002\\n\\n\u672c\u6587\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7 [goner/otel](https://github.com/gone-io/goner/tree/main/otel) \u7ec4\u4ef6\uff0c\u5728 Gone \u6846\u67b6\u4e2d\u4f18\u96c5\u96c6\u6210 OpenTelemetry\uff0c\u5e76\u7ed9\u51fa\u5b9e\u7528\u4ee3\u7801\u793a\u4f8b\u3001\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u53ca\u6700\u4f73\u5b9e\u8df5\u3002\\n\\n## \u5feb\u901f\u4e0a\u624b\uff1a\u4e94\u6b65\u96c6\u6210 OpenTelemetry\\n![](/img/202505081121-otel-goner-01.gif)\\n\\n1. \u5b89\u88c5 gonectl \u811a\u624b\u67b6\u5de5\u5177\uff1a\\n```bash\\ngo install github.com/gone-io/gonectl@latest\\n```\\n2. \u521b\u5efa\u57fa\u4e8e otel/tracer \u6a21\u677f\u7684\u793a\u4f8b\u9879\u76ee\uff1a\\n```bash\\ngonectl create -t otel/tracer/simple tracer-demo\\ncd tracer-demo\\n```\\n3. \u62c9\u53d6\u4f9d\u8d56\uff1a\\n```bash\\ngo mod tidy\\n```\\n4. \u8fd0\u884c\u793a\u4f8b\uff1a\\n```bash\\ngo run .\\n```\\n5. \u67e5\u770b\u63a7\u5236\u53f0\u8f93\u51fa\u7684\u8ffd\u8e2a\u4fe1\u606f\u3002\\n\\n> \u4f60\u4e5f\u53ef\u4ee5\u5728\u5df2\u6709 Gone \u9879\u76ee\u4e2d\u76f4\u63a5\u5b89\u88c5 otel \u7ec4\u4ef6\uff1a\\n> ```bash\\n> gonectl install goner/otel/tracer\\n> ```\\n\x3c!-- truncate --\x3e\\n## \u8fd0\u884c\u6548\u679c\u5c55\u793a\\n\\n\u6267\u884c\u540e\u4f60\u5c06\u5728\u63a7\u5236\u53f0\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u8ffd\u8e2a\u6570\u636e\uff08\u5df2\u7b80\u5316\uff09\uff1a\\n```json5\\n{\\n  \\"Name\\": \\"handle-request\\",\\n  \\"SpanContext\\": {\\n    \\"TraceID\\": \\"...\\",\\n    \\"SpanID\\": \\"...\\"\\n  },\\n  \\"Events\\": [\\n    { \\"Name\\": \\"\u5f00\u59cb\u5904\u7406\u8bf7\u6c42\\" }\\n  ],\\n  \\"Resource\\": [\\n    { \\"Key\\": \\"service.name\\", \\"Value\\": { \\"Value\\": \\"simple demo\\" } },\\n    { \\"Key\\": \\"telemetry.sdk.language\\", \\"Value\\": { \\"Value\\": \\"go\\" } }\\n  ]\\n}\\n```\\n\u4f60\u53ef\u4ee5\u5c06\u6570\u636e\u5bfc\u51fa\u5230 Jaeger\u3001Zipkin\u3001Prometheus \u7b49\u540e\u7aef\u8fdb\u884c\u53ef\u89c6\u5316\u5206\u6790\u3002\\n## \u4ee3\u7801\u8be6\u89e3\u4e0e\u5b9e\u8df5\\n\\n### \u76ee\u5f55\u7ed3\u6784\u8bf4\u660e\\n```bash\\ntracer-demo/\\n\u251c\u2500\u2500 go.mod           # Go module \u6587\u4ef6\\n\u251c\u2500\u2500 go.sum           # \u4f9d\u8d56\u6821\u9a8c\\n\u251c\u2500\u2500 main.go          # \u7a0b\u5e8f\u5165\u53e3\\n\u251c\u2500\u2500 module.load.go   # \u7ec4\u4ef6\u52a0\u8f7d\u5165\u53e3\uff08\u81ea\u52a8\u751f\u6210\uff09\\n\u251c\u2500\u2500 README_CN.md     # \u4e2d\u6587\u8bf4\u660e\\n\u251c\u2500\u2500 README.md        # \u82f1\u6587\u8bf4\u660e\\n\u2514\u2500\u2500 your_component.go# \u4e1a\u52a1\u7ec4\u4ef6\u793a\u4f8b\\n```\\n\\n### \u7ec4\u4ef6\u52a0\u8f7d\uff08module.load.go\uff09\\n\u8be5\u6587\u4ef6\u7531 gonectl \u81ea\u52a8\u751f\u6210\uff0c\u7528\u4e8e\u6ce8\u518c\u548c\u52a0\u8f7d goner/otel/tracer \u7ec4\u4ef6\uff1a\\n```go\\n// Code generated by gonectl. DO NOT EDIT.\\npackage main\\nimport (\\n  \\"github.com/gone-io/gone/v2\\"\\n  \\"github.com/gone-io/goner/g\\"\\n  \\"github.com/gone-io/goner/otel/tracer\\"\\n)\\nvar loaders = []gone.LoadFunc{\\n  tracer.Register,\\n}\\nfunc GoneModuleLoad(loader gone.Loader) error {\\n  var ops []*g.LoadOp\\n  for _, f := range loaders {\\n    ops = append(ops, g.F(f))\\n  }\\n  return g.BuildOnceLoadFunc(ops...)(loader)\\n}\\n```\\n\\n### \u4e1a\u52a1\u7ec4\u4ef6\u793a\u4f8b\uff08your_component.go\uff09\\n```go\\npackage main\\nimport (\\n  \\"context\\"\\n  \\"github.com/gone-io/gone/v2\\"\\n  \\"go.opentelemetry.io/otel/trace\\"\\n)\\ntype YourComponent struct {\\n  gone.Flag\\n  tracer trace.Tracer `gone:\\"*,otel-tracer\\"` // \u6ce8\u5165 OpenTelemetry Tracer\\n}\\nfunc (c *YourComponent) HandleRequest(ctx context.Context) {\\n  tracer := c.tracer\\n  ctx, span := tracer.Start(ctx, \\"handle-request\\")\\n  defer span.End()\\n  span.AddEvent(\\"\u5f00\u59cb\u5904\u7406\u8bf7\u6c42\\")\\n  // ...\u4e1a\u52a1\u903b\u8f91...\\n}\\n```\\n\\n### \u7a0b\u5e8f\u5165\u53e3\uff08main.go\uff09\\n```go\\npackage main\\nimport (\\n  \\"context\\"\\n  \\"github.com/gone-io/gone/v2\\"\\n  \\"os\\"\\n)\\nfunc main() {\\n  _ = os.Setenv(\\"GONE_OTEL_SERVICE_NAME\\", \\"simple demo\\") // \u8bbe\u7f6e\u670d\u52a1\u540d\u79f0\\n  gone.\\n    Loads(GoneModuleLoad).\\n    Load(&YourComponent{}).\\n    Run(func(c *YourComponent) {\\n      c.HandleRequest(context.Background())\\n    })\\n}\\n```\\n\\n## \u8fdb\u9636\u7528\u6cd5\u4e0e\u6700\u4f73\u5b9e\u8df5\\n\\n### \u4f7f\u7528 goner/viper \u8bfb\u53d6\u914d\u7f6e\\n- \u5b89\u88c5 goner/viper \u7ec4\u4ef6\uff1a\\n\\n```bash\\ngonectl install goner/viper\\n```\\n- \u589e\u52a0\u914d\u7f6e\u6587\u4ef6\uff1a config/default.yaml\\n\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\uff1a\\n```yaml\\notel:\\n    service:\\n        name: simple demo\\n```\\n\\n- \u53bb\u6389main.go\u4e2d\u8bbe\u7f6e\u670d\u52a1\u540d\u79f0\u7684\u4ee3\u7801\uff1a\\n```go\\n//...\\nfunc main() {\\n//   _ = os.Setenv(\\"GONE_OTEL_SERVICE_NAME\\", \\"simple demo\\") // \u8bbe\u7f6e\u670d\u52a1\u540d\u79f0\\n// ...\\n}\\n```\\n\\n### \u4f7f\u7528OLTP/HTTP\u5c06\u94fe\u8def\u8ffd\u8e2a\u6570\u636e\u53d1\u9001\u81f3 Jaeger\\n\u5982\u679c\u89c9\u7740\u63a7\u5236\u53f0\u770b\u7684 span \u4e0d\u591f\u76f4\u89c2\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u94fe\u8def\u8ffd\u8e2a\u7684\u6570\u636e\u53d1\u9001\u81f3 Jaeger\uff0c\u901a\u8fc7 Jaeger UI \u67e5\u770b\u3002\\n\\n#### \u542f\u52a8 Jaeger\\nJaeger \u5b98\u65b9\u63d0\u4f9b\u7684 all-in-one \u662f\u4e3a\u5feb\u901f\u672c\u5730\u6d4b\u8bd5\u800c\u8bbe\u8ba1\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5b83\u5305\u62ec Jaeger UI\u3001jaeger-collector\u3001jaeger-query \u548c jaeger-agent\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5185\u5b58\u5b58\u50a8\u7ec4\u4ef6\u3002\\n\\n\u542f\u52a8 all-in-one \u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528\u53d1\u5e03\u5230 DockerHub \u7684\u9884\u7f6e\u955c\u50cf\uff08\u53ea\u9700\u4e00\u6761\u547d\u4ee4\u884c\uff09\u3002\\n```bash\\ndocker run --rm --name jaeger \\\\\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\\\\n  -p 6831:6831/udp \\\\\\n  -p 6832:6832/udp \\\\\\n  -p 5778:5778 \\\\\\n  -p 16686:16686 \\\\\\n  -p 4317:4317 \\\\\\n  -p 4318:4318 \\\\\\n  -p 14250:14250 \\\\\\n  -p 14268:14268 \\\\\\n  -p 14269:14269 \\\\\\n  -p 9411:9411 \\\\\\n  jaegertracing/all-in-one:1.55\\n```\\n\u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528\u6d4f\u89c8\u5668\u6253\u5f00 [http://localhost:16686](http://localhost:16686) \u8bbf\u95eeJaeger UI\u3002\\n\\n\u5bb9\u5668\u516c\u5f00\u4ee5\u4e0b\u7aef\u53e3\uff1a\\n\\n| \u7aef\u53e3  | \u534f\u8bae   | \u7ec4\u4ef6      | \u529f\u80fd\u8bf4\u660e |\\n|-------|--------|-----------|-------------------------------------------------------------|\\n| 6831  | UDP    | agent     | \u63a5\u6536 jaeger.thrift\uff08Thrift-compact\uff0c\u4e3b\u6d41 SDK \u4f7f\u7528\uff09         |\\n| 6832  | UDP    | agent     | \u63a5\u6536 jaeger.thrift\uff08Thrift-binary\uff0cNode.js SDK \u4f7f\u7528\uff09        |\\n| 5775  | UDP    | agent     | \uff08\u5df2\u5e9f\u5f03\uff09\u63a5\u6536 zipkin.thrift\uff08Thrift-compact\uff0c\u65e7\u7248\u5ba2\u6237\u7aef\uff09  |\\n| 5778  | HTTP   | agent     | \u63d0\u4f9b\u914d\u7f6e\uff08\u91c7\u6837\u7b49\uff09                                           |\\n| 16686 | HTTP   | query     | \u63d0\u4f9b\u524d\u7aef UI                                                  |\\n| 4317  | HTTP   | collector | \u63a5\u6536 OTLP\uff08gRPC \u534f\u8bae\uff09                                       |\\n| 4318  | HTTP   | collector | \u63a5\u6536 OTLP\uff08HTTP \u534f\u8bae\uff09                                       |\\n| 14268 | HTTP   | collector | \u76f4\u63a5\u63a5\u6536 jaeger.thrift \u5ba2\u6237\u7aef\u6570\u636e                            |\\n| 14250 | HTTP   | collector | \u63a5\u6536 model.proto                                             |\\n| 9411  | HTTP   | collector | Zipkin \u517c\u5bb9\u7aef\u70b9\uff08\u53ef\u9009\uff09                                      |\\n\\n\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528 HTTP \u534f\u8bae\u76844318 \u7aef\u53e3\u4e0a\u62a5\u94fe\u8def\u8ffd\u8e2a\u6570\u636e\u3002\\n\\n#### \u4e0a\u62a5\u81f3 Jaeger\\n1. \u5b89\u88c5`goner/otel/tracer/http` \u7ec4\u4ef6\uff1a\\n```bash\\ngonectl install goner/otel/tracer/http\\n```\\n\\n2. \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6dfb\u52a0tracer\u7684\u914d\u7f6e\u5185\u5bb9\uff1a\\n```yaml\\notel:\\n    service:\\n        name: simple demo\\n    # \u65b0\u589e\u4ee5\u4e0b\u914d\u7f6e\\n    tracer:\\n        http:\\n            endpoint: localhost:4318\\n            insecure: true\\n```\\n3. \u79fb\u9664`goner/otel/tracer`\u7ec4\u4ef6\uff0c\u6267\u884c`gonectl install goner/otel/tracer`\u547d\u4ee4\uff0c\u53bb\u6389`goner/otel/tracer`\u7684\u52fe\u9009\uff1a\\n![](/img/202505081121-otel-goner-02.png)\\n\\n4. \u8fd0\u884cdemo\u9879\u76ee\uff1a`go run .`\uff0c\u8fd9\u6b21\u94fe\u8def\u4fe1\u606f\u6ca1\u6709\u6253\u5370\u5230\u63a7\u5236\u53f0\uff0c\u800c\u662f\u88ab\u53d1\u9001\u5230\u4e86Jaeger\uff0c\u6240\u4ee5\u770b\u5230\u7a0b\u5e8f\u76f4\u63a5\u9000\u51fa\u4e86\u3002\\n\\n#### \u5728Jaeger UI \u67e5\u770b\u94fe\u8def\u6570\u636e\\n\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee [Jaeger UI \u67e5\u770b\u94fe\u8def\u6570\u636e\\n\u6253\u5f00Jaeger UI \u67e5\u770b\u94fe\u8def\u6570\u636e\\n\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee [http://localhost:16686](http://localhost:16686)\uff1a\\n![](/img/202505081121-otel-goner-03.png)\\n![](/img/202505081121-otel-goner-04.png)\\n\\n\\n### \u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff08FAQ\uff09\\n\\n#### 1. \u4e3a\u4ec0\u4e48\u96c6\u6210 goner/otel \u540e\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u8ffd\u8e2a\u6570\u636e\u8f93\u51fa\uff1f\\n- \u8bf7\u786e\u8ba4\u5df2\u6b63\u786e\u5b89\u88c5\u5e76\u52a0\u8f7d `goner/otel/tracer` \u7ec4\u4ef6\u3002\\n- \u68c0\u67e5 `main.go` \u662f\u5426\u8bbe\u7f6e\u4e86\u670d\u52a1\u540d\u79f0\uff08\u5982\u901a\u8fc7\u73af\u5883\u53d8\u91cf `GONE_OTEL_SERVICE_NAME` \u6216\u914d\u7f6e\u6587\u4ef6\uff09\u3002\\n- \u82e5\u4f7f\u7528 HTTP \u4e0a\u62a5\u81f3 Jaeger\uff0c\u9700\u786e\u4fdd Jaeger \u670d\u52a1\u5df2\u542f\u52a8\u4e14 endpoint \u914d\u7f6e\u6b63\u786e\u3002\\n\\n#### 2. Jaeger UI \u6ca1\u6709\u663e\u793a\u4efb\u4f55\u94fe\u8def\u6570\u636e\u600e\u4e48\u529e\uff1f\\n- \u8bf7\u786e\u8ba4 Jaeger \u5bb9\u5668\u5df2\u542f\u52a8\u4e14\u7aef\u53e3\uff08\u5982 4318\u300116686\uff09\u672a\u88ab\u5360\u7528\u3002\\n- \u68c0\u67e5\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 `otel.tracer.http.endpoint` \u662f\u5426\u4e3a Jaeger \u7684 HTTP \u91c7\u96c6\u7aef\u53e3\uff08\u901a\u5e38\u4e3a `localhost:4318`\uff09\u3002\\n- \u82e5\u4e3a\u8fdc\u7a0b Jaeger\uff0c\u8bf7\u786e\u4fdd\u7f51\u7edc\u8fde\u901a\u3002\\n\\n#### 3. \u5982\u4f55\u81ea\u5b9a\u4e49 Trace \u7684\u670d\u52a1\u540d\uff1f\\n- \u63a8\u8350\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6 `otel.service.name` \u8bbe\u7f6e\u670d\u52a1\u540d\uff0c\u6216\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf `GONE_OTEL_SERVICE_NAME`\u3002\\n- \u82e5\u4e24\u8005\u90fd\u672a\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u670d\u52a1\u540d\u53ef\u80fd\u4e3a `unknown-service`\u3002\\n\\n#### 4. \u63a7\u5236\u53f0\u548c Jaeger \u90fd\u6ca1\u6709\u6570\u636e\uff0c\u5982\u4f55\u6392\u67e5\uff1f\\n- \u68c0\u67e5\u4f9d\u8d56\u662f\u5426\u62c9\u53d6\u5b8c\u6574\uff08`go mod tidy`\uff09\u3002\\n- \u67e5\u770b\u662f\u5426\u6709 panic \u6216\u521d\u59cb\u5316\u9519\u8bef\u65e5\u5fd7\u3002\\n- \u53ef\u5c1d\u8bd5\u5c06\u65e5\u5fd7\u7ea7\u522b\u8c03\u9ad8\uff0c\u89c2\u5bdf\u8be6\u7ec6\u8f93\u51fa\u3002\\n\\n#### 5. \u5982\u4f55\u540c\u65f6\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u548c Jaeger\uff1f\\n- \u5f53\u524d goner/otel/tracer \u652f\u6301\u5355\u4e00\u5bfc\u51fa\u76ee\u6807\uff0c\u5efa\u8bae\u4f18\u5148\u9009\u62e9 Jaeger \u8fdb\u884c\u94fe\u8def\u5206\u6790\u3002\\n- \u5982\u9700\u591a\u76ee\u6807\u5bfc\u51fa\uff0c\u53ef\u53c2\u8003 OpenTelemetry \u5b98\u65b9\u6587\u6863\u81ea\u5b9a\u4e49 exporter \u548c [goner/otel/tracer \u6587\u6863](https://github.com/gone-io/goner/blob/main/otel/tracer/README_CN.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%BC%E5%87%BA%E5%99%A8)\u3002\\n\\n#### 6. Jaeger \u91c7\u96c6\u5230\u7684\u6570\u636e\u4e0d\u5168\u6216\u4e22\u5931\uff1f\\n- \u68c0\u67e5\u91c7\u6837\u914d\u7f6e\uff0c\u9ed8\u8ba4\u901a\u5e38\u4e3a\u5168\u91c7\u6837\u3002\\n- \u786e\u8ba4 Jaeger \u5bb9\u5668\u8d44\u6e90\u5145\u8db3\uff0c\u907f\u514d\u56e0\u5185\u5b58\u4e0d\u8db3\u4e22\u5931\u6570\u636e\u3002\\n\\n#### 7. \u5982\u4f55\u5728\u4e1a\u52a1\u4ee3\u7801\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u6216\u5c5e\u6027\uff1f\\n- \u4f7f\u7528 `span.AddEvent(\\"\u4e8b\u4ef6\u540d\\")` \u6dfb\u52a0\u4e8b\u4ef6\u3002\\n- \u4f7f\u7528 `span.SetAttributes()` \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5c5e\u6027\u3002\\n\\n#### 8. goner/otel \u652f\u6301\u54ea\u4e9b\u540e\u7aef\uff1f\\n- \u652f\u6301\u63a7\u5236\u53f0\u3001Jaeger\u3001Zipkin\u3001Prometheus \u7b49\u4e3b\u6d41\u53ef\u89c2\u6d4b\u6027\u540e\u7aef\u3002\\n- \u5177\u4f53\u652f\u6301\u60c5\u51b5\u8bf7\u53c2\u8003 [goner/otel \u5b98\u65b9\u6587\u6863](https://github.com/gone-io/goner/tree/main/otel)\u3002\\n\\n\\n### \u53c2\u8003\u8d44\u6599\u4e0e\u6269\u5c55\u9605\u8bfb\\n- [OpenTelemetry \u5b98\u65b9\u6587\u6863](https://opentelemetry.io/docs/)\\n- [Gone \u6846\u67b6 GitHub](https://github.com/gone-io/gone)\\n- [goner \u7ec4\u4ef6\u5e93](https://github.com/gone-io/goner)\\n- [gonectl \u811a\u624b\u67b6](https://github.com/gone-io/gonectl)\\n- [Jaeger \u53ef\u89c2\u6d4b\u6027\u5e73\u53f0](https://www.jaegertracing.io/)\\n\\n---\\n\\n\u901a\u8fc7\u4e0a\u8ff0\u5b9e\u8df5\uff0c\u4f60\u53ef\u4ee5\u5728 Gone \u6846\u67b6\u4e0b\u5feb\u901f\u96c6\u6210 OpenTelemetry\uff0c\u63d0\u5347\u5fae\u670d\u52a1\u7684\u53ef\u89c2\u6d4b\u6027\u548c\u8bca\u65ad\u80fd\u529b\u3002\u5982\u6709\u7591\u95ee\uff0c\u6b22\u8fce\u5728 GitHub \u63d0 Issue \u4ea4\u6d41\u3002"},{"id":"opentelemetry-introduction-guide","metadata":{"permalink":"/blog/opentelemetry-introduction-guide","editUrl":"https://github.com/gone-io/v2-site/tree/main/blog/blog/2025-05-08-otel-intranduce.md","source":"@site/blog/2025-05-08-otel-intranduce.md","title":"OpenTelemetry\u4ecb\u7ecd","description":"\u6df1\u5165\u89e3\u6790OpenTelemetry\u7684\u6838\u5fc3\u6982\u5ff5\u3001\u67b6\u6784\u8bbe\u8ba1\u548c\u6700\u4f73\u5b9e\u8df5\u3002\u672c\u6587\u5168\u9762\u4ecb\u7ecd\u8fd9\u4e2a\u4e91\u539f\u751f\u9886\u57df\u7684\u53ef\u89c2\u6d4b\u6027\u6807\u51c6\uff0c\u5305\u62ec\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\u7684\u7edf\u4e00\u7ba1\u7406\uff0c\u4ee5\u53ca\u4e0eJaeger\u3001Prometheus\u7b49\u5de5\u5177\u7684\u96c6\u6210\u5e94\u7528\u3002","date":"2025-05-08T08:00:00.000Z","tags":[{"inline":true,"label":"OpenTelemetry","permalink":"/blog/tags/open-telemetry"},{"inline":true,"label":"\u4e91\u539f\u751f","permalink":"/blog/tags/\u4e91\u539f\u751f"},{"inline":true,"label":"\u53ef\u89c2\u6d4b\u6027","permalink":"/blog/tags/\u53ef\u89c2\u6d4b\u6027"},{"inline":true,"label":"\u6280\u672f\u67b6\u6784","permalink":"/blog/tags/\u6280\u672f\u67b6\u6784"}],"readingTime":29.87,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"opentelemetry-introduction-guide","description":"\u6df1\u5165\u89e3\u6790OpenTelemetry\u7684\u6838\u5fc3\u6982\u5ff5\u3001\u67b6\u6784\u8bbe\u8ba1\u548c\u6700\u4f73\u5b9e\u8df5\u3002\u672c\u6587\u5168\u9762\u4ecb\u7ecd\u8fd9\u4e2a\u4e91\u539f\u751f\u9886\u57df\u7684\u53ef\u89c2\u6d4b\u6027\u6807\u51c6\uff0c\u5305\u62ec\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\u7684\u7edf\u4e00\u7ba1\u7406\uff0c\u4ee5\u53ca\u4e0eJaeger\u3001Prometheus\u7b49\u5de5\u5177\u7684\u96c6\u6210\u5e94\u7528\u3002","keywords":["OpenTelemetry","\u53ef\u89c2\u6d4b\u6027","\u4e91\u539f\u751f","\u5206\u5e03\u5f0f\u8ffd\u8e2a","\u6027\u80fd\u76d1\u63a7","\u65e5\u5fd7\u7ba1\u7406","CNCF","Jaeger","Prometheus","\u5fae\u670d\u52a1\u76d1\u63a7"],"tags":["OpenTelemetry","\u4e91\u539f\u751f","\u53ef\u89c2\u6d4b\u6027","\u6280\u672f\u67b6\u6784"],"date":"2025-05-08T08:00"},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528goner/otel\u63a5\u5165OpenTelemetry","permalink":"/blog/goner-otel-integration-guide"},"nextItem":{"title":"\u5982\u4f55\u5728Gone\u6846\u67b6\u4e2d\u4f7f\u7528\u914d\u7f6e","permalink":"/blog/gone-config-system"}},"content":"## 1. \u6982\u8ff0\\n### \u4ec0\u4e48\u662fOpenTelemetry\\nOpenTelemetry\u662f\u4e00\u4e2a\u89c2\u6d4b\u6027\u6846\u67b6\u548c\u5de5\u5177\u5305\uff0c\u65e8\u5728\u521b\u5efa\u548c\u7ba1\u7406\u9065\u6d4b\u6570\u636e\uff0c\u5982\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\u3002OpenTelemetry\u662f\u5382\u5546\u548c\u5de5\u5177\u65e0\u5173\u7684\uff0c\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u4e0e\u5404\u79cd\u89c2\u6d4b\u6027\u540e\u7aef\u4e00\u8d77\u4f7f\u7528\uff0c\u5305\u62ec\u50cfJaeger\u548cPrometheus\u8fd9\u6837\u7684\u5f00\u6e90\u5de5\u5177\uff0c\u4ee5\u53ca\u5546\u4e1a\u89e3\u51b3\u65b9\u6848\u3002OpenTelemetry\u662f\u4e00\u4e2aCloud Native Computing Foundation\uff08CNCF\uff09\u9879\u76ee\u3002\\n\\n> \u4e0a\u9762\u662fOpenTelemetry\u7684\u5b98\u65b9\u4ecb\u7ecd\uff0c\u8bf4\u4eba\u8bdd\u5c31\u662f\uff1a\\n> OpenTelemetry\u5c31\u50cf\u662f\u4f60\u5e94\u7528\u7684\\"\u4f53\u68c0\u4e2d\u5fc3\\"\uff0c\u5b83\u80fd\u81ea\u52a8\u6536\u96c6\u5e94\u7528\u7684\u5404\u9879\u6307\u6807(\u5fc3\u8df3\u3001\u8840\u538b)\u3001\u8ffd\u8e2a\u8bf7\u6c42\u94fe\u8def(\u770b\u75c5\u6d41\u7a0b)\u3001\u8bb0\u5f55\u65e5\u5fd7(\u75c5\u5386)\uff0c\u5e76\u628a\u6570\u636e\u7edf\u4e00\u683c\u5f0f\u53d1\u7ed9\u5404\u79cd\u76d1\u63a7\u7cfb\u7edf(Prometheus\u3001Jaeger\u7b49)\u3002\u4e0a\u9762\u8fd9\u4e9b\u5728OpenTelemetry\u9879\u76ee\u4e4b\u524d\u90fd\u662f\u7531\u5404\u4e2a\u5382\u5546\u81ea\u5df1\u5f00\u53d1\u7684\uff0c\u73b0\u5728OpenTelemetry\u628a\u8fd9\u4e9b\u529f\u80fd\u90fd\u96c6\u6210\u5230\u4e00\u8d77\uff0c\u65b9\u4fbf\u5f00\u53d1\u8005\u4f7f\u7528\u3002\u4f5c\u4e3a\u4e00\u4e2a\u884c\u4e1a\u6807\u51c6\uff0cOpenTelemetry \u5f97\u5230\u4e86[40\u591a\u4e2a\u53ef\u89c2\u6d4b\u6027\u4f9b\u5e94\u5546](https://opentelemetry.io/ecosystem/vendors/)\u7684\u652f\u6301\uff0c\u88ab\u8bb8\u591a [\u5e93\u3001\u670d\u52a1\u548c\u5e94\u7528\u7a0b\u5e8f](https://opentelemetry.io/ecosystem/integrations)\u96c6\u6210\uff0c\u5e76\u88ab[\u4f17\u591a\u7ec8\u7aef\u7528\u6237](https://opentelemetry.io/ecosystem/adopters)\u91c7\u7528\u3002\\n> ![](/img/20250508-otel-intranduce-00.png)\\n\\n\\n### \u53d1\u5c55\u5386\u53f2\u4e0e\u80cc\u666f\\n![](/img/20250508-otel-intranduce-01.png)\\n\\n- Google 2010\u5e74\u53d1\u5e03\u7684 Dapper \u8bba\u6587\u662f\u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u7684\u5f00\u7aef\\n- 2012\u5e74 Twitter \u5f00\u6e90\u4e86 Zipkin\\n- 2015\u5e74 Uber \u53d1\u5e03\u4e86 Jaeger \u7684\u5f00\u6e90\u7248\u672c\u3002\u76ee\u524d Zipkin \u548c Jaeger \u4ecd\u7136\u662f\u6700\u6d41\u884c\u7684\u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\u5de5\u5177\u4e4b\u4e00\\n- 2015\u5e74 OpenTracing \u9879\u76ee\u88ab CNCF \u63a5\u53d7\u4e3a\u5b83\u7684\u7b2c\u4e09\u4e2a\u6258\u7ba1\u9879\u76ee\uff0c\u81f4\u529b\u4e8e\u6807\u51c6\u5316\u8de8\u7ec4\u4ef6\u7684\u5206\u5e03\u5f0f\u94fe\u8def\u8ffd\u8e2a\\n- 2017\u5e74 Google \u5c06\u5185\u90e8\u7684 Census \u9879\u76ee\u5f00\u6e90\uff0c\u968f\u540e OpenCensus \u5728\u793e\u533a\u4e2d\u6d41\u884c\u8d77\u6765\\n- 2019\u5e74\u521d\uff0c\u4e24\u4e2a\u73b0\u6709\u5f00\u6e90\u9879\u76ee\uff1aOpenTracing \u548c OpenCensus \u88ab\u5ba3\u5e03\u5408\u5e76\u4e3a OpenTelemetry \u9879\u76ee\\n- 2021\u5e74\uff0cOpenTelemetry \u53d1\u5e03\u4e86V1.0.0\uff0c\u4e3a\u5ba2\u6237\u7aef\u7684\u94fe\u8def\u8ffd\u8e2a\u90e8\u5206\u63d0\u4f9b\u4e86\u7a33\u5b9a\u6027\u4fdd\u8bc1\\n- 2023\u5e74\u662f OpenTelemetry \u7684\u91cc\u7a0b\u7891\uff0c\u5176\u4e09\u4e2a\u57fa\u672c\u4fe1\u53f7\u2014\u2014\u94fe\u8def\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\uff0c\u90fd\u8fbe\u5230\u4e86\u7a33\u5b9a\u7248\u672c\\n\\n### \u4e3b\u8981\u7279\u70b9\u4e0e\u4f18\u52bf\\n\\n- **\u7edf\u4e00\u6807\u51c6**\\n   - \u63d0\u4f9b\u7edf\u4e00\u7684API\u548cSDK\u89c4\u8303\uff0c\u6574\u5408\u4e86\u8ffd\u8e2a(Tracing)\u3001\u6307\u6807(Metrics)\u548c\u65e5\u5fd7(Logs)\u4e09\u5927\u89c2\u6d4b\u4fe1\u53f7\\n   - \u53d6\u4ee3\u4e86\u4e4b\u524d\u7684OpenTracing\u548cOpenCensus\u4e24\u4e2a\u6807\u51c6\uff0c\u89e3\u51b3\u4e86\u793e\u533a\u5206\u88c2\u95ee\u9898\\n   - \u6570\u636e\u683c\u5f0f\u6807\u51c6\u5316\uff0c\u517c\u5bb9\u4e3b\u6d41\u89c2\u6d4b\u540e\u7aef(Prometheus, Jaeger, Zipkin\u7b49)\\n\\n- **\u591a\u8bed\u8a00\u652f\u6301**\\n   - \u652f\u630110+\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00(Go, Java, Python, JS\u7b49)\\n   - \u6bcf\u79cd\u8bed\u8a00\u5b9e\u73b0\u90fd\u9075\u5faa\u76f8\u540c\u7684API\u89c4\u8303\uff0c\u4fdd\u8bc1\u8de8\u8bed\u8a00\u4e00\u81f4\u6027\\n   - \u81ea\u52a8\u63d2\u6869(Auto-instrumentation)\u51cf\u5c11\u624b\u52a8\u7f16\u7801\u5de5\u4f5c\u91cf\\n\\n- **\u53ef\u6269\u5c55\u67b6\u6784**\\n   - \u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u91c7\u6837\u5668\u3001\u5904\u7406\u5668\u548c\u5bfc\u51fa\u5668\\n   - \u901a\u8fc7OpenTelemetry Collector\u5b9e\u73b0\u7075\u6d3b\u7684\u6570\u636e\u5904\u7406\u548c\u8def\u7531\\n   - \u53ef\u8f7b\u677e\u96c6\u6210\u73b0\u6709\u76d1\u63a7\u7cfb\u7edf\u548c\u81ea\u5b9a\u4e49\u89c2\u6d4b\u540e\u7aef\\n\\n- **\u751f\u4ea7\u5c31\u7eea**\\n   - CNCF\u6bd5\u4e1a\u9879\u76ee\uff0c\u62e5\u6709\u6d3b\u8dc3\u7684\u793e\u533a\u548c\u5e7f\u6cdb\u7684\u4f01\u4e1a\u91c7\u7528\\n   - \u4e3b\u8981\u7ec4\u4ef6\u5df2\u8fbe\u5230\u7a33\u5b9a\u7248\u672c(GA)\uff0c\u9002\u5408\u751f\u4ea7\u73af\u5883\u4f7f\u7528\\n   - \u4e30\u5bcc\u7684\u6587\u6863\u548c\u793a\u4f8b\uff0c\u964d\u4f4e\u5b66\u4e60\u548c\u4f7f\u7528\u95e8\u69db\\n\\n- **\u5b9e\u9645\u4ef7\u503c**\\n   - \u7edf\u4e00\u6280\u672f\u6808\uff0c\u51cf\u5c11\u591a\u5957\u89c2\u6d4b\u7cfb\u7edf\u7684\u7ef4\u62a4\u6210\u672c\\n   - \u63d0\u5347\u95ee\u9898\u6392\u67e5\u6548\u7387\uff0c\u901a\u8fc7\u5206\u5e03\u5f0f\u8ffd\u8e2a\u5feb\u901f\u5b9a\u4f4d\u6027\u80fd\u74f6\u9888\\n   - \u6807\u51c6\u5316\u6307\u6807\u91c7\u96c6\uff0c\u5b9e\u73b0\u8de8\u670d\u52a1\u7684\u7edf\u4e00\u76d1\u63a7\u89c6\u56fe\\n\x3c!-- truncate --\x3e\\n## 2. \u6838\u5fc3\u6982\u5ff5\\n### \u8ffd\u8e2a(Tracing)\\n\u8ffd\u8e2a(Tracing)\u8bb0\u5f55\u8bf7\u6c42\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u6d41\u8f6c\u8def\u5f84\uff0c\u53ef\u89c6\u5316\u670d\u52a1\u95f4\u7684\u8c03\u7528\u5173\u7cfb\u3002\u6bcf\u4e2a\u8ffd\u8e2a\u7531\u591a\u4e2a\u8de8\u5ea6(Span)\u7ec4\u6210\uff0c\u6bcf\u4e2aSpan\u4ee3\u8868\u4e00\u4e2a\u5de5\u4f5c\u5355\u5143\uff0c\u5305\u542b\u64cd\u4f5c\u540d\u79f0\u3001\u65f6\u95f4\u6233\u3001\u6301\u7eed\u65f6\u95f4\u548c\u6807\u7b7e\u7b49\u4fe1\u606f\u3002\\n\\n**\u5de5\u4f5c\u539f\u7406**:\\n1. \u901a\u8fc7\u81ea\u52a8\u6216\u624b\u52a8\u63d2\u6869\u5728\u4ee3\u7801\u5173\u952e\u70b9\u521b\u5efaSpan\\n2. \u4e0a\u4e0b\u6587\u4f20\u64ad\u673a\u5236\u5c06TraceID\u548cSpanID\u5728\u670d\u52a1\u95f4\u4f20\u9012\\n3. \u91c7\u6837\u7b56\u7565\u51b3\u5b9a\u54ea\u4e9b\u8ffd\u8e2a\u9700\u8981\u8bb0\u5f55\\n4. \u6570\u636e\u5bfc\u51fa\u5230\u540e\u7aef\u7cfb\u7edf\u8fdb\u884c\u5206\u6790\u5c55\u793a\\n\\n**\u5e94\u7528\u573a\u666f**:\\n- \u6027\u80fd\u74f6\u9888\u5206\u6790\\n- \u5206\u5e03\u5f0f\u4e8b\u52a1\u8ffd\u8e2a\\n- \u9519\u8bef\u4f20\u64ad\u8def\u5f84\u5b9a\u4f4d\\n\\n### \u6307\u6807(Metrics)\\n\u6307\u6807(Metrics)\u662f\u5bf9\u7cfb\u7edf\u8fd0\u884c\u72b6\u6001\u7684\u6570\u503c\u5ea6\u91cf\uff0c\u53cd\u6620\u7cfb\u7edf\u7684\u5065\u5eb7\u5ea6\u548c\u6027\u80fd\u8868\u73b0\u3002OpenTelemetry\u652f\u6301\u4e09\u79cd\u6307\u6807\u7c7b\u578b\uff1a\\n1. **\u8ba1\u6570\u5668(Counter)**: \u5355\u8c03\u9012\u589e\u7684\u503c\uff0c\u5982\u8bf7\u6c42\u6570\\n2. **\u6d4b\u91cf\u503c(Gauge)**: \u77ac\u65f6\u503c\uff0c\u5982CPU\u4f7f\u7528\u7387\\n3. **\u76f4\u65b9\u56fe(Histogram)**: \u503c\u7684\u5206\u5e03\u7edf\u8ba1\uff0c\u5982\u54cd\u5e94\u65f6\u95f4\\n\\n**\u5de5\u4f5c\u539f\u7406**:\\n- \u901a\u8fc7Meter\u521b\u5efa\u6307\u6807\u5e76\u8bb0\u5f55\u6d4b\u91cf\u503c\\n- \u652f\u6301\u9884\u805a\u5408\u51cf\u5c11\u6570\u636e\u4f20\u8f93\u91cf\\n- \u53ef\u914d\u7f6e\u7684\u5bfc\u51fa\u9891\u7387\u548c\u805a\u5408\u65b9\u5f0f\\n\\n**\u5e94\u7528\u573a\u666f**:\\n- \u7cfb\u7edf\u8d44\u6e90\u76d1\u63a7\\n- \u4e1a\u52a1\u6307\u6807\u7edf\u8ba1\\n- \u5bb9\u91cf\u89c4\u5212\\n\\n### \u65e5\u5fd7(Logs)\\n\u65e5\u5fd7(Logs)\u8bb0\u5f55\u7cfb\u7edf\u8fd0\u884c\u65f6\u7684\u79bb\u6563\u4e8b\u4ef6\uff0c\u63d0\u4f9b\u8be6\u7ec6\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002OpenTelemetry\u7edf\u4e00\u4e86\u65e5\u5fd7\u683c\u5f0f\uff0c\u652f\u6301\u7ed3\u6784\u5316\u65e5\u5fd7\u8bb0\u5f55\u3002\\n\\n**\u5de5\u4f5c\u539f\u7406**:\\n1. \u65e5\u5fd7\u6536\u96c6\u5668\u63a5\u6536\u5e94\u7528\u65e5\u5fd7\\n2. \u65e5\u5fd7\u5904\u7406\u5668\u8fdb\u884c\u89e3\u6790\u3001\u8fc7\u6ee4\u548c\u589e\u5f3a\\n3. \u65e5\u5fd7\u5bfc\u51fa\u5668\u5c06\u6570\u636e\u53d1\u9001\u5230\u540e\u7aef\\n4. \u53ef\u4e0e\u8ffd\u8e2a\u548c\u6307\u6807\u5173\u8054\u5206\u6790\\n\\n**\u5e94\u7528\u573a\u666f**:\\n- \u9519\u8bef\u6392\u67e5\\n- \u5ba1\u8ba1\u8ddf\u8e2a\\n- \u884c\u4e3a\u5206\u6790\\n\\n### \u884c\u674e(Baggage)\\n\u884c\u674e(Baggage)\u662f\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u4f20\u9012\u7684\u952e\u503c\u5bf9\u6570\u636e\uff0c\u7528\u4e8e\u8de8\u670d\u52a1\u4f20\u9012\u4e1a\u52a1\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\\n\\n**\u5de5\u4f5c\u539f\u7406**:\\n1. \u5728\u8bf7\u6c42\u5165\u53e3\u8bbe\u7f6e\u884c\u674e\u9879\\n2. \u884c\u674e\u968f\u8bf7\u6c42\u4e0a\u4e0b\u6587\u81ea\u52a8\u4f20\u64ad\\n3. \u5404\u670d\u52a1\u53ef\u8bfb\u53d6\u884c\u674e\u5185\u5bb9\\n4. \u4e0d\u5f71\u54cd\u6838\u5fc3\u89c2\u6d4b\u6570\u636e\u6d41\\n\\n**\u5e94\u7528\u573a\u666f**:\\n- \u4f20\u9012\u7528\u6237ID\u3001\u8bf7\u6c42\u6765\u6e90\u7b49\u4e1a\u52a1\u4fe1\u606f\\n- A/B\u6d4b\u8bd5\u5206\u7ec4\u6807\u8bb0\\n- \u8de8\u670d\u52a1\u8c03\u8bd5\u4fe1\u606f\u4f20\u9012\\n\\n> \u5173\u4e8eTracing\u3001Metrics\u548cLogging\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\\n> ![](/img/20250508-otel-intranduce-02.png)\\n> \u4e09\u8005\u76f8\u4e92\u5173\u8054\uff0c\u5171\u540c\u63d0\u4f9b\u5b8c\u6574\u7684\u7cfb\u7edf\u89c2\u6d4b\u80fd\u529b\u3002\u8ffd\u8e2a\u63d0\u4f9b\u8c03\u7528\u94fe\u89c6\u89d2\uff0c\u6307\u6807\u63d0\u4f9b\u7cfb\u7edf\u72b6\u6001\u6982\u89c8\uff0c\u65e5\u5fd7\u63d0\u4f9b\u8be6\u7ec6\u4e0a\u4e0b\u6587\u3002\u901a\u8fc7\u7edf\u4e00\u7684\u6807\u8bc6\u7b26\uff08\u5982TraceID\uff09\uff0c\u53ef\u4ee5\u5728\u4e09\u79cd\u6570\u636e\u95f4\u65e0\u7f1d\u5bfc\u822a\u3002\\n\\n## 3. \u4e3b\u8981\u7ec4\u4ef6\\n### API\u5c42\\n\u60f3\u8c61API\u5c42\u5c31\u50cf\u4f60\u5bb6\u7535\u5668\u7684\u6309\u94ae\u548c\u5f00\u5173\u2014\u2014\u4f60\u53ea\u9700\u8981\u77e5\u9053\u6309\u54ea\u91cc\uff0c\u4e0d\u9700\u8981\u4e86\u89e3\u91cc\u9762\u7684\u7535\u8def\u662f\u600e\u4e48\u5de5\u4f5c\u7684\u3002OpenTelemetry\u7684API\u5c42\u5c31\u662f\u8fd9\u6837\uff0c\u5b83\u5b9a\u4e49\u4e86\u7b80\u5355\u6e05\u6670\u7684\u63a5\u53e3\uff0c\u8ba9\u4f60\u7684\u5e94\u7528\u53ef\u4ee5\u8f7b\u677e\\"\u6309\u6309\u94ae\\"\u8bb0\u5f55\u89c2\u6d4b\u6570\u636e\u3002\\n\\n**\u4e3a\u4ec0\u4e48API\u5c42\u5f88\u5999**\uff1a\\n- \u5c31\u50cf\u901a\u7528\u9065\u63a7\u5668\u4e00\u6837\uff0c\u4e00\u5957API\u63a7\u5236\u6240\u6709\u89c2\u6d4b\u7c7b\u578b\\n- \\"\u5199\u4e00\u6b21\uff0c\u5230\u5904\u8fd0\u884c\\"\u2014\u2014\u4e0d\u7ed1\u5b9a\u7279\u5b9a\u540e\u7aef\u5b9e\u73b0\\n- \u8f7b\u5982\u7fbd\u6bdb\uff0c\u5bf9\u5e94\u7528\u6027\u80fd\u5f71\u54cd\u5fae\u4e4e\u5176\u5fae\\n- \u7a33\u5982\u6cf0\u5c71\uff0cAPI\u5347\u7ea7\u4e0d\u4f1a\u7834\u574f\u4f60\u7684\u4ee3\u7801\\n\\n**\u770b\u770b\u8fd9\u6bb5\u7b80\u5355\u7684\u4ee3\u7801**\uff1a\\n```java\\n// \u8ffd\u8e2aAPI\u793a\u4f8b - \u8bb0\u5f55\u4e00\u4e2a\u64cd\u4f5c\u7684\u5f00\u59cb\u548c\u7ed3\u675f\\nTracer tracer = GlobalOpenTelemetry.getTracer(\\"\u8d2d\u7269\u8f66\u670d\u52a1\\");\\nSpan span = tracer.spanBuilder(\\"\u7ed3\u7b97\u64cd\u4f5c\\").startSpan();\\ntry (Scope scope = span.makeCurrent()) {\\n    // \u8fd9\u91cc\u662f\u4f60\u7684\u4e1a\u52a1\u64cd\u4f5c\uff0c\u6bd4\u5982\u5904\u7406\u8ba2\u5355\\n    span.setAttribute(\\"\u8ba2\u5355\u91d1\u989d\\", 199.99);  // \u6dfb\u52a0\u6709\u7528\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\\n} finally {\\n    span.end();  // \u522b\u5fd8\u4e86\\"\u6253\u5361\u4e0b\u73ed\\"\uff01\\n}\\n\\n// \u6307\u6807API\u793a\u4f8b - \u8bb0\u5f55\u4e1a\u52a1\u6307\u6807\u6bd4\u7eb8\u7b14\u8fd8\u65b9\u4fbf\\nMeter meter = GlobalOpenTelemetry.getMeter(\\"\u652f\u4ed8\u670d\u52a1\\");\\nLongCounter counter = meter.counterBuilder(\\"\u5df2\u5904\u7406\u8ba2\u5355\\").build();\\ncounter.add(1);  // \u53c8\u641e\u5b9a\u4e00\u5355\uff01\\n```\\n\\n### SDK\u5c42\\nSDK\u5c42\u662fOpenTelemetry\u7684\u5f15\u64ce\u8231\uff0c\u5b83\u5b9e\u73b0\u4e86API\u5c42\u5b9a\u4e49\u7684\u63a5\u53e3\uff0c\u5e76\u63d0\u4f9b\u4e86\u5b9e\u9645\u7684\u6570\u636e\u5904\u7406\u673a\u5236\u3002\u5c31\u50cf\u9ad8\u7ea7\u76f8\u673a\u7684\u5185\u90e8\u5904\u7406\u82af\u7247\uff0cSDK\u5c42\u8d1f\u8d23\u5c06\u539f\u59cb\u89c2\u6d4b\u6570\u636e\u8f6c\u6362\u4e3a\u6709\u610f\u4e49\u7684\u4fe1\u606f\uff0c\u5e76\u786e\u4fdd\u5b83\u80fd\u88ab\u6b63\u786e\u4f20\u8f93\u5230\u76ee\u6807\u7cfb\u7edf\u3002\\n\\n**SDK\u5c42\u7684\u5173\u952e\u529f\u80fd**\uff1a\\n- \u5c06API\u7684\u62bd\u8c61\u6982\u5ff5\u8f6c\u5316\u4e3a\u5177\u4f53\u5b9e\u73b0\\n- \u63d0\u4f9b\u7075\u6d3b\u7684\u91c7\u6837\u7b56\u7565\uff0c\u5e2e\u4f60\u5728\u6570\u636e\u91cf\u4e0e\u8be6\u7ec6\u5ea6\u95f4\u53d6\u5f97\u5e73\u8861\\n- \u6784\u5efa\u9ad8\u6548\u7684\u5904\u7406\u7ba1\u9053\uff0c\u786e\u4fdd\u89c2\u6d4b\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u6027\u80fd\\n- \u7ba1\u7406\u8d44\u6e90\u5c5e\u6027\uff0c\u4e3a\u9065\u6d4b\u6570\u636e\u6dfb\u52a0\u73af\u5883\u4e0a\u4e0b\u6587\\n- \u4e0e\u5404\u79cd\u540e\u7aef\u7cfb\u7edf\u5efa\u7acb\u8fde\u63a5\u6865\u6881\\n\\n**\u914d\u7f6e\u793a\u4f8b**\uff1a\\n```java\\n// SDK\u914d\u7f6e - \u544a\u8bc9OpenTelemetry\u5982\u4f55\u5904\u7406\u548c\u53d1\u9001\u6570\u636e\\nSdkTracerProvider tracerProvider = SdkTracerProvider.builder()\\n    // \u6279\u91cf\u5904\u7406\u8ffd\u8e2a\u6570\u636e\uff0c\u964d\u4f4e\u7f51\u7edc\u5f00\u9500\\n    .addSpanProcessor(BatchSpanProcessor.builder(OtlpGrpcSpanExporter.builder().build()).build())\\n    // \u4e3a\u6240\u6709\u8ffd\u8e2a\u6dfb\u52a0\u670d\u52a1\u540d\u79f0\uff0c\u4fbf\u4e8e\u5728\u540e\u7aef\u8bc6\u522b\\n    .setResource(Resource.getDefault().merge(Resource.create(Attributes.of(\\n        ResourceAttributes.SERVICE_NAME, \\"\u8ba2\u5355\u7ba1\u7406\u670d\u52a1\\"))))\\n    .build();\\n\\n// \u521b\u5efa\u5b8c\u6574\u7684OpenTelemetry\u5b9e\u4f8b\\nOpenTelemetrySdk openTelemetry = OpenTelemetrySdk.builder()\\n    .setTracerProvider(tracerProvider)\\n    .build();\\n```\\n\\n### \u6570\u636e\u6536\u96c6\u5668(Collector)\\nCollector\u662fOpenTelemetry\u7684\u4e2d\u592e\u67a2\u7ebd\uff0c\u4e13\u95e8\u5904\u7406\u89c2\u6d4b\u6570\u636e\u7684\u6536\u96c6\u3001\u8f6c\u6362\u548c\u5206\u53d1\u5de5\u4f5c\u3002\u5b83\u5c31\u50cf\u4ea4\u901a\u6307\u6325\u4e2d\u5fc3\uff0c\u63a5\u6536\u6765\u81ea\u5404\u4e2a\u670d\u52a1\u7684\u6570\u636e\u4fe1\u53f7\uff0c\u8fdb\u884c\u5fc5\u8981\u7684\u5904\u7406\u540e\uff0c\u5c06\u5b83\u4eec\u9ad8\u6548\u5730\u9001\u8fbe\u76ee\u7684\u5730\u3002\\n\\n**Collector\u7684\u67b6\u6784\u5206\u5c42**\uff1a\\n1. **\u63a5\u6536\u5668(Receivers)**: \u5982\u540c\u591a\u529f\u80fd\u63a5\u53e3\u9002\u914d\u5668\uff0c\u4ece\u5404\u79cd\u6765\u6e90\u83b7\u53d6\u6570\u636e\\n2. **\u5904\u7406\u5668(Processors)**: \u72b9\u5982\u6570\u636e\u70bc\u91d1\u672f\u58eb\uff0c\u8fc7\u6ee4\u3001\u8f6c\u6362\u548c\u4e30\u5bcc\u539f\u59cb\u6570\u636e\\n3. **\u5bfc\u51fa\u5668(Exporters)**: \u76f8\u5f53\u4e8e\u4e13\u4e1a\u5feb\u9012\u5458\uff0c\u5c06\u6570\u636e\u51c6\u786e\u9001\u8fbe\u5404\u76d1\u63a7\u7cfb\u7edf\\n4. **\u6269\u5c55(Extensions)**: \u7c7b\u4f3c\u63d2\u4ef6\u7cfb\u7edf\uff0c\u63d0\u4f9b\u5065\u5eb7\u68c0\u67e5\u7b49\u8f85\u52a9\u529f\u80fd\\n\\n![](/img/20250508-otel-intranduce-03.png)\\n\\n**\u4e3a\u4ec0\u4e48Collector\u503c\u5f97\u62e5\u6709**\uff1a\\n- \u96c6\u4e2d\u5904\u7406\u9065\u6d4b\u6570\u636e\uff0c\u5e94\u7528\u670d\u52a1\u5668\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u4e1a\u52a1\u903b\u8f91\\n- \u7edf\u4e00\u6570\u636e\u7ba1\u9053\uff0c\u4e00\u5904\u914d\u7f6e\u5373\u53ef\u5206\u53d1\u5230\u591a\u4e2a\u540e\u7aef\u7cfb\u7edf\\n- \u5185\u7f6e\u9ad8\u6548\u7684\u7f13\u51b2\u548c\u91cd\u8bd5\u673a\u5236\uff0c\u786e\u4fdd\u6570\u636e\u4e0d\u4e22\u5931\\n- \u7075\u6d3b\u90e8\u7f72\uff0c\u53ef\u4f5c\u4e3a\u8f7b\u91cf\u7ea7\u8fb9\u8f66(Sidecar)\u6216\u5f3a\u5927\u7684\u4e2d\u592e\u7f51\u5173\\n\\n**\u914d\u7f6e\u793a\u4f8b**\uff1a\\n```yaml\\n# Collector\u914d\u7f6e - \u58f0\u660e\u5982\u4f55\u63a5\u6536\u3001\u5904\u7406\u548c\u53d1\u9001\u6570\u636e\\nreceivers:\\n  otlp:  # \u63a5\u6536OpenTelemetry\u683c\u5f0f\u7684\u6570\u636e\\n    protocols:\\n      grpc:  # \u901a\u8fc7gRPC\u534f\u8bae\\n        endpoint: 0.0.0.0:4317\\n      http:  # \u4e5f\u652f\u6301HTTP\u534f\u8bae\\n        endpoint: 0.0.0.0:4318\\n\\nprocessors:\\n  batch:  # \u6279\u5904\u7406\u4ee5\u51cf\u5c11\u7f51\u7edc\u5f00\u9500\\n    timeout: 1s\\n    send_batch_size: 1024\\n\\nexporters:\\n  prometheus:  # \u5c06\u6307\u6807\u5bfc\u51fa\u4e3aPrometheus\u683c\u5f0f\\n    endpoint: 0.0.0.0:8889\\n  jaeger:  # \u5c06\u8ffd\u8e2a\u6570\u636e\u53d1\u9001\u5230Jaeger\\n    endpoint: jaeger:14250\\n    tls:\\n      insecure: true\\n\\nservice:  # \u5b9a\u4e49\u6570\u636e\u5904\u7406\u7ba1\u9053\\n  pipelines:\\n    traces:  # \u8ffd\u8e2a\u6570\u636e\u7ba1\u9053\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [jaeger]\\n    metrics:  # \u6307\u6807\u6570\u636e\u7ba1\u9053\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [prometheus]\\n```\\n\\n### \u5bfc\u51fa\u5668(Exporters)\\n\u5bfc\u51fa\u5668\u662fOpenTelemetry\u7684\u5916\u4ea4\u5b98\uff0c\u5b83\u4eec\u8d1f\u8d23\u5c06\u6536\u96c6\u5230\u7684\u89c2\u6d4b\u6570\u636e\u7ffb\u8bd1\u6210\u5404\u79cd\u540e\u7aef\u7cfb\u7edf\u80fd\u7406\u89e3\u7684\u8bed\u8a00\u3002\u5c31\u50cf\u4f18\u79c0\u7684\u7ffb\u8bd1\u5b98\uff0c\u5bfc\u51fa\u5668\u786e\u4fdd\u4f60\u7684\u5b9d\u8d35\u6570\u636e\u80fd\u65e0\u969c\u788d\u5730\u6d41\u5165\u5404\u79cd\u76d1\u63a7\u5de5\u5177\uff0c\u65e0\u8bba\u5b83\u4eec\\"\u8bf4\\"\u4ec0\u4e48\\"\u65b9\u8a00\\"\u3002\\n\\n#### OTLP\uff08OpenTelemetry Protocol\uff09\\nOTLP\uff08OpenTelemetry Protocol\uff09\u662fOpenTelemetry\u5b98\u65b9\u63a8\u8350\u7684\u9065\u6d4b\u6570\u636e\u4f20\u8f93\u534f\u8bae\u3002\u5b83\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u3001\u901a\u7528\u4e14\u6613\u4e8e\u6269\u5c55\uff0c\u652f\u6301\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\u4e09\u5927\u89c2\u6d4b\u4fe1\u53f7\u7684\u7edf\u4e00\u4f20\u8f93\u3002OTLP\u901a\u5e38\u901a\u8fc7gRPC\u6216HTTP\u8fdb\u884c\u901a\u4fe1\uff0c\u662fOpenTelemetry Collector\u4e0e\u5404\u7c7b\u540e\u7aef\u7cfb\u7edf\u4e4b\u95f4\u7684\u6865\u6881\u3002\\n\\n**OTLP\u7684\u4f18\u52bf\uff1a**\\n- **\u7edf\u4e00\u6027**\uff1a\u540c\u65f6\u652f\u6301\u8ffd\u8e2a\u3001\u6307\u6807\u548c\u65e5\u5fd7\uff0c\u7b80\u5316\u6570\u636e\u7ba1\u9053\u914d\u7f6e\\n- **\u9ad8\u6548\u6027**\uff1a\u91c7\u7528\u4e8c\u8fdb\u5236\u534f\u8bae\uff08gRPC\uff09\uff0c\u4f20\u8f93\u6027\u80fd\u4f18\u8d8a\uff0c\u652f\u6301\u6279\u91cf\u53d1\u9001\u548c\u538b\u7f29\\n- **\u751f\u6001\u517c\u5bb9**\uff1a\u4f5c\u4e3aOpenTelemetry\u7684\u539f\u751f\u534f\u8bae\uff0c\u83b7\u5f97\u793e\u533a\u548c\u5404\u5927\u540e\u7aef\u7684\u5e7f\u6cdb\u652f\u6301\\n- **\u7075\u6d3b\u6027**\uff1a\u53ef\u901a\u8fc7Collector\u7075\u6d3b\u8def\u7531\u5230Prometheus\u3001Jaeger\u3001Elasticsearch\u7b49\u591a\u79cd\u540e\u7aef\\n\\n**\u4e0e\u5176\u4ed6\u5bfc\u51fa\u5668\u7684\u5173\u7cfb\uff1a**\\n- Prometheus\u5bfc\u51fa\u5668\u4e3b\u8981\u7528\u4e8e\u6307\u6807\u7684\u62c9\u53d6\u5f0f\u91c7\u96c6\uff0c\u9002\u5408Prometheus\u751f\u6001\\n- Jaeger\u5bfc\u51fa\u5668\u4e13\u6ce8\u4e8e\u5206\u5e03\u5f0f\u8ffd\u8e2a\u6570\u636e\u7684\u63a8\u9001\uff0c\u9002\u5408\u94fe\u8def\u8ffd\u8e2a\u5206\u6790\\n- OTLP\u5bfc\u51fa\u5668\u5219\u662f\u901a\u7528\u578b\u65b9\u6848\uff0c\u65e2\u53ef\u63a8\u9001\u5230Collector\uff0c\u4e5f\u53ef\u76f4\u63a5\u5bf9\u63a5\u652f\u6301OTLP\u7684\u540e\u7aef\uff0c\u5b9e\u73b0\u4e00\u5957\u534f\u8bae\u6253\u901a\u5168\u90e8\u89c2\u6d4b\u4fe1\u53f7\\n\\n**OTLP\u5bfc\u51fa\u5668\u914d\u7f6e\u793a\u4f8b\uff1a**\\n```yaml\\nexporters:\\n  otlp:\\n    endpoint: \\"collector:4317\\"  # gRPC\u7aef\u53e3\\n    tls:\\n      insecure: true\\n\\nservice:\\n  pipelines:\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n**\u5b9e\u73b0\u793a\u4f8b**\uff1a\\n```java\\n// \u5728Java\u4e2d\u914d\u7f6e\u591a\u4e2a\u5bfc\u51fa\u5668\uff0c\u4e00\u6b21\u6027\u53d1\u9001\u5230\u4e0d\u540c\u540e\u7aef\\nSdkMeterProvider meterProvider = SdkMeterProvider.builder()\\n    // \u53d1\u9001\u5230Prometheus\\n    .registerMetricReader(PeriodicMetricReader.builder(\\n        PrometheusHttpServer.builder().setPort(9464).build())\\n        .build())\\n    // \u540c\u65f6\u53d1\u9001\u5230OTLP endpoint\\n    .registerMetricReader(PeriodicMetricReader.builder(\\n        OtlpGrpcMetricExporter.builder()\\n            .setEndpoint(\\"http://collector:4317\\")\\n            .build())\\n        .build())\\n    .build();\\n```\\n\\n## 4. \u96c6\u6210\u65b9\u5f0f\\n### \u8bed\u8a00\u652f\u6301(SDK)\\nOpenTelemetry\u5c31\u50cf\u4e00\u4f4d\u591a\u8bed\u8a00\u4e13\u5bb6\uff0c\u80fd\u591f\u7528\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00\u6d41\u5229\\"\u4ea4\u8c08\\"\u3002\u5b83\u4e3a\u5404\u5927\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u539f\u751fSDK\u5b9e\u73b0\uff0c\u786e\u4fdd\u5f00\u53d1\u8005\u65e0\u8bba\u4f7f\u7528\u4ec0\u4e48\u6280\u672f\u6808\uff0c\u90fd\u80fd\u8f7b\u677e\u63a5\u5165\u89c2\u6d4b\u4f53\u7cfb\u3002\\n\\n**\u8bed\u8a00SDK\u5168\u5bb6\u798f**\uff1a\\n- **Java**: \u6210\u719f\u7a33\u5b9a\uff0c\u62e5\u6709\u81ea\u52a8\u63d2\u6869\u80fd\u529b\uff0c\u7279\u522b\u9002\u5408\u4f01\u4e1a\u7ea7\u5e94\u7528\\n- **Go**: \u8f7b\u91cf\u9ad8\u6548\uff0c\u4e0e\u4e91\u539f\u751f\u751f\u6001\u5b8c\u7f8e\u5951\u5408\uff0c\u9002\u5408\u5fae\u670d\u52a1\u67b6\u6784\\n- **Python**: \u7b80\u6d01\u6613\u7528\uff0c\u4e0e\u6570\u636e\u79d1\u5b66\u5de5\u5177\u65e0\u7f1d\u96c6\u6210\\n- **JavaScript/Node.js**: \u4e00\u5957SDK\u6a2a\u8de8\u524d\u540e\u7aef\uff0c\u63d0\u4f9b\u6d4f\u89c8\u5668\u5230\u670d\u52a1\u5668\u7684\u5168\u94fe\u8def\u89c2\u6d4b\\n- **\u5176\u4ed6\u8bed\u8a00**: .NET\u3001Ruby\u3001Rust\u3001C++\u3001PHP\u7b49\u5404\u663e\u795e\u901a\uff0c\u5e94\u6709\u5c3d\u6709\\n\\n\u6bcf\u79cd\u8bed\u8a00SDK\u90fd\u9075\u5faa\u7edf\u4e00\u7684\u89c4\u8303\uff0c\u4f46\u540c\u65f6\u4e5f\u5145\u5206\u5c0a\u91cd\u5404\u8bed\u8a00\u7684\u7279\u8272\u548c\u6700\u4f73\u5b9e\u8df5\u3002\u8fd9\u5c31\u50cf\u662f\u540c\u4e00\u9996\u6b4c\u7684\u4e0d\u540c\u7f16\u66f2\u7248\u672c\u2014\u2014\u6838\u5fc3\u65cb\u5f8b\u4e00\u81f4\uff0c\u4f46\u98ce\u683c\u9002\u5e94\u4e0d\u540c\u573a\u5408\u3002\\n\\n**\u8de8\u8bed\u8a00\u8ddf\u8e2a\u793a\u4f8b**\uff1a\\n\u5728Java\u670d\u52a1\u4e2d\uff1a\\n```java\\nTracer tracer = GlobalOpenTelemetry.getTracer(\\"order-service\\");\\nSpan orderSpan = tracer.spanBuilder(\\"process-order\\").startSpan();\\ntry (Scope scope = orderSpan.makeCurrent()) {\\n    // \u5904\u7406\u8ba2\u5355\u5e76\u8c03\u7528\u5e93\u5b58\u670d\u52a1\\n    orderSpan.setAttribute(\\"order.id\\", orderId);\\n    callInventoryService(orderId);  // \u8c03\u7528Go\u8bed\u8a00\u5b9e\u73b0\u7684\u670d\u52a1\\n} finally {\\n    orderSpan.end();\\n}\\n```\\n\\n\u5728Go\u670d\u52a1\u4e2d\uff1a\\n```go\\n// \u4e0a\u4e0b\u6587\u4f1a\u81ea\u52a8\u4f20\u9012TraceID\uff0c\u65e0\u9700\u624b\u52a8\u5904\u7406\\nfunc CheckInventory(ctx context.Context, orderID string) {\\n    ctx, span := tracer.Start(ctx, \\"check-inventory\\")\\n    defer span.End()\\n\\n    span.SetAttributes(attribute.String(\\"order.id\\", orderID))\\n    // \u68c0\u67e5\u5e93\u5b58\u903b\u8f91\\n}\\n```\\n\\n### \u81ea\u52a8\u4e0e\u624b\u52a8\u63d2\u6869\\n\u63d2\u6869\u5c31\u50cf\u5728\u7a0b\u5e8f\u4e2d\u57cb\u5165\u7cbe\u786e\u7684\u68c0\u6d4b\u70b9\uff0c\u8ba9\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u88ab\\"\u89c2\u5bdf\\"\u3002OpenTelemetry\u63d0\u4f9b\u4e86\u4e24\u79cd\u63d2\u6869\u65b9\u5f0f\uff0c\u5c31\u50cf\u53a8\u5e08\u53ef\u4ee5\u9009\u62e9\u81ea\u52a8\u9762\u5305\u673a\u6216\u624b\u5de5\u63c9\u9762\u2014\u2014\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u52bf\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u9009\u62e9\u3002\\n\\n**\u81ea\u52a8\u63d2\u6869**\uff1a\\n\u5c31\u50cf\u7ed9\u5e94\u7528\u7a7f\u4e0a\\"\u667a\u80fd\u5916\u8863\\"\uff0c\u65e0\u9700\u6539\u52a8\u4ee3\u7801\u5373\u53ef\u83b7\u5f97\u89c2\u6d4b\u80fd\u529b\u3002\u8fd9\u79cd\\"\u96f6\u4fb5\u5165\u5f0f\\"\u65b9\u6848\u7279\u522b\u9002\u5408\u5feb\u901f\u542f\u52a8\u6216\u4e0d\u65b9\u4fbf\u4fee\u6539\u7684\u9057\u7559\u7cfb\u7edf\u3002\\n\\n```bash\\n# Java\u81ea\u52a8\u63d2\u6869\u793a\u4f8b - \u53ea\u9700\u6dfb\u52a0\u4e00\u4e2a\u4ee3\u7406\u5373\u53ef\\njava -javaagent:opentelemetry-javaagent.jar \\\\\\n     -Dotel.service.name=\u8ba2\u5355\u670d\u52a1 \\\\\\n     -Dotel.traces.exporter=otlp \\\\\\n     -Dotel.metrics.exporter=otlp \\\\\\n     -Dotel.exporter.otlp.endpoint=http://collector:4317 \\\\\\n     -jar myapp.jar\\n```\\n\\n\u81ea\u52a8\u63d2\u6869\u4f1a\u4e3a\u5e38\u89c1\u6846\u67b6\u548c\u5e93\uff08\u5982Spring\u3001JDBC\u3001Redis\u7b49\uff09\u6dfb\u52a0\u8ffd\u8e2a\u70b9\uff0c\u8ba9\u4f60\u8f7b\u677e\u83b7\u5f97\u57fa\u7840\u89c2\u6d4b\u80fd\u529b\u3002\\n\\n**\u624b\u52a8\u63d2\u6869**\uff1a\\n\u5c31\u50cf\u53a8\u5e08\u638c\u63e1\u83dc\u5200\u7cbe\u51c6\u5207\u5de5\uff0c\u624b\u52a8\u63d2\u6869\u8ba9\u4f60\u80fd\u5728\u5173\u952e\u4e1a\u52a1\u903b\u8f91\u5904\u6dfb\u52a0\u7cbe\u786e\u7684\u89c2\u6d4b\u70b9\uff0c\u5e76\u9644\u52a0\u4e1a\u52a1\u4e0a\u4e0b\u6587\u3002\\n\\n```go\\nfunc ProcessPayment(ctx context.Context, paymentID string, amount float64) error {\\n    // \u521b\u5efa\u652f\u4ed8\u5904\u7406\u8ffd\u8e2a\\n    ctx, span := tracer.Start(ctx, \\"\u5904\u7406\u652f\u4ed8\\", \\n        trace.WithAttributes(\\n            attribute.String(\\"payment.id\\", paymentID),\\n            attribute.Float64(\\"payment.amount\\", amount),\\n            attribute.String(\\"payment.currency\\", \\"CNY\\"),\\n        ))\\n    defer span.End()\\n\\n    // \u4e1a\u52a1\u903b\u8f91...\\n    if err := validatePayment(ctx, paymentID, amount); err != nil {\\n        // \u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\\n        span.SetStatus(codes.Error, \\"\u652f\u4ed8\u9a8c\u8bc1\u5931\u8d25\\")\\n        span.RecordError(err)\\n        return err\\n    }\\n\\n    // \u8bb0\u5f55\u5904\u7406\u7ed3\u679c\\n    span.SetAttributes(attribute.Bool(\\"payment.success\\", true))\\n    return nil\\n}\\n```\\n\\n**\u9ec4\u91d1\u642d\u6863**\uff1a\\n\u5b9e\u8df5\u4e2d\uff0c\u6700\u4f73\u65b9\u6848\u5f80\u5f80\u662f\u7ed3\u5408\u4f7f\u7528\u4e24\u79cd\u63d2\u6869\u65b9\u5f0f\uff1a\\n- \u7528\u81ea\u52a8\u63d2\u6869\u8986\u76d6\u57fa\u7840\u8bbe\u65bd\u548c\u6846\u67b6\u4ee3\u7801\\n- \u7528\u624b\u52a8\u63d2\u6869\u4e3a\u5173\u952e\u4e1a\u52a1\u6d41\u7a0b\u6dfb\u52a0\u4e30\u5bcc\u4e0a\u4e0b\u6587\\n\\n\u8fd9\u6837\u65e2\u80fd\u4eab\u53d7\u81ea\u52a8\u63d2\u6869\u7684\u4fbf\u5229\uff0c\u53c8\u80fd\u83b7\u5f97\u624b\u52a8\u63d2\u6869\u7684\u7cbe\u51c6\u63a7\u5236\uff0c\u5982\u540c\u81ea\u52a8\u9a7e\u9a76\u4e0e\u624b\u52a8\u9a7e\u9a76\u7684\u5b8c\u7f8e\u7ed3\u5408\u3002\\n\\n### \u5e38\u89c1\u6846\u67b6\u96c6\u6210\\nOpenTelemetry\u5c31\u50cf\u4e00\u5957\u4e07\u80fd\u63a5\u53e3\u9002\u914d\u5668\uff0c\u80fd\u591f\u65e0\u7f1d\u5bf9\u63a5\u5404\u79cd\u6d41\u884c\u7684\u5f00\u53d1\u6846\u67b6\u3002\u5b83\u63d0\u4f9b\u4e86\\"\u5373\u63d2\u5373\u7528\\"\u7684\u96c6\u6210\u65b9\u6848\uff0c\u8ba9\u5f00\u53d1\u8005\u80fd\u591f\u5728\u719f\u6089\u7684\u6280\u672f\u6808\u4e2d\u8f7b\u677e\u83b7\u5f97\u89c2\u6d4b\u80fd\u529b\u3002\\n\\n**Web\u6846\u67b6\u9002\u914d**\uff1a\\n- **Spring Boot/Spring MVC**: \u667a\u80fd\u8ffd\u8e2a\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b\u3001\u63a7\u5236\u5668\u8c03\u7528\u548c\u89c6\u56fe\u6e32\u67d3\uff0c\u4e3aJava\u5f00\u53d1\u8005\u63d0\u4f9b\u5b8c\u6574\u89c6\u56fe\\n- **Express/Koa(Node.js)**: \u901a\u8fc7\u4e2d\u95f4\u4ef6\u673a\u5236\uff0c\u4f18\u96c5\u5730\u6355\u83b7HTTP\u8bf7\u6c42\u751f\u547d\u5468\u671f\uff0c\u65e0\u7f1d\u878d\u5165Node.js\u751f\u6001\\n- **Flask/Django(Python)**: \u5de7\u5999\u8ffd\u8e2a\u8bf7\u6c42\u8def\u7531\u3001\u6a21\u677f\u6e32\u67d3\u548cORM\u64cd\u4f5c\uff0cPython\u5f00\u53d1\u8005\u7684\u89c2\u6d4b\u5229\u5668\\n- **ASP.NET Core**: \u6df1\u5ea6\u6574\u5408\u8bf7\u6c42\u5904\u7406\u7ba1\u9053\uff0c\u4e3a.NET\u5e94\u7528\u63d0\u4f9b\u7ec6\u7c92\u5ea6\u8ffd\u8e2a\\n\\n**\u6570\u636e\u8bbf\u95ee\u5c42\u96c6\u6210**\uff1a\\n- **JDBC/JPA**: \u7cbe\u786e\u8bb0\u5f55SQL\u67e5\u8be2\u6267\u884c\u60c5\u51b5\uff0c\u5305\u62ec\u9884\u7f16\u8bd1\u3001\u53c2\u6570\u7ed1\u5b9a\u548c\u7ed3\u679c\u5904\u7406\\n- **MongoDB**: \u76d1\u63a7\u6587\u6863\u64cd\u4f5c\uff0c\u8ffd\u8e2a\u67e5\u8be2\u6784\u5efa\u548c\u6267\u884c\u8fc7\u7a0b\\n- **Redis**: \u6355\u83b7\u547d\u4ee4\u6267\u884c\u7ec6\u8282\uff0c\u76d1\u63a7\u8fde\u63a5\u6c60\u72b6\u6001\u548c\u64cd\u4f5c\u5ef6\u8fdf\\n- **Elasticsearch**: \u8bb0\u5f55\u7d22\u5f15\u548c\u641c\u7d22\u64cd\u4f5c\uff0c\u5206\u6790\u67e5\u8be2\u6027\u80fd\u74f6\u9888\\n\\n**\u6d88\u606f\u4e2d\u95f4\u4ef6\u96c6\u6210**\uff1a\\n- **Kafka**: \u8ffd\u8e2a\u6d88\u606f\u751f\u4ea7\u548c\u6d88\u8d39\u5168\u8fc7\u7a0b\uff0c\u76d1\u63a7\u5206\u533a\u548c\u6d88\u8d39\u7ec4\u72b6\u6001\\n- **RabbitMQ**: \u8bb0\u5f55\u6d88\u606f\u53d1\u5e03\u4e0e\u8ba2\u9605\u4e8b\u4ef6\uff0c\u5206\u6790\u961f\u5217\u541e\u5410\u80fd\u529b\\n- **ActiveMQ/JMS**: \u8ffd\u8e2a\u6d88\u606f\u5904\u7406\u6d41\u7a0b\uff0c\u76d1\u63a7\u961f\u5217\u6df1\u5ea6\u548c\u6d88\u606f\u5ef6\u8fdf\\n\\n**\u8fdc\u7a0b\u8c03\u7528\u96c6\u6210**\uff1a\\n- **gRPC**: \u53cc\u5411\u8ffd\u8e2a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8c03\u7528\uff0c\u76d1\u63a7\u72b6\u6001\u7801\u5206\u5e03\u548c\u5ef6\u8fdf\u60c5\u51b5\\n- **RESTful\u5ba2\u6237\u7aef**: \u8bb0\u5f55HTTP\u8bf7\u6c42\u5b8c\u6574\u751f\u547d\u5468\u671f\uff0c\u5206\u6790\u8c03\u7528\u53ef\u9760\u6027\\n- **GraphQL**: \u6355\u83b7\u67e5\u8be2\u89e3\u6790\u548c\u6267\u884c\u8fc7\u7a0b\uff0c\u4f18\u5316\u5b57\u6bb5\u8bbf\u95ee\u6548\u7387\\n\\n\u8fd9\u4e9b\u96c6\u6210\u5927\u591a\u53ea\u9700\u7b80\u5355\u914d\u7f6e\u5c31\u80fd\u6fc0\u6d3b\uff0c\u50cf\u88c5\u4e0a\u4e86\u9ad8\u7ea7\u4f20\u611f\u5668\u7684\u8d5b\u8f66\uff0c\u80fd\u591f\u81ea\u52a8\u6536\u96c6\u5404\u79cd\u6027\u80fd\u6307\u6807\uff0c\u8ba9\u4f60\u5bf9\u5e94\u7528\u8fd0\u884c\u72b6\u6001\u4e86\u5982\u6307\u638c\u3002\u5bf9\u4e8e\u7279\u6b8a\u9700\u6c42\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u63d2\u6869\u6dfb\u52a0\u66f4\u591a\u81ea\u5b9a\u4e49\u89c2\u6d4b\u70b9\uff0c\u5982\u540c\u8d5b\u8f66\u624b\u6839\u636e\u8d5b\u9053\u60c5\u51b5\u5fae\u8c03\u8bbe\u7f6e\u3002\\n\\n## 5. \u5b9e\u9645\u5e94\u7528\\n### \u5fae\u670d\u52a1\u76d1\u63a7\\n\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u5e94\u7528\u7cfb\u7edf\u5c31\u50cf\u4e00\u4e2a\u5e9e\u5927\u7684\u4ea4\u54cd\u4e50\u56e2\u2014\u2014\u6bcf\u4e2a\u670d\u52a1\u90fd\u662f\u4e00\u4ef6\u72ec\u7acb\u7684\u4e50\u5668\uff0c\u9700\u8981\u5b8c\u7f8e\u914d\u5408\u624d\u80fd\u594f\u51fa\u7f8e\u5999\u4e50\u7ae0\u3002OpenTelemetry\u5c31\u662f\u8fd9\u4e2a\u4e50\u56e2\u7684\u6307\u6325\uff0c\u8ba9\u4f60\u80fd\u591f\u770b\u6e05\u6bcf\u4e2a\u4e50\u5668\u7684\u6f14\u594f\u60c5\u51b5\uff0c\u786e\u4fdd\u6574\u4f53\u534f\u8c03\u4e00\u81f4\u3002\\n\\n**\u6838\u5fc3\u4ef7\u503c**\uff1a\\n- **\u5168\u5c40\u89c6\u56fe**: \u5c31\u50cf\u6307\u6325\u7684\u5168\u5c40\u89c6\u89d2\uff0c\u53ef\u4ee5\u770b\u5230\u8bf7\u6c42\u5982\u4f55\u5728\u5404\u4e2a\u670d\u52a1\u95f4\u6d41\u8f6c\uff0c\u7406\u6e05\u590d\u6742\u7684\u8c03\u7528\u5173\u7cfb\\n- **\u4f9d\u8d56\u6620\u5c04**: \u81ea\u52a8\u7ed8\u5236\u670d\u52a1\u5730\u56fe\uff0c\u63ed\u793a\u54ea\u4e9b\u670d\u52a1\u76f8\u4e92\u4f9d\u8d56\uff0c\u54ea\u4e9b\u8def\u5f84\u6700\u4e3a\u5173\u952e\\n- **\u6027\u80fd\u900f\u89c6**: \u7cbe\u786e\u6d4b\u91cf\u670d\u52a1\u95f4\u901a\u4fe1\u5ef6\u8fdf\uff0c\u8bc6\u522b\u54ea\u4e2a\\"\u4e50\u624b\\"\u53cd\u5e94\u6162\u3001\u54ea\u6bb5\\"\u65cb\u5f8b\\"\u6267\u884c\u4e0d\u7545\\n- **\u5f02\u5e38\u9884\u8b66**: \u5b9e\u65f6\u76d1\u63a7\u9519\u8bef\u7387\u548c\u5f02\u5e38\u6a21\u5f0f\uff0c\u5728\u5c0f\u95ee\u9898\u53d8\u6210\u5927\u5371\u673a\u524d\u53ca\u65f6\u53d1\u73b0\\n- **\u5bb9\u91cf\u89c4\u5212**: \u6536\u96c6\u670d\u52a1\u541e\u5410\u91cf\u6307\u6807\uff0c\u5e2e\u52a9\u51b3\u7b56\u4f55\u65f6\u6269\u5bb9\u3001\u4f55\u65f6\u4f18\u5316\\n\\n**\u5b9e\u65bd\u7b56\u7565**\uff1a\\n- \u4e3a\u6bcf\u4e2a\u5fae\u670d\u52a1\u914d\u7f6e\u552f\u4e00\u7684\u670d\u52a1\u540d\u548c\u7248\u672c\u6807\u8bc6\uff0c\u5c31\u50cf\u7ed9\u6bcf\u4f4d\u4e50\u624b\u5b89\u6392\u56fa\u5b9a\u5ea7\u4f4d\\n- \u5728\u670d\u52a1\u8fb9\u754c\u786e\u4fdd\u4e0a\u4e0b\u6587\u6b63\u786e\u4f20\u9012\uff0c\u4fdd\u8bc1\u8ffd\u8e2a\u7684\u8fde\u7eed\u6027\uff0c\u5c31\u50cf\u63a5\u529b\u68d2\u4e0d\u80fd\u65ad\\n- \u90e8\u7f72\u8d44\u6e90\u68c0\u6d4b\u5668\u81ea\u52a8\u6536\u96c6\u73af\u5883\u4fe1\u606f\uff08Kubernetes\u3001\u4e91\u5382\u5546\u7b49\uff09\uff0c\u4e86\u89e3\\"\u6f14\u51fa\u573a\u5730\\"\\n- \u4e3a\u4e1a\u52a1\u5173\u952e\u6d41\u7a0b\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c\u6807\u8bb0\\"\u72ec\u594f\\"\u548c\\"\u91cd\u594f\\"\u90e8\u5206\\n- \u96c6\u4e2d\u90e8\u7f72Collector\u8fdb\u884c\u6570\u636e\u805a\u5408\u548c\u9884\u5904\u7406\uff0c\u51cf\u8f7b\u5404\u670d\u52a1\u8d1f\u62c5\\n\\n\u5fae\u670d\u52a1\u76d1\u63a7\u6700\u5927\u7684\u6311\u6218\u5728\u4e8e\u7406\u89e3\u7cfb\u7edf\u6574\u4f53\u884c\u4e3a\u2014\u2014OpenTelemetry\u901a\u8fc7\u5c06\u5206\u6563\u7684\u89c2\u6d4b\u6570\u636e\u5173\u8054\u8d77\u6765\uff0c\u5e2e\u52a9\u4f60\u50cf\u770b\u900f\u660e\u4e50\u8c31\u4e00\u6837\u7406\u89e3\u6574\u4e2a\u7cfb\u7edf\u7684\u8fd0\u4f5c\u65b9\u5f0f\u3002\\n\\n### \u6027\u80fd\u5206\u6790\\nOpenTelemetry\u63d0\u4f9b\u4e86\u591a\u7ef4\u5ea6\u7684\u6027\u80fd\u6570\u636e\u6536\u96c6\u548c\u5206\u6790\u80fd\u529b\uff0c\u5e2e\u52a9\u56e2\u961f\u6301\u7eed\u4f18\u5316\u7cfb\u7edf\u6027\u80fd\u3002\\n\\n**\u5173\u952e\u573a\u666f**\uff1a\\n- **\u70ed\u70b9\u5206\u6790**: \u8bc6\u522b\u7cfb\u7edf\u4e2d\u6700\u8017\u65f6\u7684\u64cd\u4f5c\u548c\u6a21\u5757\\n- **\u6570\u636e\u5e93\u4f18\u5316**: \u76d1\u63a7\u67e5\u8be2\u6027\u80fd\uff0c\u8bc6\u522b\u6162\u67e5\u8be2\\n- **\u8d44\u6e90\u5229\u7528**: \u8ffd\u8e2aCPU\u3001\u5185\u5b58\u3001\u7f51\u7edc\u7b49\u8d44\u6e90\u4f7f\u7528\\n- **\u5ba2\u6237\u4f53\u9a8c**: \u6d4b\u91cf\u7aef\u5230\u7aef\u54cd\u5e94\u65f6\u95f4\uff0c\u524d\u7aef\u6027\u80fd\\n- **\u4ee3\u7801\u8def\u5f84\u4f18\u5316**: \u5206\u6790\u6267\u884c\u8def\u5f84\uff0c\u51cf\u5c11\u4e0d\u5fc5\u8981\u64cd\u4f5c\\n\\n**\u5b9e\u65bd\u65b9\u6cd5**\uff1a\\n1. \u914d\u7f6e\u7ec6\u7c92\u5ea6\u7684\u8ffd\u8e2a\u91c7\u6837\uff08\u5f00\u53d1\u73af\u5883\uff09\\n2. \u4f7f\u7528\u76f4\u65b9\u56fe\u6536\u96c6\u5173\u952e\u64cd\u4f5c\u7684\u8017\u65f6\u5206\u5e03\\n3. \u4e3a\u5173\u952e\u7ec4\u4ef6\u914d\u7f6e\u8be6\u7ec6\u7684\u8d44\u6e90\u4f7f\u7528\u6307\u6807\\n4. \u8bbe\u7f6e\u57fa\u51c6\u7ebf\u548c\u6027\u80fd\u9884\u7b97\\n5. \u5b9e\u73b0\u6301\u7eed\u6027\u80fd\u76d1\u63a7\u548c\u544a\u8b66\\n\\n### \u6545\u969c\u6392\u67e5\\n\u5f53\u7cfb\u7edf\u51fa\u73b0\u95ee\u9898\u65f6\uff0cOpenTelemetry\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u6545\u969c\u6392\u67e5\u80fd\u529b\uff0c\u52a0\u901f\u95ee\u9898\u89e3\u51b3\u3002\\n\\n**\u5178\u578b\u6d41\u7a0b**\uff1a\\n1. **\u53d1\u73b0\u95ee\u9898**: \u901a\u8fc7\u6307\u6807\u548c\u544a\u8b66\u8bc6\u522b\u5f02\u5e38\\n2. **\u5b9a\u4f4d\u8303\u56f4**: \u5206\u6790\u53d7\u5f71\u54cd\u7684\u670d\u52a1\u548c\u7ec4\u4ef6\\n3. **\u8ffd\u8e2a\u8be6\u60c5**: \u68c0\u67e5\u76f8\u5173\u8bf7\u6c42\u7684\u5b8c\u6574\u8ffd\u8e2a\\n4. **\u6839\u56e0\u5206\u6790**: \u67e5\u770b\u9519\u8bef\u4fe1\u606f\u3001\u5f02\u5e38\u6808\u548c\u4e0a\u4e0b\u6587\\n5. **\u9a8c\u8bc1\u4fee\u590d**: \u76d1\u63a7\u4fee\u590d\u540e\u7684\u7cfb\u7edf\u884c\u4e3a\\n\\n**\u5173\u952e\u529f\u80fd**\uff1a\\n- **\u9519\u8bef\u4e0a\u4e0b\u6587**: \u8bb0\u5f55\u5f02\u5e38\u53d1\u751f\u65f6\u7684\u8be6\u7ec6\u4fe1\u606f\\n- **\u5173\u8054\u67e5\u8be2**: \u901a\u8fc7TraceID\u5173\u8054\u65e5\u5fd7\u3001\u6307\u6807\u548c\u8ffd\u8e2a\\n- **\u6839\u56e0\u63a8\u65ad**: \u901a\u8fc7\u8ffd\u8e2a\u5206\u6790\u9519\u8bef\u4f20\u64ad\u8def\u5f84\\n- **\u72b6\u6001\u53d8\u5316**: \u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u53d8\u5316\u4e0e\u5f02\u5e38\u7684\u5173\u8054\\n- **\u5386\u53f2\u5bf9\u6bd4**: \u4e0e\u6b63\u5e38\u57fa\u7ebf\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790\\n\\n### \u6700\u4f73\u5b9e\u8df5\\n\u57fa\u4e8e\u5927\u91cf\u4f01\u4e1a\u5b9e\u8df5\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528OpenTelemetry\u7684\u4e00\u4e9b\u5173\u952e\u6700\u4f73\u5b9e\u8df5\uff1a\\n\\n**\u67b6\u6784\u8bbe\u8ba1**\uff1a\\n- \u96c6\u4e2d\u90e8\u7f72Collector\u4f5c\u4e3a\u6570\u636e\u5904\u7406\u4e2d\u5fc3\\n- \u4f7f\u7528\u5c42\u6b21\u5316\u91c7\u6837\u7b56\u7565\u5e73\u8861\u6570\u636e\u91cf\u548c\u8be6\u7ec6\u5ea6\\n- \u8003\u8651\u5728\u6d4b\u8bd5\u73af\u5883\u542f\u7528100%\u91c7\u6837\u7387\\n- \u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u8bbe\u8ba1\u4e13\u7528\u5904\u7406\u7ba1\u9053\\n\\n**\u5f00\u53d1\u6307\u5357**\uff1a\\n- \u5728\u4ee3\u7801\u4e2d\u660e\u786e\u5b9a\u4e49\u670d\u52a1\u8fb9\u754c\u548c\u5173\u952e\u64cd\u4f5c\\n- \u5408\u7406\u4f7f\u7528\u5c5e\u6027\u548c\u4e8b\u4ef6\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u907f\u514d\u8fc7\u5ea6\u8ffd\u8e2a\\n- \u786e\u4fdd\u654f\u611f\u4fe1\u606f\u4e0d\u88ab\u610f\u5916\u6536\u96c6\uff08\u5982PII\u6570\u636e\uff09\\n- \u4e3aCPU\u5bc6\u96c6\u578b\u64cd\u4f5c\u4f7f\u7528\u5f02\u6b65\u5904\u7406\u907f\u514d\u963b\u585e\\n\\n**\u8fd0\u7ef4\u8003\u91cf**\uff1a\\n- \u76d1\u63a7OpenTelemetry\u7ec4\u4ef6\u672c\u8eab\u7684\u5065\u5eb7\u72b6\u6001\\n- \u5b9e\u65bd\u9065\u6d4b\u6570\u636e\u7684\u4fdd\u7559\u653f\u7b56\u7ba1\u7406\u5b58\u50a8\u6210\u672c\\n- \u914d\u7f6e\u9002\u5f53\u7684\u5bfc\u51fa\u6279\u5904\u7406\u53c2\u6570\u51cf\u5c11\u7f51\u7edc\u8d1f\u8f7d\\n- \u4e3aCollector\u9884\u7559\u8db3\u591f\u8d44\u6e90\u786e\u4fdd\u7a33\u5b9a\u8fd0\u884c\\n\\n**\u6301\u7eed\u6539\u8fdb**\uff1a\\n- \u5efa\u7acb\u9065\u6d4b\u6570\u636e\u8d28\u91cf\u6307\u6807\uff08\u8986\u76d6\u7387\u3001\u5b8c\u6574\u6027\u7b49\uff09\\n- \u5b9a\u671f\u5ba1\u67e5\u8ffd\u8e2a\u548c\u6307\u6807\u7684\u6709\u6548\u6027\u548c\u4f7f\u7528\u60c5\u51b5\\n- \u968f\u7740\u5e94\u7528\u6f14\u8fdb\u66f4\u65b0\u89c2\u6d4b\u7b56\u7565\\n- \u57f9\u8bad\u56e2\u961f\u6709\u6548\u5229\u7528\u89c2\u6d4b\u6570\u636e\u8fdb\u884c\u51b3\u7b56\\n\\n## 6. \u751f\u6001\u7cfb\u7edf\\n\\n### \u4e0ePrometheus/Grafana\u96c6\u6210\\nPrometheus\u548cGrafana\u662f\u76d1\u63a7\u548c\u53ef\u89c6\u5316\u7684\u4e8b\u5b9e\u6807\u51c6\uff0cOpenTelemetry\u63d0\u4f9b\u4e86\u4e0e\u5b83\u4eec\u7684\u65e0\u7f1d\u96c6\u6210\u3002\\n\\n**Prometheus\u96c6\u6210**\uff1a\\n- OpenTelemetry\u53ef\u4ee5\u5c06\u6307\u6807\u6570\u636e\u5bfc\u51fa\u4e3aPrometheus\u683c\u5f0f\\n- \u652f\u6301\u4e24\u79cd\u6a21\u5f0f\uff1a\\n  1. **\u6293\u53d6\u6a21\u5f0f**: Collector\u66b4\u9732\u7aef\u70b9\u4f9bPrometheus\u6293\u53d6\\n  2. **\u8fdc\u7a0b\u5199\u5165**: Collector\u4e3b\u52a8\u63a8\u9001\u6570\u636e\u5230Prometheus\\n- \u81ea\u52a8\u8f6c\u6362OpenTelemetry\u6307\u6807\u7c7b\u578b\u4e3aPrometheus\u517c\u5bb9\u683c\u5f0f\\n- \u652f\u6301\u81ea\u5b9a\u4e49\u6807\u7b7e\u548c\u5143\u6570\u636e\\n\\n**Grafana\u96c6\u6210**\uff1a\\n- \u53ef\u89c6\u5316OpenTelemetry\u6536\u96c6\u7684\u6307\u6807\u548c\u8ffd\u8e2a\u6570\u636e\\n- \u652f\u6301\u901a\u8fc7\u591a\u79cd\u6570\u636e\u6e90\u67e5\u770b\u6570\u636e\uff1a\\n  - Prometheus\uff08\u6307\u6807\uff09\\n  - Tempo\uff08\u8ffd\u8e2a\uff09\\n  - Loki\uff08\u65e5\u5fd7\uff09\\n  - Jaeger/Zipkin\uff08\u8ffd\u8e2a\uff09\\n- \u63d0\u4f9b\u5f00\u7bb1\u5373\u7528\u7684\u4eea\u8868\u677f\u6a21\u677f\\n- \u652f\u6301\u544a\u8b66\u548c\u901a\u77e5\u914d\u7f6e\\n\\n**\u914d\u7f6e\u793a\u4f8b**\uff1a\\n```yaml\\n# OpenTelemetry Collector\u914d\u7f6e\\nexporters:\\n  prometheusremotewrite:\\n    endpoint: \\"http://prometheus:9090/api/v1/write\\"\\n    tls:\\n      insecure: true\\n  prometheus:\\n    endpoint: \\"0.0.0.0:8889\\"\\n    namespace: \\"otel\\"\\n    send_timestamps: true\\n    metric_expiration: 180m\\n\\nservice:\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [prometheus, prometheusremotewrite]\\n```\\n\\n### \u4e0eJaeger/Zipkin\u96c6\u6210\\n\u628aOpenTelemetry\u548cJaeger/Zipkin\u7ed3\u5408\u8d77\u6765\uff0c\u5c31\u50cf\u8ba9\u6d77\u8c5a\u548c\u9ca8\u9c7c\u4e00\u8d77\u6e38\u6cf3\u2014\u2014\u5b83\u4eec\u5929\u751f\u5c31\u662f\u7edd\u914d\uff01\\n\\n**\u4e3a\u4f55\u8981\u96c6\u6210\uff1f**\\nOpenTelemetry\u8d1f\u8d23\u6536\u96c6\u6570\u636e\uff08\u5e72\u810f\u6d3b\u7d2f\u6d3b\uff09\uff0c\u800cJaeger/Zipkin\u5219\u64c5\u957f\u5b58\u50a8\u548c\u5c55\u793a\u8fd9\u4e9b\u6570\u636e\uff08\u7ad9C\u4f4d\u51fa\u955c\uff09\u3002\u4e24\u8005\u5408\u4f5c\u8ba9\u4f60\u540c\u65f6\u62e5\u6709\u6700\u4f73\u7684\u6570\u636e\u6536\u96c6\u548c\u6700\u9177\u7684\u53ef\u89c6\u5316\u6548\u679c\u3002\\n\\n**\u96c6\u6210\u73a9\u6cd5**\uff1a\\n1. **\u65e0\u7f1d\u5bf9\u63a5**: OpenTelemetry Collector\u53ef\u4ee5\u76f4\u63a5\u5411Jaeger/Zipkin\u53d1\u9001\u6570\u636e\uff0c\u53ea\u9700\u51e0\u884c\u914d\u7f6e\\n2. **\u53cc\u5251\u5408\u74a7**: \u540c\u65f6\u5229\u7528OpenTelemetry\u7684\u5168\u9762\u6536\u96c6\u80fd\u529bJaeger/Zipkin\u7684\u67e5\u8be2\u5f15\u64ce\\n3. **\u6e10\u8fdb\u5347\u7ea7**: \u5df2\u6709Jaeger/Zipkin\uff1f\u6ca1\u95ee\u9898\uff01\u53ef\u4ee5\u9010\u6b65\u5f15\u5165OpenTelemetry\uff0c\u96f6\u75db\u82e6\u8fc1\u79fb\\n\\n**\u914d\u7f6e\u793a\u4f8b**\uff1a\\n```yaml\\n# \u53d1\u9001\u8ffd\u8e2a\u6570\u636e\u5230Jaeger\uff0c\u7b80\u5355\u5230\u7206\uff01\\nexporters:\\n  jaeger:\\n    endpoint: jaeger-collector:14250\\n    tls:\\n      insecure: true\\n\\nservice:\\n  pipelines:\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [jaeger]\\n```\\n\\n**\u5b9e\u6218\u8d34\u58eb**\uff1a\\n- \u5728Jaeger UI\u4e2d\u67e5\u8be2\u65f6\uff0cOpenTelemetry\u7684\u670d\u52a1\u540d\u4f1a\u81ea\u52a8\u663e\u793a\\n- \u4f7f\u7528OpenTelemetry\u7684\u4e30\u5bcc\u6807\u7b7e\u529f\u80fd\u8ba9\u4f60\u7684Jaeger\u641c\u7d22\u66f4\u7cbe\u51c6\\n- \u4e24\u5168\u5176\u7f8e\uff1a\u7528OpenTelemetry\u6536\u96c6\u6307\u6807\u548c\u65e5\u5fd7\uff0c\u7528Jaeger\u4e13\u6ce8\u53ef\u89c6\u5316\u8ffd\u8e2a\\n\\n---\\n\\n### \u7ed3\u8bed\\n\\nOpenTelemetry\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u89c2\u6d4b\u5de5\u5177\uff0c\u66f4\u662f\u73b0\u4ee3\u4e91\u539f\u751f\u7cfb\u7edf\u7684\u201c\u900f\u660e\u4e50\u8c31\u201d\uff0c\u8ba9\u6bcf\u4e00\u6bb5\u670d\u52a1\u534f\u4f5c\u90fd\u6e05\u6670\u53ef\u89c1\u3002\u5b83\u4ee5\u7edf\u4e00\u7684\u6807\u51c6\u3001\u5f3a\u5927\u7684\u751f\u6001\u548c\u7075\u6d3b\u7684\u67b6\u6784\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u548c\u8fd0\u7ef4\u56e2\u961f\u4ece\u5bb9\u5e94\u5bf9\u590d\u6742\u7cfb\u7edf\u7684\u53ef\u89c2\u6d4b\u6027\u6311\u6218\u3002\u672a\u6765\uff0c\u968f\u7740\u793e\u533a\u7684\u6301\u7eed\u53d1\u5c55\u548c\u66f4\u591a\u521b\u65b0\u7279\u6027\u7684\u52a0\u5165\uff0cOpenTelemetry\u5c06\u6210\u4e3a\u6570\u5b57\u5316\u57fa\u7840\u8bbe\u65bd\u7684\u6807\u914d\u3002\u8ba9\u6211\u4eec\u62e5\u62b1\u89c2\u6d4b\uff0c\u6301\u7eed\u4f18\u5316\uff0c\u8ba9\u7cfb\u7edf\u5065\u5eb7\u53ef\u63a7\u3001\u4e1a\u52a1\u9ad8\u6548\u53ef\u89c1\u2014\u2014\u7528\u6570\u636e\u9a71\u52a8\u6bcf\u4e00\u6b21\u8fdb\u6b65\uff01\\n\\n## \u53c2\u8003\u8d44\u6599\\n- https://opentelemetry.io/docs/\\n- https://www.liwenzhou.com/posts/Go/otel/\\n- https://segmentfault.com/a/1190000041700848\\n- https://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html\\n- https://grafana.com/blog/2023/12/18/opentelemetry-best-practices-a-users-guide-to-getting-started-with-opentelemetry/"},{"id":"gone-config-system","metadata":{"permalink":"/blog/gone-config-system","editUrl":"https://github.com/gone-io/v2-site/tree/main/blog/blog/2025-04-21-gone-config.md","source":"@site/blog/2025-04-21-gone-config.md","title":"\u5982\u4f55\u5728Gone\u6846\u67b6\u4e2d\u4f7f\u7528\u914d\u7f6e","description":"Gone\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u5957\u529f\u80fd\u5f3a\u5927\u7684\u914d\u7f6e\u7ba1\u7406\u7cfb\u7edf\uff0c\u652f\u6301\u73af\u5883\u53d8\u91cf\u3001\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u548c\u591a\u79cd\u914d\u7f6e\u4e2d\u5fc3\uff0c\u901a\u8fc7\u7edf\u4e00\u7684\u63a5\u53e3\u548c\u4f18\u96c5\u7684\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff0c\u7b80\u5316\u5e94\u7528\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u4f5c\u3002\u652f\u6301Apollo\u3001Nacos\u7b49\u4e3b\u6d41\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6ee1\u8db3\u4ece\u7b80\u5355\u5e94\u7528\u5230\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5404\u7c7b\u914d\u7f6e\u9700\u6c42\u3002","date":"2025-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"\u914d\u7f6e\u7ba1\u7406","permalink":"/blog/tags/\u914d\u7f6e\u7ba1\u7406"},{"inline":true,"label":"\u5fae\u670d\u52a1","permalink":"/blog/tags/\u5fae\u670d\u52a1"},{"inline":true,"label":"\u5206\u5e03\u5f0f\u7cfb\u7edf","permalink":"/blog/tags/\u5206\u5e03\u5f0f\u7cfb\u7edf"},{"inline":true,"label":"\u914d\u7f6e\u7ba1\u7406","permalink":"/blog/tags/\u914d\u7f6e\u7ba1\u7406"},{"inline":true,"label":"\u5fae\u670d\u52a1","permalink":"/blog/tags/\u5fae\u670d\u52a1"}],"readingTime":10.33,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"gone-config-system","description":"Gone\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u5957\u529f\u80fd\u5f3a\u5927\u7684\u914d\u7f6e\u7ba1\u7406\u7cfb\u7edf\uff0c\u652f\u6301\u73af\u5883\u53d8\u91cf\u3001\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u548c\u591a\u79cd\u914d\u7f6e\u4e2d\u5fc3\uff0c\u901a\u8fc7\u7edf\u4e00\u7684\u63a5\u53e3\u548c\u4f18\u96c5\u7684\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff0c\u7b80\u5316\u5e94\u7528\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u4f5c\u3002\u652f\u6301Apollo\u3001Nacos\u7b49\u4e3b\u6d41\u914d\u7f6e\u4e2d\u5fc3\uff0c\u6ee1\u8db3\u4ece\u7b80\u5355\u5e94\u7528\u5230\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5404\u7c7b\u914d\u7f6e\u9700\u6c42\u3002","keywords":["\u914d\u7f6e\u7ba1\u7406","\u73af\u5883\u53d8\u91cf","\u914d\u7f6e\u4e2d\u5fc3","\u4f9d\u8d56\u6ce8\u5165","Apollo","Nacos","Gone\u6846\u67b6","\u5206\u5e03\u5f0f\u7cfb\u7edf","\u914d\u7f6e\u6587\u4ef6","\u914d\u7f6e\u63a5\u53e3"],"tags":["\u914d\u7f6e\u7ba1\u7406","\u5fae\u670d\u52a1","\u5206\u5e03\u5f0f\u7cfb\u7edf","\u914d\u7f6e\u7ba1\u7406","\u5fae\u670d\u52a1"]},"unlisted":false,"prevItem":{"title":"OpenTelemetry\u4ecb\u7ecd","permalink":"/blog/opentelemetry-introduction-guide"},"nextItem":{"title":"\u4f7f\u7528\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0","permalink":"/blog/gone-service-registry-discovery"}},"content":"\u914d\u7f6e\u7ba1\u7406\u662f\u73b0\u4ee3\u5e94\u7528\u5f00\u53d1\u7684\u6838\u5fc3\u7ec4\u4ef6\uff0c\u5b83\u8ba9\u5f00\u53d1\u8005\u80fd\u5728\u4e0d\u4fee\u6539\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8c03\u6574\u5e94\u7528\u884c\u4e3a\u3002Gone\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u5957\u529f\u80fd\u4e30\u5bcc\u4e14\u7075\u6d3b\u7684\u914d\u7f6e\u7cfb\u7edf\uff0c\u652f\u6301\u591a\u79cd\u914d\u7f6e\u6e90\u548c\u73af\u5883\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u4ecb\u7ecdGone\u7684\u914d\u7f6e\u8bfb\u53d6\u65b9\u6848\u53ca\u5176\u4f7f\u7528\u65b9\u6cd5\u3002\\n\\n## \u914d\u7f6e\u8bfb\u53d6\u6838\u5fc3\u65b9\u6848\\n\\nGone\u6846\u67b6\u7684\u914d\u7f6e\u65b9\u6848\u4e3b\u8981\u5305\u62ec\u4e09\u4e2a\u5c42\u6b21\uff1a\\n\\n1. **\u6838\u5fc3\u6846\u67b6\u5185\u7f6e\u73af\u5883\u53d8\u91cf\u652f\u6301**\uff1a\u65e0\u9700\u4f9d\u8d56\u4efb\u4f55\u989d\u5916\u7ec4\u4ef6\\n2. **\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u53c2\u6570**\uff1a\u901a\u8fc7`goner/viper`\u5e93\u652f\u6301\\n3. **\u914d\u7f6e\u4e2d\u5fc3\u5bf9\u63a5**\uff1a\u652f\u6301\u591a\u79cd\u6d41\u884c\u7684\u914d\u7f6e\u4e2d\u5fc3\\n   - `goner/apollo` - Apollo\u914d\u7f6e\u4e2d\u5fc3\\n   - `goner/nacos` - Nacos\u914d\u7f6e\u4e2d\u5fc3\\n   - `goner/viper/remote` - \u652f\u6301etcd\u3001consul\u3001Firestore\u3001NATS\u7b49\\n\\n## \u6838\u5fc3\u914d\u7f6e\u67b6\u6784\\n\\nGone\u7684\u914d\u7f6e\u7cfb\u7edf\u7531\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210\uff1aConfigure\u63a5\u53e3\u3001ConfigProvider\u548cEnvConfigure\u9ed8\u8ba4\u5b9e\u73b0\u3002\\n\\n### Configure\u63a5\u53e3\\n\\nConfigure\u63a5\u53e3\u662f\u6574\u4e2a\u914d\u7f6e\u7cfb\u7edf\u7684\u57fa\u7840\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b80\u6d01\u800c\u5f3a\u5927\u7684\u6807\u51c6\u63a5\u53e3\uff1a\\n\\n```go\\ntype Configure interface {\\n    Get(key string, v any, defaultVal string) error\\n}\\n```\\n\\n\u8be5\u63a5\u53e3\u5305\u542b\u4e00\u4e2aGet\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u548c\u8f6c\u6362\u914d\u7f6e\u503c\uff1a\\n- `key`: \u914d\u7f6e\u9879\u7684\u952e\u540d\uff0c\u652f\u6301\u70b9\u53f7\u5206\u9694\u7684\u591a\u7ea7\u8def\u5f84\uff08\u5982\\"db.host\\"\uff09\\n- `v`: \u7528\u4e8e\u5b58\u50a8\u914d\u7f6e\u503c\u7684\u6307\u9488\u53d8\u91cf\uff0c\u652f\u6301\u57fa\u7840\u7c7b\u578b\u548c\u590d\u6742\u7ed3\u6784\u4f53\\n- `defaultVal`: \u5f53\u914d\u7f6e\u9879\u4e0d\u5b58\u5728\u65f6\u7684\u9ed8\u8ba4\u503c\\n- \u8fd4\u56de`error`: \u83b7\u53d6\u5931\u8d25\u6216\u7c7b\u578b\u8f6c\u6362\u9519\u8bef\u65f6\u7684\u5177\u4f53\u9519\u8bef\u4fe1\u606f\\n\\n### ConfigProvider\\n\\nConfigProvider\u8d1f\u8d23\u914d\u7f6e\u503c\u7684\u4f9d\u8d56\u6ce8\u5165\uff1a\\n\\n```go\\ntype ConfigProvider struct {\\n    Flag\\n    configure Configure `gone:\\"configure\\"`\\n}\\n```\\n\\n\u5b83\u63d0\u4f9b\u4e86\u591a\u79cd\u5f3a\u5927\u529f\u80fd\uff1a\\n- \u667a\u80fd\u7c7b\u578b\u8f6c\u6362\uff1a\u81ea\u52a8\u5c06\u914d\u7f6e\u503c\u8f6c\u6362\u4e3a\u76ee\u6807\u7c7b\u578b\\n- \u9ed8\u8ba4\u503c\u673a\u5236\uff1a\u914d\u7f6e\u9879\u4e0d\u5b58\u5728\u65f6\u56de\u9000\u5230\u9ed8\u8ba4\u503c\\n- \u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\uff1a\u5e2e\u52a9\u5feb\u901f\u5b9a\u4f4d\u914d\u7f6e\u95ee\u9898\\n\\n### EnvConfigure\u9ed8\u8ba4\u5b9e\u73b0\\n\\nEnvConfigure\u662f\u5f00\u7bb1\u5373\u7528\u7684\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5b9e\u73b0\uff1a\\n\\n```go\\ntype EnvConfigure struct {\\n    Flag\\n}\\n```\\n\\n\u5b83\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\\n1. \u6807\u51c6\u5316\u7684\u73af\u5883\u53d8\u91cf\u547d\u540d\uff1a\\n   - \u81ea\u52a8\u5c06\u914d\u7f6e\u952e\u540d\u8f6c\u6362\u4e3a\u5927\u5199\uff08\u5982\uff1adb.host \u2192 GONE_DB_HOST\uff09\\n   - \u7edf\u4e00\u6dfb\u52a0\\"GONE_\\"\u524d\u7f00\uff0c\u907f\u514d\u547d\u540d\u51b2\u7a81\\n\\n2. \u5168\u9762\u7684\u7c7b\u578b\u652f\u6301\uff1a\\n   - \u57fa\u7840\u7c7b\u578b\uff1astring\u3001int\u3001float\u3001bool\u7b49\\n   - \u6570\u503c\u7c7b\u578b\uff1aint/int8/int16/int32/int64\u3001uint/uint8/uint16/uint32/uint64\\n   - \u6d6e\u70b9\u7c7b\u578b\uff1afloat32/float64\\n   - \u590d\u6742\u7c7b\u578b\uff1atime.Duration\u548cJSON\u683c\u5f0f\u7684\u7ed3\u6784\u4f53\\n\\n3. \u667a\u80fd\u7684\u9ed8\u8ba4\u503c\u5904\u7406\uff1a\\n   - \u73af\u5883\u53d8\u91cf\u7f3a\u5931\u65f6\u4f7f\u7528\u9ed8\u8ba4\u503c\\n   - \u652f\u6301\u5728\u6807\u7b7e\u4e2d\u5b9a\u4e49\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u503c\\n\\n\x3c!-- truncate --\x3e\\n\\n## \u4f7f\u7528\u793a\u4f8b\\n\\n### \u57fa\u672c\u914d\u7f6e\u6ce8\u5165\\n\\n```go\\n// \u914d\u7f6e\u6ce8\u5165\u793a\u4f8b\\ntype UseConfig struct {\\n    // \u7b80\u5355\u7c7b\u578b\u7684\u914d\u7f6e\\n    port int    `gone:\\"config,port=8080\\"`      // \u9ed8\u8ba4\u503c8080\\n    host string `gone:\\"config,host=localhost\\"` // \u9ed8\u8ba4\u503clocalhost\\n    duration time.Duration `gone:\\"config,duration=1s\\"`\\n\\n    // \u590d\u6742\u7c7b\u578b\u7684\u914d\u7f6e\\n    complexStruct struct {\\n        Field1 string `json:\\"field1\\"`\\n        Field2 int    `json:\\"field2\\"`\\n    } `gone:\\"config,complexStruct={\\\\\\"field1\\\\\\":\\\\\\"value1\\\\\\",\\\\\\"field2\\\\\\":42}\\"`\\n\\n    array []string `gone:\\"config,array=[\\\\\\"a\\\\\\",\\\\\\"b\\\\\\",\\\\\\"c\\\\\\"]\\"`\\n}\\n\\nfunc main(){\\n    gone.Run(func(conf *UseConfig){\\n        fmt.Println(conf.port)       // \u4eceGONE_PORT\u73af\u5883\u53d8\u91cf\u6216\u9ed8\u8ba4\u503c\u83b7\u53d6\\n        fmt.Println(conf.host)       // \u4eceGONE_HOST\u73af\u5883\u53d8\u91cf\u6216\u9ed8\u8ba4\u503c\u83b7\u53d6\\n        fmt.Println(conf.duration)   // \u4eceGONE_DURATION\u73af\u5883\u53d8\u91cf\u6216\u9ed8\u8ba4\u503c\u83b7\u53d6\\n        fmt.Println(conf.complexStruct)  // \u4eceGONE_COMPLEXSTRUCT\u73af\u5883\u53d8\u91cf\u6216\u9ed8\u8ba4\u503c\u83b7\u53d6\\n    })\\n}\\n```\\n\\n\u6240\u6709\u914d\u7f6e\u90fd\u4f7f\u7528`gone:\\"config\\"` \u6807\u7b7e\u8fdb\u884c\u6807\u8bb0\uff0c\u540e\u9762\u8ddf\u7740\u914d\u7f6e\u9879\u7684\u952e\u540d\u548c\u9ed8\u8ba4\u503c\u3002\u5bf9\u4e8e\u590d\u6742\u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c\u9700\u8981\u4f7f\u7528\u5408\u6cd5\u7684JSON\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\\n\\n\u5177\u4f53\u5b9e\u73b0\u53c2\u8003[\u6e90\u4ee3\u7801](https://github.com/gone-io/gone/blob/main/config.go)\u3002\\n\\n## \u4f7f\u7528goner/viper\u652f\u6301\u672c\u5730\u914d\u7f6e\u6587\u4ef6\\n\\n`gone-viper`\u7ec4\u4ef6\u57fa\u4e8e[spf13/viper](https://github.com/spf13/viper)\u5b9e\u73b0\uff0c\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u7ba1\u7406\u80fd\u529b\u3002\\n\\n### \u4e3b\u8981\u7279\u6027\\n\\n- \u591a\u79cd\u914d\u7f6e\u6e90\uff1a\u6587\u4ef6\u3001\u73af\u5883\u53d8\u91cf\u3001\u547d\u4ee4\u884c\u53c2\u6570\\n- \u591a\u683c\u5f0f\u652f\u6301\uff1aJSON\u3001YAML\u3001TOML\u3001Properties\\n- \u5c42\u7ea7\u5316\u914d\u7f6e\u7ed3\u6784\u548c\u9ed8\u8ba4\u503c\u673a\u5236\\n- \u73af\u5883\u53d8\u91cf\u8986\u76d6\u529f\u80fd\\n\\n### \u914d\u7f6e\u6587\u4ef6\u67e5\u627e\u673a\u5236\\n\\n\u7ec4\u4ef6\u4f1a\u6309\u7167\u4ee5\u4e0b\u4f18\u5148\u987a\u5e8f\u81ea\u52a8\u67e5\u627e\u914d\u7f6e\u6587\u4ef6\uff1a\\n\\n1. \u53ef\u6267\u884c\u6587\u4ef6\u6240\u5728\u76ee\u5f55\\n2. \u53ef\u6267\u884c\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u4e0b\u7684`config`\u5b50\u76ee\u5f55\\n3. \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\\n4. \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684`config`\u5b50\u76ee\u5f55\\n5. \u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u7684\u9644\u52a0\u8def\u5f84\uff1a\\n   - go.mod\u6240\u5728\u76ee\u5f55\u4e0b\u7684`config`\u76ee\u5f55\\n   - \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684`testdata`\u76ee\u5f55\\n   - \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e0b\u7684`testdata/config`\u76ee\u5f55\\n6. \u901a\u8fc7`CONF`\u73af\u5883\u53d8\u91cf\u6216`-conf`\u542f\u52a8\u9009\u9879\u6307\u5b9a\u7684\u8def\u5f84\\n\\n### \u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u987a\u5e8f\\n\\n\u5728\u540c\u4e00\u76ee\u5f55\u4e2d\uff0c\u7ec4\u4ef6\u4f1a\u6309\u4ee5\u4e0b\u987a\u5e8f\u52a0\u8f7d\u5e76\u5408\u5e76\u914d\u7f6e\uff1a\\n\\n1. \u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff08\u6309\u987a\u5e8f\uff09\uff1a\\n   - default.json\\n   - default.toml\\n   - default.yaml/yml\\n   - default.properties\\n\\n2. \u73af\u5883\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\uff08\u9ed8\u8ba4\u73af\u5883\u662f`local`\uff09\uff1a\\n   - $\\\\{env}.json\\n   - $\\\\{env}.toml\\n   - $\\\\{env}.yaml/yml\\n   - $\\\\{env}.properties\\n\\n### \u4f7f\u7528\u793a\u4f8b\\n\\n1. \u5b89\u88c5\u7ec4\u4ef6\uff1a\\n```bash\\ngo get -u github.com/gone-io/goner/viper\\n```\\n\\n2. \u5728\u5e94\u7528\u4e2d\u52a0\u8f7d\uff1a\\n```go\\ngone.Loads(\\n    viper.Load, // \u52a0\u8f7d\u914d\u7f6e\u7ec4\u4ef6\\n    // \u5176\u4ed6\u7ec4\u4ef6...\\n).Run()\\n```\\n\\n3. \u901a\u8fc7\u6807\u7b7e\u6ce8\u5165\u914d\u7f6e\uff1a\\n```go\\ntype MyService struct {\\n    gone.Flag\\n    ServerHost string `gone:\\"config,server.host,default=localhost\\"`\\n    ServerPort int    `gone:\\"config,server.port,default=8080\\"`\\n    DbURL      string `gone:\\"config,db.url\\"`\\n}\\n```\\n\\n4. \u624b\u52a8\u83b7\u53d6\u914d\u7f6e\u503c\uff1a\\n```go\\ntype MyComponent struct {\\n    gone.Flag\\n    conf gone.Configure `gone:\\"configure\\"` // \u6ce8\u5165\u914d\u7f6e\u7ba1\u7406\u5668\\n}\\n\\nfunc (c *MyComponent) DoSomething() error {\\n    var host string\\n    err := c.conf.Get(\\"server.host\\", &host, \\"localhost\\")\\n    if err != nil {\\n        return err\\n    }\\n\\n    // \u83b7\u53d6\u590d\u6742\u7ed3\u6784\u4f53\u914d\u7f6e\\n    var dbConfig struct {\\n        URL      string\\n        Username string\\n        Password string\\n    }\\n    err = c.conf.Get(\\"db\\", &dbConfig, \\"\\")\\n    // ...\\n}\\n```\\n\\n### \u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u793a\u4f8b\\n\\n#### Properties\u683c\u5f0f\\n```properties\\n# \u670d\u52a1\u5668\u914d\u7f6e\\nserver.host=localhost\\nserver.port=8080\\n\\n# \u6570\u636e\u5e93\u914d\u7f6e\\ndb.username=root\\ndb.password=secret\\ndb.database=mydb\\n\\n# \u540c\u6587\u4ef6\u5185\u652f\u6301\u53d8\u91cf\u66ff\u6362\\ndb.url=mysql://localhost:3306/${db.database}\\n```\\n\\n#### YAML\u683c\u5f0f\\n```yaml\\nserver:\\n  host: localhost\\n  port: 8080\\n\\ndb:\\n  url: mysql://localhost:3306/mydb\\n  username: root\\n  password: secret\\n\\nlog:\\n  level: info\\n  path: /var/log/myapp\\n```\\n\\n#### JSON\u683c\u5f0f\\n```json\\n{\\n  \\"server\\": {\\n    \\"host\\": \\"localhost\\",\\n    \\"port\\": 8080\\n  },\\n  \\"db\\": {\\n    \\"url\\": \\"mysql://localhost:3306/mydb\\",\\n    \\"username\\": \\"root\\",\\n    \\"password\\": \\"secret\\"\\n  },\\n  \\"log\\": {\\n    \\"level\\": \\"info\\",\\n    \\"path\\": \\"/var/log/myapp\\"\\n  }\\n}\\n```\\n#### TOML\u683c\u5f0f\\n```toml\\n[server]\\nhost = \\"localhost\\"\\nport = 8080\\n[db]\\nurl = \\"mysql://localhost:3306/mydb\\"\\nusername = \\"root\\"\\npassword = \\"secret\\"\\n[log]\\nlevel = \\"info\\"\\npath = \\"/var/log/myapp\\"\\n```\\n\u66f4\u591a\u5185\u5bb9\uff0c\u53c2\u8003[goner/viper](https://github.com/gone-io/goner/blob/main/viper/README_CN.md)\u3002\\n\\n\\n## \u914d\u7f6e\u4e2d\u5fc3\u652f\u6301\\n\\n### Apollo\u914d\u7f6e\u4e2d\u5fc3\\n\\nGone Apollo\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u914d\u7f6e\u7684\u52a8\u6001\u83b7\u53d6\u548c\u5b9e\u65f6\u66f4\u65b0\u529f\u80fd\u3002\\n\\n1. \u5b89\u88c5\uff1a\\n```bash\\ngo get -u github.com/gone-io/goner/apollo\\n```\\n\\n2. \u52a0\u8f7d\u7ec4\u4ef6\uff1a\\n```go\\n//...\\nimport \\"github.com/gone-io/goner/apollo\\"\\n//\\n\\n//...\\ngone.\\n    Loads(\\n        apollo.Load, // \u52a0\u8f7dApollo\u914d\u7f6e\u7ec4\u4ef6\\n        // \u5176\u4ed6\u7ec4\u4ef6...\\n    ).\\n//...\\n```\\n\\n3. \u914d\u7f6e\u8fde\u63a5\u4fe1\u606f\uff1a\\n```yaml\\napollo:\\n  appId: YourAppId\\n  cluster: default\\n  ip: http://apollo-server:8080\\n  namespace: application\\n  secret: YourSecretKey\\n  isBackupConfig: true\\n  watch: true\\n  useLocalConfIfKeyNotExist: true\\n```\\n\\n4. \u4f7f\u7528\uff1a\\n```go\\ntype YourComponent struct {\\n    gone.Flag\\n    // \u652f\u6301\u52a8\u6001\u66f4\u65b0\u7684\u914d\u7f6e\u9879\u9700\u4f7f\u7528\u6307\u9488\u7c7b\u578b\\n    ServerPort *int    `gone:\\"config,server.port\\"`\\n    DbUrl      *string `gone:\\"config,database.url\\"`\\n}\\n```\\n\\n\\n\u66f4\u591a\u5185\u5bb9\uff0c\u53c2\u8003[goner/apollo](https://github.com/gone-io/goner/blob/main/apollo/README_CN.md)\u3002\\n\\n### Nacos\u914d\u7f6e\u4e2d\u5fc3\\n\\nGone Nacos\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u57fa\u4e8e\u963f\u91cc\u5df4\u5df4Nacos\u7684\u914d\u7f6e\u7ba1\u7406\u80fd\u529b\u3002\\n\\n\\n1. \u5b89\u88c5\uff1a\\n```bash\\ngo get -u github.com/gone-io/goner/nacos\\n```\\n\\n2. \u52a0\u8f7d\u7ec4\u4ef6\uff1a\\n```go\\n//...\\nimport \\"github.com/gone-io/goner/nacos\\"\\n\\n//...\\n\\ngone.\\n    Loads(\\n        nacos.Load, // \u52a0\u8f7dNacos\u914d\u7f6e\u7ec4\u4ef6\\n        // \u5176\u4ed6\u7ec4\u4ef6...\\n    )\\n//...\\n```\\n\\n3. \u914d\u7f6e\u8fde\u63a5\u4fe1\u606f\uff1a\\n```yaml\\nnacos:\\n  client:\\n    namespaceId: public\\n    timeoutMs: 10000\\n    logLevel: info\\n  server:\\n    ipAddr: \\"127.0.0.1\\"\\n    contextPath: /nacos\\n    port: 8848\\n  dataId: user-center\\n  watch: true\\n  useLocalConfIfKeyNotExist: true\\n```\\n\\n\u66f4\u591a\u5185\u5bb9\uff0c\u53c2\u8003[goner/nacos](https://github.com/gone-io/goner/blob/main/nacos/README_CN.md)\u3002\\n\\n### \u5176\u4ed6\u914d\u7f6e\u4e2d\u5fc3\\n\\n\u901a\u8fc7`goner/viper/remote`\u7ec4\u4ef6\uff0cGone\u652f\u6301\u66f4\u591a\u914d\u7f6e\u4e2d\u5fc3\uff1a\\n\\n- etcd/etcd3\uff1a\u9ad8\u53ef\u7528\u7684\u5206\u5e03\u5f0f\u952e\u503c\u5b58\u50a8\\n- consul\uff1a\u670d\u52a1\u53d1\u73b0\u548c\u914d\u7f6e\u5de5\u5177\\n- firestore\uff1aGoogle\u4e91\u7aefNoSQL\u6570\u636e\u5e93\\n- nats\uff1a\u5206\u5e03\u5f0f\u6d88\u606f\u7cfb\u7edf\\n\\n1. \u5b89\u88c5\\n```bash\\ngo get -u github.com/gone-io/goner/remote\\n```\\n\\n2.  \u52a0\u8f7d\u7ec4\u4ef6\uff1a\\n```go\\n//...\\nimport \\"github.com/gone-io/goner/remote\\"\\n\\n//...\\n\\ngone.\\n    Loads(\\n        remote.Load, // \u52a0\u8f7dviper/remote\u914d\u7f6e\u7ec4\u4ef6\\n        // \u5176\u4ed6\u7ec4\u4ef6...\\n    )\\n//...\\n```\\n\\n3. \u914d\u7f6e\u793a\u4f8b\uff1a\\n```yaml\\nviper.remote:\\n  type: yaml\\n  watch: true\\n  watchDuration: 5s\\n  useLocalConfIfKeyNotExist: true\\n  providers:\\n    - provider: etcd # \u652f\u6301\u7684\u914d\u7f6e\u4e2d\u5fc3\u7c7b\u578b: etcd\u3001etcd3\u3001consul\u3001firestore\u3001nats\\n      endpoint: localhost:2379\\n      path: /config/myapp\\n      configType: json\\n```\\n\\n## \u81ea\u5b9a\u4e49\u914d\u7f6e\u6e90\\n\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\u914d\u7f6e\u6e90\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0`Configure`\u63a5\u53e3\u6765\u6269\u5c55\u914d\u7f6e\u7ec4\u4ef6\u3002\\n\\n```go\\ntype customerConfig struct {\\n    gone.Flag\\n}\\n\\nfunc (c *customerConfig) Get(key string, v any, defaultVal string) error {\\n    // \u5b9e\u73b0\u4ece\u81ea\u5b9a\u4e49\u914d\u7f6e\u6e90\u83b7\u53d6\u914d\u7f6e\u7684\u903b\u8f91\\n    // ...\\n}\\n\\n// \u5b9a\u4e49\u52a0\u8f7d\u51fd\u6570\\nfunc Load(loader gone.Loader) gone.Loader {\\n    return gone.LoadOnce(func() error {\\n        return loader.Load(\\n            &customerConfig{},\\n            gone.Name(gone.ConfigureName),\\n            gone.IsDefault(new(gone.Configure)),\\n            gone.ForceReplace(),\\n        )\\n    })\\n}\\n```\\n\\n## \u6700\u4f73\u5b9e\u8df5\u5efa\u8bae\\n\\n1. \u4f7f\u7528\u5c42\u7ea7\u7ed3\u6784\u7ec4\u7ec7\u914d\u7f6e\uff0c\u63d0\u9ad8\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\\n2. \u4e3a\u5173\u952e\u914d\u7f6e\u63d0\u4f9b\u5408\u7406\u7684\u9ed8\u8ba4\u503c\uff0c\u786e\u4fdd\u5e94\u7528\u5728\u7f3a\u5c11\u914d\u7f6e\u65f6\u4ecd\u80fd\u6b63\u5e38\u8fd0\u884c\\n3. \u5c06\u654f\u611f\u4fe1\u606f\uff08\u5982\u5bc6\u7801\u3001API\u5bc6\u94a5\uff09\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6ce8\u5165\uff0c\u907f\u514d\u786c\u7f16\u7801\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d\\n4. \u5229\u7528\u4e0d\u540c\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff08\u5982`dev.yaml`\u3001`prod.yaml`\uff09\u7ba1\u7406\u4e0d\u540c\u73af\u5883\u7684\u914d\u7f6e\\n5. \u914d\u7f6e\u952e\u540d\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u548c\u70b9\u53f7\u5206\u9694\uff0c\u4fdd\u6301\u4e00\u81f4\u7684\u547d\u540d\u89c4\u8303\\n\\n## \u603b\u7ed3\\n\\nGone\u6846\u67b6\u7684\u914d\u7f6e\u7cfb\u7edf\u65e2\u7b80\u5355\u6613\u7528\u53c8\u529f\u80fd\u5f3a\u5927\uff0c\u80fd\u591f\u6ee1\u8db3\u4ece\u7b80\u5355\u5e94\u7528\u5230\u590d\u6742\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u5404\u7c7b\u914d\u7f6e\u7ba1\u7406\u9700\u6c42\u3002\u65e0\u8bba\u662f\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u3001\u672c\u5730\u914d\u7f6e\u6587\u4ef6\u8fd8\u662f\u8fdc\u7a0b\u914d\u7f6e\u4e2d\u5fc3\uff0cGone\u90fd\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3\u548c\u4f18\u96c5\u7684\u4f9d\u8d56\u6ce8\u5165\u65b9\u5f0f\uff0c\u5927\u5927\u7b80\u5316\u4e86\u5e94\u7528\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u4f5c\u3002"},{"id":"gone-service-registry-discovery","metadata":{"permalink":"/blog/gone-service-registry-discovery","editUrl":"https://github.com/gone-io/v2-site/tree/main/blog/blog/2025-04-21-gone-registry.md","source":"@site/blog/2025-04-21-gone-registry.md","title":"\u4f7f\u7528\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0","description":"\u672c\u6587\u6df1\u5165\u63a2\u8ba8Gone\u6846\u67b6\u4e2d\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7684\u5b9e\u73b0\u673a\u5236\uff0c\u4ecb\u7ecd\u5176\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u89e3\u51b3\u52a8\u6001\u901a\u4fe1\u3001\u8d1f\u8f7d\u5747\u8861\u548c\u9ad8\u53ef\u7528\u7b49\u6838\u5fc3\u95ee\u9898\u7684\u65b9\u5f0f\u3002\u6587\u7ae0\u8be6\u7ec6\u9610\u8ff0\u4e86Gone\u5982\u4f55\u4f18\u96c5\u96c6\u6210Nacos\u3001Consul\u548cEtcd\u7b49\u670d\u52a1\u6cbb\u7406\u7ec4\u4ef6\uff0c\u63d0\u4f9b\u4e86\u5b9e\u6218\u793a\u4f8b\u548c\u539f\u7406\u89e3\u6790\uff0c\u5e76\u8bf4\u660e\u4e86\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u7684\u5f00\u53d1\u65b9\u6cd5\uff0c\u4e3aGo\u5f00\u53d1\u8005\u63d0\u4f9b\u5b8c\u6574\u7684\u5fae\u670d\u52a1\u6cbb\u7406\u89e3\u51b3\u65b9\u6848\u3002","date":"2025-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"\u5fae\u670d\u52a1","permalink":"/blog/tags/\u5fae\u670d\u52a1"},{"inline":true,"label":"Gone","permalink":"/blog/tags/gone"},{"inline":true,"label":"\u670d\u52a1\u6cbb\u7406","permalink":"/blog/tags/\u670d\u52a1\u6cbb\u7406"},{"inline":true,"label":"\u6280\u672f\u67b6\u6784","permalink":"/blog/tags/\u6280\u672f\u67b6\u6784"}],"readingTime":11.985,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"gone-service-registry-discovery","description":"\u672c\u6587\u6df1\u5165\u63a2\u8ba8Gone\u6846\u67b6\u4e2d\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7684\u5b9e\u73b0\u673a\u5236\uff0c\u4ecb\u7ecd\u5176\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u89e3\u51b3\u52a8\u6001\u901a\u4fe1\u3001\u8d1f\u8f7d\u5747\u8861\u548c\u9ad8\u53ef\u7528\u7b49\u6838\u5fc3\u95ee\u9898\u7684\u65b9\u5f0f\u3002\u6587\u7ae0\u8be6\u7ec6\u9610\u8ff0\u4e86Gone\u5982\u4f55\u4f18\u96c5\u96c6\u6210Nacos\u3001Consul\u548cEtcd\u7b49\u670d\u52a1\u6cbb\u7406\u7ec4\u4ef6\uff0c\u63d0\u4f9b\u4e86\u5b9e\u6218\u793a\u4f8b\u548c\u539f\u7406\u89e3\u6790\uff0c\u5e76\u8bf4\u660e\u4e86\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u7684\u5f00\u53d1\u65b9\u6cd5\uff0c\u4e3aGo\u5f00\u53d1\u8005\u63d0\u4f9b\u5b8c\u6574\u7684\u5fae\u670d\u52a1\u6cbb\u7406\u89e3\u51b3\u65b9\u6848\u3002","keywords":["Gone\u6846\u67b6","\u5fae\u670d\u52a1\u67b6\u6784","\u670d\u52a1\u6ce8\u518c\u53d1\u73b0","\u670d\u52a1\u6cbb\u7406","\u8d1f\u8f7d\u5747\u8861","Nacos","Consul","Etcd","Go\u8bed\u8a00","\u5206\u5e03\u5f0f\u7cfb\u7edf"],"tags":["\u5fae\u670d\u52a1","Gone","\u670d\u52a1\u6cbb\u7406","\u6280\u672f\u67b6\u6784"]},"unlisted":false,"prevItem":{"title":"\u5982\u4f55\u5728Gone\u6846\u67b6\u4e2d\u4f7f\u7528\u914d\u7f6e","permalink":"/blog/gone-config-system"},"nextItem":{"title":"\u4f7f\u7528Provider\u673a\u5236\u6539\u9020goner/xorm","permalink":"/blog/xorm-update-process"}},"content":"## \u524d\u8a00\\n\\n\u5728\u4e91\u539f\u751f\u65f6\u4ee3\uff0cKubernetes \u5df2\u7ecf\u6210\u4e3a\u5bb9\u5668\u7f16\u6392\u7684\u6807\u51c6\u9009\u62e9\uff0c\u5b83\u5185\u7f6e\u7684\u670d\u52a1\u53d1\u73b0\u673a\u5236\u8db3\u4ee5\u5e94\u5bf9\u5f88\u591a\u573a\u666f\u3002\u7136\u800c\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\u9700\u8981\u5b9e\u73b0\u5ba2\u6237\u7aef\u8d1f\u8f7d\u5747\u8861\u6216\u66f4\u7cbe\u7ec6\u5316\u7684\u670d\u52a1\u6cbb\u7406\u65f6\uff0c\u7b2c\u4e09\u65b9\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\uff08\u5982 Nacos\u3001Consul \u6216 Etcd\uff09\u5f80\u5f80\u80fd\u63d0\u4f9b\u66f4\u4e13\u4e1a\u3001\u66f4\u7075\u6d3b\u7684\u89e3\u51b3\u65b9\u6848\u3002\u672c\u6587\u5c06\u6df1\u5165\u63a2\u8ba8 Gone \u6846\u67b6\u5982\u4f55\u4f18\u96c5\u5730\u96c6\u6210\u8fd9\u4e9b\u670d\u52a1\u6cbb\u7406\u7ec4\u4ef6\uff0c\u8ba9\u60a8\u7684\u5fae\u670d\u52a1\u67b6\u6784\u66f4\u52a0\u5065\u58ee\u3002\\n\\n## \u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\uff1a\u5fae\u670d\u52a1\u67b6\u6784\u7684\u57fa\u77f3\\n\\n\u5728\u5fae\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u72b9\u5982\u57ce\u5e02\u7684\u4ea4\u901a\u67a2\u7ebd\uff0c\u5b83\u89e3\u51b3\u4e86\u4ee5\u4e0b\u5173\u952e\u95ee\u9898\uff1a\\n\\n### \u52a8\u6001\u901a\u4fe1\u4e0e\u7075\u6d3b\u6cbb\u7406\\n\\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6ca1\u6709\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3\uff0c\u6bcf\u6b21\u670d\u52a1\u5730\u5740\u53d8\u66f4\u90fd\u9700\u8981\u624b\u52a8\u4fee\u6539\u914d\u7f6e\u5e76\u91cd\u542f\u5e94\u7528\uff0c\u8fd9\u5728\u5f39\u6027\u4f38\u7f29\u7684\u4e91\u73af\u5883\u4e2d\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684\u4efb\u52a1\u3002\u800c\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\uff1a\\n\\n- \u670d\u52a1\u63d0\u4f9b\u8005\u542f\u52a8\u65f6\u81ea\u52a8\u5c06\u81ea\u8eab\u5143\u6570\u636e\uff08\u5730\u5740\u3001\u7aef\u53e3\u7b49\uff09\u6ce8\u518c\u5230\u4e2d\u5fc3\\n- \u670d\u52a1\u6d88\u8d39\u8005\u65e0\u9700\u786c\u7f16\u7801\u5730\u5740\uff0c\u800c\u662f\u52a8\u6001\u67e5\u8be2\u53ef\u7528\u5b9e\u4f8b\\n- \u65b0\u589e\u5b9e\u4f8b\u81ea\u52a8\u52a0\u5165\u670d\u52a1\u96c6\u7fa4\uff0c\u6545\u969c\u5b9e\u4f8b\u88ab\u81ea\u52a8\u5254\u9664\\n\\n\u8fd9\u79cd\u673a\u5236\u4f7f\u5f97\u670d\u52a1\u6269\u5bb9\u3001\u8fc1\u79fb\u53d8\u5f97\u8f7b\u800c\u6613\u4e3e\uff0c\u7cfb\u7edf\u5f39\u6027\u5927\u5927\u589e\u5f3a\u3002\\n\\n### \u8d1f\u8f7d\u5747\u8861\u4e0e\u9ad8\u53ef\u7528\u4fdd\u969c\\n\\n\u6ca1\u6709\u4ec0\u4e48\u6bd4\u5355\u70b9\u6545\u969c\u66f4\u4ee4\u4eba\u5934\u75bc\u7684\u4e86\u3002\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u901a\u8fc7\u4ee5\u4e0b\u673a\u5236\u4fdd\u969c\u7cfb\u7edf\u9ad8\u53ef\u7528\uff1a\\n\\n- \u5b9e\u65f6\u5065\u5eb7\u68c0\u67e5\u786e\u4fdd\u8bf7\u6c42\u53ea\u8def\u7531\u5230\u5065\u5eb7\u7684\u8282\u70b9\\n- \u901a\u8fc7\u8f6e\u8be2\u3001\u968f\u673a\u6216\u6743\u91cd\u7b49\u7b97\u6cd5\u5b9e\u73b0\u6d41\u91cf\u5747\u8861\u5206\u914d\\n- \u7279\u6b8a\u673a\u5236\u5982 Nacos \u7684\u6743\u91cd\u7b56\u7565\u6216 Eureka \u7684\u81ea\u6211\u4fdd\u62a4\u6a21\u5f0f\u589e\u5f3a\u7cfb\u7edf\u7a33\u5b9a\u6027\\n\\n\u8fd9\u4e9b\u673a\u5236\u5171\u540c\u4f5c\u7528\uff0c\u8ba9\u60a8\u7684\u7cfb\u7edf\u5728\u9762\u5bf9\u9ad8\u5e76\u53d1\u548c\u90e8\u5206\u8282\u70b9\u6545\u969c\u65f6\u4f9d\u7136\u80fd\u591f\u5e73\u7a33\u8fd0\u884c\u3002\\n\\n### \u7cfb\u7edf\u89e3\u8026\u4e0e\u8fd0\u7ef4\u7b80\u5316\\n\\n\u5fae\u670d\u52a1\u67b6\u6784\u7684\u6838\u5fc3\u7406\u5ff5\u4e4b\u4e00\u662f\\"\u9ad8\u5185\u805a\uff0c\u4f4e\u8026\u5408\\"\uff1a\\n\\n- \u670d\u52a1\u95f4\u901a\u8fc7\u6ce8\u518c\u4e2d\u5fc3\u95f4\u63a5\u901a\u4fe1\uff0c\u964d\u4f4e\u76f4\u63a5\u4f9d\u8d56\\n- \u7edf\u4e00\u7684\u670d\u52a1\u6cbb\u7406\u5e73\u53f0\u7b80\u5316\u7248\u672c\u66f4\u65b0\u3001\u7070\u5ea6\u53d1\u5e03\u7b49\u590d\u6742\u64cd\u4f5c\\n- \u652f\u6301\u591a\u8bed\u8a00\u3001\u591a\u534f\u8bae\u96c6\u6210\uff0c\u63d0\u5347\u7cfb\u7edf\u517c\u5bb9\u6027\u548c\u53ef\u6269\u5c55\u6027\\n\\n\x3c!-- truncate --\x3e\\n\\n## Gone \u6846\u67b6\u4e2d\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u5b9e\u6218\\n\\n\u4e0b\u9762\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u770b\u770b\u5982\u4f55\u5728 Gone \u6846\u67b6\u4e2d\u5feb\u901f\u542f\u7528\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u529f\u80fd\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 **goner/grpc** \u6765\u63d0\u4f9b gRPC \u670d\u52a1\uff0c\u4ee5\u63a5\u5165 Nacos \u4e3a\u4f8b\uff1a\\n\\n### 1. \u5b89\u88c5\u4f9d\u8d56\\n\\n\u9996\u5148\uff0c\u6dfb\u52a0\u5fc5\u8981\u7684\u4f9d\u8d56\u5305\uff1a\\n\\n```bash\\ngo get github.com/gone-io/goner/nacos\\n```\\n\\n### 2. \u52a0\u8f7d\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\\n\\n\u5728\u5e94\u7528\u5165\u53e3\u5904\u52a0\u8f7d Nacos \u7ec4\u4ef6\uff1a\\n\\n```go\\ngone.\\n    //...\u5176\u4ed6\u7ec4\u4ef6\\n    Loads(nacos.RegistryLoad). // \u52a0\u8f7d\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\\n    //...\\n```\\n\\n### 3. \u914d\u7f6e\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\\n\\n**\u670d\u52a1\u7aef\u914d\u7f6e (YAML)**\uff1a\\n\\n```yaml\\n# nacos \u914d\u7f6e\\nnacos:\\n  client:\\n    namespaceId: public\\n    asyncUpdateService: false\\n    logLevel: debug\\n    logDir: ./logs/\\n  server:\\n    ipAddr: \\"127.0.0.1\\"\\n    contextPath: /nacos\\n    port: 8848\\n    scheme: http\\n\\n# grpc \u670d\u52a1\u7aef\u914d\u7f6e\\nserver:\\n  grpc:\\n    port: 0 # \u968f\u673a\u76d1\u542c\u7aef\u53e3\uff0c\u5f88\u9002\u5408\u4e91\u73af\u5883\u4e0b\u7684\u52a8\u6001\u90e8\u7f72\\n    service-name: hello-svc # \u670d\u52a1\u540d\u79f0\uff0c\u6d88\u8d39\u8005\u5c06\u901a\u8fc7\u6b64\u540d\u79f0\u53d1\u73b0\u670d\u52a1\\n    service-use-subnet: 0.0.0.0/0 # \u670d\u52a1\u53ef\u8bbf\u95ee\u7684\u5b50\u7f51\\n```\\n\\n**\u5ba2\u6237\u7aef\u914d\u7f6e (YAML)**\uff1a\\n\\n```yaml\\n# nacos \u914d\u7f6e\\nnacos:\\n  client:\\n    namespaceId: public\\n    asyncUpdateService: false\\n    logLevel: debug\\n    logDir: ./logs/\\n  server:\\n    ipAddr: \\"127.0.0.1\\"\\n    contextPath: /nacos\\n    port: 8848\\n    scheme: http\\n\\n# grpc \u5ba2\u6237\u7aef\u914d\u7f6e\\nserver:\\n  grpc:\\n    lb-policy: round_robin # \u8d1f\u8f7d\u5747\u8861\u7b56\u7565\\n\\ngrpc.service.hello-svc.address: hello-svc\\n```\\n\\n**\u5ba2\u6237\u7aef\u4ee3\u7801**\uff1a\\n```go\\npackage main\\n\\nimport (\\n\\t\\"context\\"\\n\\t\\"github.com/gone-io/gone/v2\\"\\n\\tgone_grpc \\"github.com/gone-io/goner/grpc\\"\\n\\t\\"github.com/gone-io/goner/nacos\\"\\n\\t\\"github.com/gone-io/goner/viper\\"\\n\\t\\"google.golang.org/grpc\\"\\n\\t\\"grpc_use_discovery/proto\\"\\n\\t\\"log\\"\\n\\t\\"time\\"\\n)\\n\\ntype helloClient struct {\\n\\tgone.Flag\\n\\tproto.HelloClient // \u4f7f\u7528\u65b9\u6cd51\uff1a\u5d4c\u5165HelloClient\uff0c\u672c\u7ec4\u4ef6\u53ea\u8d1f\u8f7d\u521d\u59cb\u5316\uff0c\u80fd\u529b\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u7ec4\u4ef6\u4f7f\u7528\\n\\n\\n\\t// config=${\u914d\u7f6e\u7684key},address=${\u670d\u52a1\u5730\u5740}\uff1b //config\u4f18\u5148\u7ea7\u66f4\u9ad8\\n\\tclientConn *grpc.ClientConn `gone:\\"*,config=grpc.service.hello-svc.address\\"`\\n}\\n\\nfunc (c *helloClient) Init() {\\n\\tc.HelloClient = proto.NewHelloClient(c.clientConn)\\n}\\n\\nfunc main() {\\n\\tgone.\\n\\t\\tNewApp(\\n\\t\\t\\tgone_grpc.ClientRegisterLoad,\\n\\t\\t\\tviper.Load,\\n\\t\\t\\tnacos.RegistryLoad,\\n\\t\\t).\\n\\t\\tLoad(&helloClient{}).\\n\\t\\tRun(func(in struct {\\n\\t\\t\\thello *helloClient `gone:\\"*\\"` // \u5728Run\u65b9\u6cd5\u7684\u53c2\u6570\u4e2d\uff0c\u6ce8\u5165 helloClient\\n\\t\\t}) {\\n\\t\\t\\tfor i := 0; i < 10; i++ {\\n\\t\\t\\t\\t// \u8c03\u7528Say\u65b9\u6cd5\uff0c\u7ed9\u670d\u52a1\u6bb5\u53d1\u9001\u6d88\u606f\\n\\t\\t\\t\\tsay, err := in.hello.Say(context.Background(), &proto.SayRequest{Name: \\"gone\\"})\\n\\t\\t\\t\\tif err != nil {\\n\\t\\t\\t\\t\\tlog.Printf(\\"err: %v\\", err)\\n\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tlog.Printf(\\"say result: %s\\", say.Message)\\n\\t\\t\\t}\\n\\n\\t\\t\\ttime.Sleep(time.Second * 10)\\n\\t\\t})\\n}\\n\\n```\\n\\n\u5c31\u8fd9\u4e48\u7b80\u5355\uff01\u901a\u8fc7\u4e0a\u8ff0\u914d\u7f6e\uff0c\u60a8\u7684\u670d\u52a1\u5c06\u81ea\u52a8\u6ce8\u518c\u5230 Nacos\uff0c\u5ba2\u6237\u7aef\u4e5f\u80fd\u81ea\u52a8\u53d1\u73b0\u670d\u52a1\u5e76\u5efa\u7acb\u8fde\u63a5\u3002\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\u53ef\u53c2\u8003\uff1a[grpc_use_discovery](https://github.com/gone-io/goner/tree/main/examples/grpc_use_discovery)\\n\\n## \u63ed\u79d8\u5b9e\u73b0\u539f\u7406\\n\\nGone \u6846\u67b6\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u673a\u5236\u4e3b\u8981\u7531\u4e09\u4e2a\u6838\u5fc3\u90e8\u5206\u7ec4\u6210\uff1a\u670d\u52a1\u7aef\u6ce8\u518c\u3001\u5ba2\u6237\u7aef\u53d1\u73b0\u548c\u8d1f\u8f7d\u5747\u8861\u3002\u8ba9\u6211\u4eec\u4e00\u8d77\u63ed\u5f00\u5b83\u4eec\u7684\u795e\u79d8\u9762\u7eb1\uff1a\\n\\n### 1. \u670d\u52a1\u7aef\u6ce8\u518c\u673a\u5236\\n\\n\u670d\u52a1\u542f\u52a8\u65f6\uff0c`server.go` \u4e2d\u7684 `regService` \u65b9\u6cd5\u8d1f\u8d23\u5c06\u670d\u52a1\u4fe1\u606f\u6ce8\u518c\u5230\u6ce8\u518c\u4e2d\u5fc3\uff1a\\n\\n```go\\nfunc (s *server) regService() func() error {\\n    if s.registry != nil {\\n        service := g.NewService(s.serviceName, ip.String(), port, g.Metadata{\\"grpc\\": \\"true\\"}, true, 100)\\n        err := s.registry.Register(service)\\n        // ...\u9519\u8bef\u5904\u7406\\n    }\\n    return nil\\n}\\n```\\n\\n\u8fd9\u6bb5\u4ee3\u7801\u5b8c\u6210\u4e86\u4ee5\u4e0b\u5de5\u4f5c\uff1a\\n- \u521b\u5efa\u5305\u542b\u670d\u52a1\u540d\u3001IP\u3001\u7aef\u53e3\u3001\u5143\u6570\u636e\u7b49\u4fe1\u606f\u7684\u670d\u52a1\u5b9e\u4f8b\\n- \u5c06\u670d\u52a1\u5b9e\u4f8b\u6ce8\u518c\u5230\u914d\u7f6e\u7684\u6ce8\u518c\u4e2d\u5fc3\uff08\u5982Nacos\uff09\\n- \u8bbe\u7f6e\u5065\u5eb7\u68c0\u67e5\u548c\u670d\u52a1\u6743\u91cd\u7b49\u53c2\u6570\\n\\n\u5f53\u670d\u52a1\u4f18\u96c5\u505c\u6b62\u65f6\uff0c\u8fd8\u4f1a\u81ea\u52a8\u6267\u884c\u53cd\u6ce8\u518c\u64cd\u4f5c\uff0c\u786e\u4fdd\u670d\u52a1\u5b9e\u4f8b\u4ece\u6ce8\u518c\u4e2d\u5fc3\u79fb\u9664\u3002\\n\\n### 2. \u5ba2\u6237\u7aef\u670d\u52a1\u53d1\u73b0\\n\\n\u5ba2\u6237\u7aef\u7684\u670d\u52a1\u53d1\u73b0\u901a\u8fc7 gRPC \u7684 resolver \u673a\u5236\u5b9e\u73b0\uff1a\\n\\n```go\\ntype clientRegister struct {\\n    gone.Flag\\n    logger      gone.Logger        `gone:\\"*\\"`\\n    //...\\n    discovery   g.ServiceDiscovery `gone:\\"*\\" option:\\"allowNil\\"`\\n    rb          resolver.Builder\\n\\n    //...\\n    loadBalancingPolicy string         `gone:\\"config,server.grpc.lb-policy=round_robin\\"`\\n    //...\\n}\\n\\nfunc (s *clientRegister) Init() {\\n    if s.discovery != nil {\\n        s.rb = NewResolverBuilder(s.discovery, s.logger)\\n    }\\n}\\n\\nfunc (s *clientRegister) createConn(address string) (conn *grpc.ClientConn, err error) {\\n    if s.rb != nil {\\n        options = append(options,\\n            grpc.WithResolvers(s.rb),\\n            grpc.WithDefaultServiceConfig(fmt.Sprintf(`{\\"loadBalancingPolicy\\":\\"%s\\"}`, s.loadBalancingPolicy)),\\n        )\\n    }\\n    // ...\u5efa\u7acb\u8fde\u63a5\\n}\\n```\\n\\n\u8fd9\u79cd\u8bbe\u8ba1\u5b9e\u73b0\u4e86\uff1a\\n- \u670d\u52a1\u540d\u5230\u5b9e\u9645\u5730\u5740\u7684\u81ea\u52a8\u89e3\u6790\\n- \u5b9e\u65f6\u611f\u77e5\u670d\u52a1\u5b9e\u4f8b\u53d8\u5316\\n- \u7075\u6d3b\u914d\u7f6e\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\\n\\n### 3. \u8d1f\u8f7d\u5747\u8861\u5b9e\u73b0\\n\\n\u8d1f\u8f7d\u5747\u8861\u529f\u80fd\u5728 `resolver.go` \u4e2d\u5b9e\u73b0\uff1a\\n\\n```go\\nfunc (r *discoveryResolver) updateState(services []g.Service) {\\n    addresses := make([]resolver.Address, 0, len(services))\\n    for _, svc := range services {\\n        addresses = append(addresses, resolver.Address{\\n            Addr:       fmt.Sprintf(\\"%s:%d\\", svc.GetIP(), svc.GetPort()),\\n            ServerName: svc.GetName(),\\n            Attributes: attributes.New(\\"weight\\", svc.GetWeight()),\\n        })\\n    }\\n    // ...\u66f4\u65b0\u72b6\u6001\\n}\\n```\\n\\n\u8fd9\u6bb5\u4ee3\u7801\u5c06\u6ce8\u518c\u4e2d\u5fc3\u83b7\u53d6\u7684\u670d\u52a1\u5217\u8868\u8f6c\u6362\u4e3a gRPC \u7684\u5730\u5740\u683c\u5f0f\uff0c\u5e76\u652f\u6301\uff1a\\n- \u591a\u79cd\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\uff08\u5982\u8f6e\u8be2\u3001\u52a0\u6743\u8f6e\u8be2\u7b49\uff09\\n- \u81ea\u52a8\u5254\u9664\u4e0d\u5065\u5eb7\u5b9e\u4f8b\\n- \u670d\u52a1\u5217\u8868\u53d8\u66f4\u65f6\u7684\u52a8\u6001\u66f4\u65b0\\n\\n### 4. \u9ad8\u5ea6\u53ef\u6269\u5c55\u8bbe\u8ba1\\n\\nGone \u6846\u67b6\u91c7\u7528\u63a5\u53e3\u62bd\u8c61\u548c\u4f9d\u8d56\u6ce8\u5165\u7684\u8bbe\u8ba1\u7406\u5ff5\uff0c\u4f7f\u5f97\u6574\u4e2a\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u673a\u5236\u5177\u6709\u6781\u9ad8\u7684\u53ef\u6269\u5c55\u6027\uff1a\\n- \u652f\u6301\u591a\u79cd\u6ce8\u518c\u4e2d\u5fc3\u5b9e\u73b0\uff08Nacos\u3001Consul\u3001Etcd\u7b49\uff09\\n- \u53ef\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\\n- \u4e30\u5bcc\u7684\u670d\u52a1\u5143\u6570\u636e\u6269\u5c55\u80fd\u529b\\n\\n## Gone \u5df2\u652f\u6301\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\\n\\nGone \u6846\u67b6\u76ee\u524d\u5df2\u7ecf\u96c6\u6210\u4e86\u4e3b\u6d41\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\uff1a\\n\\n### Nacos \u96c6\u6210\\n\\n```bash\\n# 1. \u5b89\u88c5\u4f9d\u8d56\\ngo get github.com/gone-io/goner/nacos\\n\\n# 2. \u52a0\u8f7d\u7ec4\u4ef6\\ngone.Loads(nacos.RegistryLoad)\\n```\\n\\n\u8be6\u7ec6\u6587\u6863\uff1a[goner/nacos](https://github.com/gone-io/goner/blob/main/nacos/README_CN.md)\\n\\n### Consul \u96c6\u6210\\n\\n```bash\\n# 1. \u5b89\u88c5\u4f9d\u8d56\\ngo get github.com/gone-io/goner/consul\\n\\n# 2. \u52a0\u8f7d\u7ec4\u4ef6\\ngone.Loads(consul.RegistryLoad)\\n```\\n\\n\u8be6\u7ec6\u6587\u6863\uff1a[goner/consul](https://github.com/gone-io/goner/blob/main/consul/README_CN.md)\\n\\n### Etcd \u96c6\u6210\\n\\n```bash\\n# 1. \u5b89\u88c5\u4f9d\u8d56\\ngo get github.com/gone-io/goner/etcd\\n\\n# 2. \u52a0\u8f7d\u7ec4\u4ef6\\ngone.Loads(etcd.RegistryLoad)\\n```\\n\\n\u8be6\u7ec6\u6587\u6863\uff1a[goner/etcd](https://github.com/gone-io/goner/blob/main/etcd/README_CN.md)\\n\\n## \u6253\u9020\u81ea\u5b9a\u4e49\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\\n\\n\u5982\u679c\u73b0\u6709\u7ec4\u4ef6\u65e0\u6cd5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\uff0cGone \u6846\u67b6\u652f\u6301\u60a8\u5f00\u53d1\u81ea\u5b9a\u4e49\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\u3002\u6b65\u9aa4\u5982\u4e0b\uff1a\\n\\n### 1. \u5b9e\u73b0\u6838\u5fc3\u63a5\u53e3\\n\\n\u9996\u5148\uff0c\u5b9e\u73b0 `g.ServiceRegistry` \u548c `g.ServiceDiscovery` \u63a5\u53e3\uff1a\\n\\n```go\\npackage custom\\nimport (\\n    \\"github.com/gone-io/goner/g\\"\\n)\\n\\ntype CustomerRegistry struct {\\n    gone.Flag\\n    // ...\u81ea\u5b9a\u4e49\u5b57\u6bb5\\n}\\n\\n// Register \u6ce8\u518c\u670d\u52a1\u5b9e\u4f8b\\nfunc (r *CustomerRegistry) Register(instance g.Service) error {\\n    // \u5b9e\u73b0\u670d\u52a1\u6ce8\u518c\u903b\u8f91\\n}\\n\\n// Deregister \u53cd\u6ce8\u518c\u670d\u52a1\u5b9e\u4f8b\\nfunc (r *CustomerRegistry) Deregister(instance g.Service) error {\\n    // \u5b9e\u73b0\u670d\u52a1\u53cd\u6ce8\u518c\u903b\u8f91\\n}\\n\\n// GetInstances \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\\nfunc (r *CustomerRegistry) GetInstances(serviceName string) ([]Service, error) {\\n    // \u5b9e\u73b0\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\u903b\u8f91\\n}\\n\\n// Watch \u76d1\u542c\u670d\u52a1\u5b9e\u4f8b\u53d8\u5316\\nfunc (r *CustomerRegistry) Watch(serviceName string) (ch <-chan []Service, stop func() error, err error) {\\n    // \u5b9e\u73b0\u670d\u52a1\u53d8\u66f4\u76d1\u542c\u903b\u8f91\\n}\\n\\n// \u786e\u4fdd\u5b9e\u73b0\u4e86\u6240\u9700\u63a5\u53e3\\nvar _ g.ServiceRegistry = (*CustomerRegistry)(nil)\\nvar _ g.ServiceDiscovery = (*CustomerRegistry)(nil)\\n```\\n\\n### 2. \u5b9a\u4e49\u52a0\u8f7d\u51fd\u6570\\n\\n\u521b\u5efa\u7ec4\u4ef6\u52a0\u8f7d\u51fd\u6570\uff0c\u4fbf\u4e8e\u5728\u5e94\u7528\u4e2d\u4f7f\u7528\uff1a\\n\\n```go\\nfunc RegistryLoad(loader gone.Loader) error {\\n    return gone.OnceLoad(func(loader gone.Loader) error {\\n        // \u52a0\u8f7d\u76f8\u5173\u4f9d\u8d56\\n        return loader.Load(&CustomerRegistry{}) // \u52a0\u8f7d\u81ea\u5b9a\u4e49\u7ec4\u4ef6\\n    })(loader)\\n}\\n```\\n\\n\u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u50cf\u4f7f\u7528\u5185\u7f6e\u7ec4\u4ef6\u4e00\u6837\u52a0\u8f7d\u60a8\u7684\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u4e86\uff01\\n\\n## HTTP \u670d\u52a1\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\\n\\nGone \u6846\u67b6\u4e0d\u4ec5\u652f\u6301 gRPC \u670d\u52a1\u7684\u6ce8\u518c\u4e0e\u53d1\u73b0\uff0c\u5bf9\u4e8e HTTP \u670d\u52a1\u540c\u6837\u6709\u826f\u597d\u652f\u6301\u3002\u5728 **goner/gin** \u548c **goner/urllib** \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u76f8\u5173\u529f\u80fd\uff0c\u53ea\u9700\u52a0\u8f7d\u76f8\u5e94\u7684\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u7ec4\u4ef6\u5373\u53ef\u3002\\n\\n\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u60a8\u9009\u62e9\u4f55\u79cd\u901a\u4fe1\u534f\u8bae\uff0cGone \u6846\u67b6\u90fd\u80fd\u4e3a\u60a8\u63d0\u4f9b\u4e00\u81f4\u7684\u670d\u52a1\u6cbb\u7406\u4f53\u9a8c\u3002\\n\\n## \u603b\u7ed3\u4e0e\u5c55\u671b\\n\\n\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0\u662f\u5fae\u670d\u52a1\u67b6\u6784\u7684\u5173\u952e\u57fa\u7840\u8bbe\u65bd\uff0c\u5b83\u89e3\u51b3\u4e86\u670d\u52a1\u95f4\u52a8\u6001\u901a\u4fe1\u3001\u8d1f\u8f7d\u5747\u8861\u548c\u9ad8\u53ef\u7528\u7b49\u6838\u5fc3\u95ee\u9898\u3002Gone \u6846\u67b6\u901a\u8fc7\u4f18\u96c5\u7684\u8bbe\u8ba1\u548c\u4e30\u5bcc\u7684\u7ec4\u4ef6\u751f\u6001\uff0c\u4e3a Go \u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u7ad9\u5f0f\u7684\u670d\u52a1\u6cbb\u7406\u89e3\u51b3\u65b9\u6848\u3002\\n\\n\u65e0\u8bba\u662f\u4f7f\u7528 Kubernetes \u5185\u7f6e\u670d\u52a1\u53d1\u73b0\uff0c\u8fd8\u662f\u96c6\u6210 Nacos\u3001Consul \u7b49\u7b2c\u4e09\u65b9\u7ec4\u4ef6\uff0cGone \u6846\u67b6\u90fd\u80fd\u5e2e\u52a9\u60a8\u8f7b\u677e\u6784\u5efa\u5065\u58ee\u3001\u53ef\u6269\u5c55\u7684\u5fae\u670d\u52a1\u7cfb\u7edf\u3002\u672a\u6765\uff0cGone \u56e2\u961f\u8fd8\u5c06\u6301\u7eed\u5b8c\u5584\u670d\u52a1\u6cbb\u7406\u80fd\u529b\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\\n\\n- \u66f4\u591a\u6ce8\u518c\u4e2d\u5fc3\u7684\u96c6\u6210\u652f\u6301\\n- \u66f4\u4e30\u5bcc\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\\n- \u670d\u52a1\u7194\u65ad\u3001\u9650\u6d41\u7b49\u9ad8\u7ea7\u6cbb\u7406\u7279\u6027\\n\\n\u671f\u5f85\u60a8\u7684\u53c2\u4e0e\u548c\u8d21\u732e\uff0c\u4e00\u8d77\u6253\u9020\u66f4\u5f3a\u5927\u7684 Gone \u5fae\u670d\u52a1\u751f\u6001\uff01"},{"id":"xorm-update-process","metadata":{"permalink":"/blog/xorm-update-process","editUrl":"https://github.com/gone-io/v2-site/tree/main/blog/blog/2025-04-14-xorm-update-process.md","source":"@site/blog/2025-04-14-xorm-update-process.md","title":"\u4f7f\u7528Provider\u673a\u5236\u6539\u9020goner/xorm","description":"\u672c\u6587\u8be6\u7ec6\u8bb0\u5f55\u4e86\u4f7f\u7528Gone\u6846\u67b6\u7684Provider\u673a\u5236\u91cd\u6784goner/xorm\u7ec4\u4ef6\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u7edf\u4e00\u4f7f\u7528Provider\u673a\u5236\u5b9e\u73b0\uff0c\u4f18\u5316\u4e86\u4ee3\u7801\u7ed3\u6784\uff0c\u63d0\u9ad8\u4e86\u53ef\u7ef4\u62a4\u6027\u548c\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u539f\u6709\u529f\u80fd\u548c\u914d\u7f6e\u7684\u517c\u5bb9\u6027\u3002\u6587\u7ae0\u6db5\u76d6\u4e86\u91cd\u6784\u7684\u52a8\u673a\u3001\u76ee\u6807\u3001\u8bbe\u8ba1\u65b9\u6848\u3001\u5b9e\u73b0\u7ec6\u8282\u548c\u6d4b\u8bd5\u7b56\u7565\u3002","date":"2025-04-14T00:00:00.000Z","tags":[{"inline":true,"label":"xorm","permalink":"/blog/tags/xorm"},{"inline":true,"label":"gone","permalink":"/blog/tags/gone"},{"inline":true,"label":"\u6570\u636e\u5e93\u8bbf\u95ee","permalink":"/blog/tags/\u6570\u636e\u5e93\u8bbf\u95ee"},{"inline":true,"label":"\u4ee3\u7801\u91cd\u6784","permalink":"/blog/tags/\u4ee3\u7801\u91cd\u6784"},{"inline":true,"label":"\u6d4b\u8bd5\u8986\u76d6\u7387","permalink":"/blog/tags/\u6d4b\u8bd5\u8986\u76d6\u7387"},{"inline":true,"label":"\u4e8b\u52a1\u7ba1\u7406","permalink":"/blog/tags/\u4e8b\u52a1\u7ba1\u7406"}],"readingTime":19.38,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"xorm-update-process","description":"\u672c\u6587\u8be6\u7ec6\u8bb0\u5f55\u4e86\u4f7f\u7528Gone\u6846\u67b6\u7684Provider\u673a\u5236\u91cd\u6784goner/xorm\u7ec4\u4ef6\u7684\u8fc7\u7a0b\u3002\u901a\u8fc7\u7edf\u4e00\u4f7f\u7528Provider\u673a\u5236\u5b9e\u73b0\uff0c\u4f18\u5316\u4e86\u4ee3\u7801\u7ed3\u6784\uff0c\u63d0\u9ad8\u4e86\u53ef\u7ef4\u62a4\u6027\u548c\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u539f\u6709\u529f\u80fd\u548c\u914d\u7f6e\u7684\u517c\u5bb9\u6027\u3002\u6587\u7ae0\u6db5\u76d6\u4e86\u91cd\u6784\u7684\u52a8\u673a\u3001\u76ee\u6807\u3001\u8bbe\u8ba1\u65b9\u6848\u3001\u5b9e\u73b0\u7ec6\u8282\u548c\u6d4b\u8bd5\u7b56\u7565\u3002","keywords":["\u4f9d\u8d56\u6ce8\u5165","\u6570\u636e\u5e93\u8bbf\u95ee","\u4ee3\u7801\u91cd\u6784","Provider\u6a21\u5f0f","xorm","Gone\u6846\u67b6","\u6d4b\u8bd5\u8986\u76d6\u7387","\u4e8b\u52a1\u7ba1\u7406","SQL\u62fc\u63a5","\u4ee3\u7801\u4f18\u5316"],"tags":["xorm","gone","\u6570\u636e\u5e93\u8bbf\u95ee","\u4ee3\u7801\u91cd\u6784","\u6d4b\u8bd5\u8986\u76d6\u7387","\u4e8b\u52a1\u7ba1\u7406"]},"unlisted":false,"prevItem":{"title":"\u4f7f\u7528\u670d\u52a1\u6ce8\u518c\u4e0e\u53d1\u73b0","permalink":"/blog/gone-service-registry-discovery"}},"content":"## \u7f18\u8d77\\n\\n\u6700\u8fd1\u5728\u7ed9 [goner](https://github.com/gone-io/goner)\u589e\u52a0\u6d4b\u8bd5\u4ee3\u7801\uff0c\u63d0\u9ad8\u9879\u76ee\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u3002\u6539\u5230`goner/xorm`\u65f6\uff0c\u53d1\u73b0\u5b58\u5728\u4e24\u4e2a\u4e3b\u8981\u95ee\u9898\uff1a\\n\\n### 1.\u539f\u6765\u7684\u8bbe\u8ba1\u6bd4\u8f83\u590d\u6742\\ngoner/xorm\u662fgone\u6846\u67b6\u4e2d\u8f83\u65e9\u63d0\u4f9b\u7684\u7ec4\u4ef6\uff0c\u5176\u6f14\u8fdb\u5386\u7a0b\u5982\u4e0b\uff1a\\n\\n- v1.0\u7248\u672c\uff1a\u5b8c\u5168\u57fa\u4e8eGoner\u673a\u5236\u5b9e\u73b0\\n\\n- v1.2\u7248\u672c\uff1a\u5f15\u5165Provider\u673a\u5236\uff0c\u4e3a\u652f\u6301\u591a\u6570\u636e\u5e93\u548c\u96c6\u7fa4\u573a\u666f\u505a\u4e86\u589e\u91cf\u6539\u9020\\n\\n\u76ee\u524d\u7684\u60c5\u51b5\u662fGoner\u673a\u5236\u548cProvider\u673a\u5236\u7684\u5b9e\u73b0\u540c\u65f6\u5b58\u5728\uff1a\\n\\n- \u9ed8\u8ba4\u914d\u7f6e\u7684\u6570\u636e\u5e93\uff1a\u57fa\u4e8eGoner\u673a\u5236\u6ce8\u5165\\n\\n- \u96c6\u7fa4\u6570\u636e\u5e93\u6216\u591a\u6570\u636e\u5e93\uff1a\u4f7f\u7528Provider\u673a\u5236\u6ce8\u5165\\n\\n\u8fd9\u79cd\u53cc\u673a\u5236\u5e76\u5b58\u7684\u8bbe\u8ba1\u589e\u52a0\u4e86\u4ee3\u7801\u7684\u590d\u6742\u6027\u548c\u7ef4\u62a4\u96be\u5ea6\u3002\\n\\n### 2.\u6d4b\u8bd5\u4e0d\u591f\u53cb\u597d\uff0c\u6bd4\u8f83\u96be\u505a\u8986\u76d6\u3002\\n\u4ee3\u7801\u7684\u8bbe\u8ba1\u804c\u8d23\u4e0d\u591f\u6e05\u6670\uff0c\u7ec4\u4ef6\u8fb9\u754c\u4e0d\u591f\u5206\u660e\uff0c\u5bfc\u81f4\u6d4b\u8bd5\u7f16\u5199\u56f0\u96be\uff0c\u96be\u4ee5\u5b9e\u73b0\u826f\u597d\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u3002\\n\\n\x3c!-- truncate --\x3e\\n## \u76ee\u6807\\n### 1. \u4fdd\u8bc1\u914d\u7f6e\u517c\u5bb9\u6539\u9020\u524d\u7684\uff0c\u4fdd\u8bc1\u6ce8\u5165\u65b9\u5f0f\u517c\u5bb9\u6539\u9020\u524d\u7684\\n\u5148\u56de\u987egoner/xorm\u7684\u914d\u7f6e\u7ea6\u5b9a\uff1a\\n\\n```yaml\\n# database \u9ed8\u8ba4\u6570\u636e\u5e93\u914d\u7f6e\u524d\u7f00\\ndatabase:\\n    driver-name: mysql  # \u6570\u636e\u5e93\u9a71\u52a8\u540d\u79f0\\n    dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options  # \u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\\n    max-idle-count: 10  # \u8fde\u63a5\u6c60\u6700\u5927\u7a7a\u95f2\u8fde\u63a5\u6570\\n    max-open: 100  # \u8fde\u63a5\u6c60\u6700\u5927\u6253\u5f00\u8fde\u63a5\u6570\\n    max-lifetime: 10s  # \u8fde\u63a5\u6700\u5927\u751f\u5b58\u65f6\u95f4\\n    show-sql: true  # \u662f\u5426\u663e\u793aSQL\u8bed\u53e5\\n    cluster:  # \u96c6\u7fa4\u914d\u7f6e\\n        enable: false  # \u662f\u5426\u542f\u7528\u96c6\u7fa4\u6a21\u5f0f\\n        master:  # \u4e3b\u5e93\u914d\u7f6e\\n            driver-name: mysql\\n            dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n        slaves:  # \u4ece\u5e93\u914d\u7f6e\u5217\u8868\\n            - driver-name: mysql\\n              dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n            - driver-name: mysql\\n              dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n\\n# \u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u914d\u7f6e\u524d\u7f00\uff0ccustom-name \u662f\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u5e93\u914d\u7f6e\u524d\u7f00\\ncustom-name:\\n    driver-name: mysql\\n    dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n    max-idle-count: 10\\n    max-open: 100\\n    max-lifetime: 10s\\n    show-sql: true\\n    cluster:\\n        enable: false\\n        master:\\n            driver-name: mysql\\n            dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n        slaves:\\n            - driver-name: mysql\\n              dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n            - driver-name: mysql\\n              dsn: user:password@tcp(IP_ADDRESS:3306)/dbname?options\\n```\\n\\n\u518d\u56de\u987egoner/xorm\u7684\u6ce8\u5165\u65b9\u5f0f\uff1a\\n\\n\\n```go\\n//  \u9ed8\u8ba4\u914d\u7f6e\u524d\u7f00\u7684\u6570\u636e\u5e93\u6ce8\u5165\\ntype defaultDbUser struct {\\n    engine0 xorm.Engine `gone:\\"*\\"`  // \u6ce8\u5165\u9ed8\u8ba4\u914d\u7f6e\u524d\u7f00\u7684\u6570\u636e\u5e93\\n    engine1 xorm.Engine `gone:\\"xorm,master\\"`  // \u6ce8\u5165\u9ed8\u8ba4\u914d\u7f6e\u6570\u636e\u5e93\u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 master \u6570\u636e\u5e93\\n    engine2 []xorm.Engine `gone:\\"xorm\\"`  // \u6ce8\u5165\u9ed8\u8ba4\u914d\u7f6e\u6570\u636e\u5e93\u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 slave \u6570\u636e\u5e93\u96c6\u5408\\n    engine3 xorm.Engine `gone:\\"xorm,slave=0\\"`  // \u6ce8\u5165\u9ed8\u8ba4\u914d\u7f6e\u6570\u636e\u5e93\u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 slave \u6570\u636e\u5e93\u96c6\u5408\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5e93\\n    engine4 xorm.Engine `gone:\\"xorm,slave=1\\"`  // \u6ce8\u5165\u9ed8\u8ba4\u914d\u7f6e\u6570\u636e\u5e93\u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 slave \u6570\u636e\u5e93\u96c6\u5408\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6570\u636e\u5e93\\n}\\n\\n//  \u81ea\u5b9a\u4e49\u914d\u7f6e\u524d\u7f00\u7684\u6570\u636e\u5e93\u6ce8\u5165\\ntype customerDbUser struct {\\n    engine0 xorm.Engine `gone:\\"xorm,db=custom-name\\"`  // \u6ce8\u5165 \u914d\u7f6e\u524d\u7f00\u7b49\u4e8e custom-name \u7684\u6570\u636e\u5e93\\n    engine1 xorm.Engine `gone:\\"xorm,db=custom-name,master\\"`  // \u6ce8\u5165 \u914d\u7f6e\u524d\u7f00\u7b49\u4e8e custom-name \u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 master \u6570\u636e\u5e93\\n    engine2 []xorm.Engine `gone:\\"xorm,db=custom-name\\"`  // \u6ce8\u5165 \u914d\u7f6e\u524d\u7f00\u7b49\u4e8e custom-name \u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 slave \u6570\u636e\u5e93\u96c6\u5408\\n    engine3 xorm.Engine `gone:\\"xorm,db=custom-name,slave=0\\"`  // \u6ce8\u5165 \u914d\u7f6e\u524d\u7f00\u7b49\u4e8e custom-name \u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 slave \u6570\u636e\u5e93\u96c6\u5408\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5e93\\n    engine4 xorm.Engine `gone:\\"xorm,db=custom-name,slave=1\\"`  // \u6ce8\u5165 \u914d\u7f6e\u524d\u7f00\u7b49\u4e8e custom-name \u96c6\u7fa4\uff08\u5982\u679c\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\uff09\u7684 slave \u6570\u636e\u5e93\u96c6\u5408\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6570\u636e\u5e93\\n}\\n```\\n\\n\u6539\u9020\u540e\u5fc5\u987b\u4fdd\u6301\u4e0e\u4e0a\u8ff0\u914d\u7f6e\u683c\u5f0f\u548c\u6ce8\u5165\u65b9\u5f0f\u7684\u517c\u5bb9\u6027\uff0c\u4ee5\u786e\u4fdd\u7528\u6237\u4ee3\u7801\u65e0\u9700\u66f4\u6539\u3002\\n\\n### 2. \u63d0\u4f9b\u7684\u529f\u80fd\u4e0d\u80fd\u6539\u53d8\\n\\n\u5728\u529f\u80fd\u4e0a\uff0cgoner/xorm\u4e2d\u7684Engine\u5bf9xorm.io/xorm\u505a\u4e86\u4e24\u4e2a\u4e3b\u8981\u7684\u589e\u5f3a\uff1a\\n\\n#### 2.1 \u589e\u5f3a\u4e8b\u52a1\u652f\u6301\\n\\n\u4f7f\u7528github.com/jtolds/gls\u589e\u5f3a\u4e8b\u52a1\uff0c\u66f4\u597d\u5730\u652f\u6301\u4e8b\u52a1\u5d4c\u5957\uff0c\u65e0\u9700\u624b\u52a8\u4f20\u9012\u4e8b\u52a1\u4e0a\u4e0b\u6587\uff1a\\n```go\\nvar db *xorm.Engine\\n\\n// \u4e3b\u6d41\u7a0b\u5904\u7406\u51fd\u6570\uff0c\u5f00\u542f\u9876\u5c42\u4e8b\u52a1\\nfunc ProcessA(){\\n    db.Transaction(func(session xorm.XInterface) error {\\n        // \u8c03\u7528\u5176\u4ed6\u4e8b\u52a1\u51fd\u6570\uff0c\u65e0\u9700\u4f20\u9012session\\n        ProcessB()\\n        ProcessC()\\n        return nil\\n    })\\n}\\n\\n// \u5b50\u6d41\u7a0bB\uff0c\u81ea\u52a8\u4f7f\u7528\u7236\u4e8b\u52a1\u4e0a\u4e0b\u6587\\nfunc ProcessB(){\\n    db.Transaction(func(session xorm.XInterface) error {\\n        ProcessD()\\n        return nil\\n    })\\n}\\n\\n// \u5b50\u6d41\u7a0bC\uff0c\u81ea\u52a8\u4f7f\u7528\u7236\u4e8b\u52a1\u4e0a\u4e0b\u6587\\nfunc ProcessC(){\\n    db.Transaction(func(session xorm.XInterface) error {\\n        // \u5904\u7406\u5177\u4f53\u4e1a\u52a1\u903b\u8f91\\n        return nil\\n    })\\n}\\n\\n// \u5b50\u6d41\u7a0bD\uff0c\u81ea\u52a8\u4f7f\u7528\u6700\u4e0a\u5c42\u4e8b\u52a1\u4e0a\u4e0b\u6587\\nfunc ProcessD(){\\n    db.Transaction(func(session xorm.XInterface) error {\\n        // \u5904\u7406\u5177\u4f53\u4e1a\u52a1\u903b\u8f91\\n        return nil\\n    })\\n}\\n```\\n\\n\u8fd9\u79cd\u8bbe\u8ba1\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u65e0\u9700\u5173\u5fc3\u4e8b\u52a1\u7684\u4f20\u9012\uff0c\u7b80\u5316\u5d4c\u5957\u4e8b\u52a1\u7684\u5904\u7406\u3002\\n\\n#### 2.2 \u589e\u5f3aSQL\u62fc\u63a5\u80fd\u529b\\n\\n\u4f7f\u7528github.com/jmoiron/sqlx\u589e\u5f3aSQL\u62fc\u63a5\u80fd\u529b\uff0c\u63d0\u4f9bSqlx\u51fd\u6570\uff1a\\n```go\\ntype dbUser struct {\\n    gone.Flag\\n    db xorm.Engine `gone:\\"*\\"`\\n}\\n\\nfunc (s* dbUser)Query(){\\n    // \u57fa\u672c\u53c2\u6570\u5316SQL\uff0c\u4f7f\u7528\u95ee\u53f7\u5360\u4f4d\u7b26\\n    db.Sqlx(\\"select * from user where id=?\\", 1).Exec()\\n\\n    // \u652f\u6301\u6570\u7ec4\u53c2\u6570\uff0c\u4f1a\u81ea\u52a8\u5c55\u5f00\u4e3a IN \u67e5\u8be2\\n    db.Sqlx(\\"select * from user where id in (?)\\", []int{1,2,3}).Exec()\\n    // \u751f\u6210\u7684SQL: select * from user where id in (1,2,3)\\n\\n    // \u652f\u6301\u547d\u540d\u53c2\u6570\uff0c\u66f4\u76f4\u89c2\u6e05\u6670\\n    db.Sqlx(\\"select * from user where id in (:id) and status = :status\\", map[string]any{\\n        \\"id\\": []int{1,2,3},\\n        \\"status\\": 1,\\n    }).Exec()\\n    // \u751f\u6210\u7684SQL: select * from user where id in (1,2,3) and status = 1\\n}\\n```\\n\\n\u8fd9\u79cd\u65b9\u5f0f\u8ba9SQL\u62fc\u63a5\u66f4\u52a0\u7075\u6d3b\u548c\u5b89\u5168\uff0c\u7279\u522b\u662f\u5904\u7406\u590d\u6742\u67e5\u8be2\u548c\u52a8\u6001\u6761\u4ef6\u65f6\u3002\\n\\n### 3. \u91c7\u7528v2\u7248\u672c\u7684Provider\u673a\u5236\u6765\u7edf\u4e00\u5b9e\u73b0\\n\\n\u6539\u9020\u7684\u6838\u5fc3\u76ee\u6807\u662f\u7edf\u4e00\u4f7f\u7528\u4e00\u79cd\u673a\u5236\uff08Provider\u673a\u5236\uff09\u6765\u5b9e\u73b0\u5168\u90e8\u529f\u80fd\uff0c\u907f\u514d\u53cc\u673a\u5236\u5e76\u5b58\u5e26\u6765\u7684\u590d\u6742\u6027\u3002\\n\\n### 4. \u4f18\u5316\u4ee3\u7801\u8bbe\u8ba1\uff0c\u4f7f\u804c\u8d23\u66f4\u6e05\u6670\uff0c\u8fb9\u754c\u66f4\u5206\u660e\\n\\n\u4f18\u5316\u4ee3\u7801\u7ed3\u6784\u548c\u7ec4\u4ef6\u5212\u5206\uff0c\u4f7f\u6bcf\u4e2a\u7ec4\u4ef6\u804c\u8d23\u5355\u4e00\u660e\u786e\uff0c\u7ec4\u4ef6\u4e4b\u95f4\u8fb9\u754c\u6e05\u6670\uff0c\u4fbf\u4e8e\u6d4b\u8bd5\u548c\u7ef4\u62a4\u3002\\n\\n## \u8bbe\u8ba1\\n1. \u7f16\u5199**xormProvider**\u8bfb\u53d6\u7ea6\u5b9a\u914d\u7f6e\uff0c\u4e3a\u7cfb\u7edf\u63d0\u4f9b`xorm.io/xorm`\u7684`xorm.EngineInterface`\u7c7b\u578b\u5b9e\u4f8b\uff1b\\n2. \u4f7f\u7528`gone.WrapFunctionProvider`\u5305\u88c5`xormProvider`\uff0c\u4e3a\u7cfb\u7edf\u63d0\u4f9b`*xorm.Engine`\u548c`*xorm.EngineGroup`\u7c7b\u578b\u5b9e\u4f8b\uff1b\\n3. \u4f7f\u7528`eng` \u5c01\u88c5`xorm.EngineInterface`\uff0c\u5b9e\u73b0\u539f\u6765`goner/xorm`\u4e2d\u5b9a\u4e49\u7684\u7684`Engine`\u63a5\u53e3\uff0c\u5b8c\u6210\u4e8b\u52a1\u589e\u5f3a\u548cSQL\u62fc\u63a5\u589e\u5f3a\uff1b\\n4. \u4f7f\u7528`engProvider`\u4e3a\u7cfb\u7edf\u63d0\u4f9b`goner/xorm.Engine`\u7c7b\u578b\u5b9e\u4f8b\u3002\\n\\n![](../static/img/20250414-xorm-update-process_design.png)\\n\\n## \u5b9e\u73b0\\n\\n\u4e0b\u9762\u662f\u6539\u9020\u7684\u6838\u5fc3\u5b9e\u73b0\u4ee3\u7801\uff0c\u5b8c\u6574\u4ee3\u7801\u53ef\u5728GitHub\u4ed3\u5e93\u67e5\u770b\uff1a[\u5b8c\u6574\u4ee3\u7801](https://github.com/gone-io/goner/tree/main/xorm)\u3002\\n\\n### 1. \u5b9e\u73b0xormProvider\u53ca\u76f8\u5173Provider\\n\u9996\u5148\u5b9e\u73b0xormProvider\u53ca\u5176\u5c01\u88c5\u7c7bxormEngineProvider\u548cxormGroupProvider\uff0c\u7528\u4e8e\u63d0\u4f9b\u539f\u751f\u7684xorm\u5bf9\u8c61\uff1a\\n```go\\n// xorm_provide.go\\npackage xorm\\n\\nimport (\\n    \\"fmt\\"\\n    \\"github.com/gone-io/gone/v2\\"\\n    \\"xorm.io/xorm\\"\\n)\\n\\ntype xormProvider struct {\\n    gone.Flag\\n    configure gone.Configure   `gone:\\"configure\\"`\\n    logger    gone.Logger      `gone:\\"*\\"`\\n    policy    xorm.GroupPolicy `gone:\\"*\\" option:\\"allowNil\\"`\\n\\n    dbMap map[string]xorm.EngineInterface\\n}\\n\\nfunc (s *xormProvider) Init() {\\n    s.dbMap = make(map[string]xorm.EngineInterface)\\n}\\n\\n// ... \u7701\u7565\u90e8\u5206\u4ee3\u7801\\n\\n// Provide \u6839\u636e\u6807\u7b7e\u914d\u7f6e\u63d0\u4f9bxorm.EngineInterface\u5b9e\u4f8b\\nfunc (s *xormProvider) Provide(tag string) (eng xorm.EngineInterface, err error) {\\n    dbName := getDbName(tag)\\n\\n    if eng = s.dbMap[dbName]; eng == nil {\\n        eng, err = s.configAndInitDb(dbName)\\n        if err != nil {\\n            return nil, gone.ToError(err)\\n        }\\n        s.dbMap[dbName] = eng\\n    }\\n    return eng, nil\\n}\\n\\n// configAndInitDb \u6839\u636e\u6570\u636e\u5e93\u540d\u79f0\u914d\u7f6e\u5e76\u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5\\nfunc (s *xormProvider) configAndInitDb(dbName string) (eng xorm.EngineInterface, err error) {\\n    var config Conf\\n    var enableCluster bool\\n\\n    _ = s.configure.Get(dbName, &config, \\"\\")\\n    _ = s.configure.Get(dbName+\\".cluster.enable\\", &enableCluster, \\"false\\")\\n\\n    if !enableCluster {\\n        // \u521b\u5efa\u5355\u4e00\u6570\u636e\u5e93\u8fde\u63a5\\n        eng, err = xorm.NewEngine(config.DriverName, config.Dsn)\\n        if err != nil {\\n            return nil, gone.ToErrorWithMsg(err, \\"failed to create engine for db: \\"+dbName)\\n        }\\n    } else {\\n        // \u521b\u5efa\u6570\u636e\u5e93\u96c6\u7fa4\u8fde\u63a5\\n        // ... \u4ee3\u7801\u7701\u7565\\n    }\\n\\n    // \u914d\u7f6e\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u548c\u5176\u4ed6\u9009\u9879\\n    if config.MaxIdleCount > 0 {\\n        eng.SetMaxIdleConns(config.MaxIdleCount)\\n    }\\n    if config.MaxOpen > 0 {\\n        eng.SetMaxOpenConns(config.MaxOpen)\\n    }\\n    if config.MaxLifetime > 0 {\\n        eng.SetConnMaxLifetime(config.MaxLifetime)\\n    }\\n    eng.ShowSQL(config.ShowSql)\\n    eng.SetLogger(&dbLogger{Logger: s.logger, showSql: config.ShowSql})\\n    // \u6839\u636e\u914d\u7f6e\u68c0\u6d4b\u8fde\u63a5\u662f\u5426\u53ef\u7528\\n    if config.PingAfterInit {\\n        if err = eng.Ping(); err != nil {\\n            return nil, gone.ToErrorWithMsg(err, \\"failed to ping db: \\"+dbName)\\n        }\\n    }\\n    return eng, nil\\n}\\n\\n// \u63d0\u4f9b\u539f\u751fEngine\u5b9e\u4f8b\\nfunc (s *xormProvider) ProvideEngine(tagConf string) (*xorm.Engine, error) {\\n    // ... \u4ee3\u7801\u7701\u7565\\n}\\n\\n// \u63d0\u4f9b\u539f\u751fEngineGroup\u5b9e\u4f8b\\nfunc (s *xormProvider) ProvideEngineGroup(tagConf string) (*xorm.EngineGroup, error) {\\n    // ... \u4ee3\u7801\u7701\u7565\\n}\\n\\n// \u5c01\u88c5\u51fd\u6570Provider\uff0c\u63d0\u4f9b*xorm.Engine\\nvar xormEngineProvider = gone.WrapFunctionProvider(func(tagConf string, param struct {\\n    xormProvider *xormProvider `gone:\\"*\\"`\\n}) (*xorm.Engine, error) {\\n    return param.xormProvider.ProvideEngine(tagConf)\\n})\\n\\n// \u5c01\u88c5\u51fd\u6570Provider\uff0c\u63d0\u4f9b*xorm.EngineGroup\\nvar xormGroupProvider = gone.WrapFunctionProvider(func(tagConf string, param struct {\\n    xormProvider *xormProvider `gone:\\"*\\"`\\n}) (*xorm.EngineGroup, error) {\\n    return param.xormProvider.ProvideEngineGroup(tagConf)\\n})\\n```\\n\\n\u8fd9\u90e8\u5206\u4ee3\u7801\u7684\u4e3b\u8981\u529f\u80fd\u662f\u89e3\u6790\u914d\u7f6e\u6587\u4ef6\uff0c\u6839\u636e\u914d\u7f6e\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u5e76\u63d0\u4f9b\u539f\u751f\u7684xorm\u5f15\u64ce\u5bf9\u8c61\u3002\u5173\u952e\u70b9\u5305\u62ec\uff1a\\n\\n- \u652f\u6301\u5355\u4e00\u6570\u636e\u5e93\u8fde\u63a5\u548c\u4e3b\u4ece\u96c6\u7fa4\u8fde\u63a5\\n\\n- \u5b9e\u73b0\u914d\u7f6e\u89e3\u6790\u548c\u6570\u636e\u5e93\u8fde\u63a5\u6c60\u914d\u7f6e\\n\\n- \u63d0\u4f9b\u539f\u751f\u7684xorm.Engine\u548cxorm.EngineGroup\u5b9e\u4f8b\\n\\n### 2. \u5b9e\u73b0\u4e8b\u52a1\u589e\u5f3a\u529f\u80fd\\n\\n\u63a5\u4e0b\u6765\u5b9e\u73b0\u4e8b\u52a1\u589e\u5f3a\u90e8\u5206\uff0c\u63d0\u4f9b\u5d4c\u5957\u4e8b\u52a1\u652f\u6301\uff1a\\n```go\\n// trans.go\\npackage xorm\\n\\nimport (\\n    \\"fmt\\"\\n    \\"github.com/gone-io/gone/v2\\"\\n    \\"github.com/jtolds/gls\\"\\n    \\"sync\\"\\n)\\n\\nfunc newTrans(logger gone.Logger, newSession func() Session) trans {\\n    return trans{\\n        logger:     logger,\\n        newSession: newSession,\\n    }\\n}\\n\\ntype trans struct {\\n    logger     gone.Logger\\n    newSession func() Session\\n}\\n\\nvar sessionMap = sync.Map{}\\n\\n// \u83b7\u53d6\u4e8b\u52a1\u4f1a\u8bdd\uff0c\u5982\u679c\u5f53\u524dgoroutine\u6ca1\u6709\u4e8b\u52a1\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u4f1a\u8bdd\\nfunc (e *trans) getTransaction(id uint) (Session, bool) {\\n    session, suc := sessionMap.Load(id)\\n    if suc {\\n        return session.(Session), false\\n    } else {\\n        s := e.newSession()\\n        sessionMap.Store(id, s)\\n        return s, true\\n    }\\n}\\n\\n// \u5220\u9664\u4e8b\u52a1\u5e76\u5173\u95ed\u4f1a\u8bdd\\nfunc (e *trans) delTransaction(id uint, session Session) error {\\n    defer sessionMap.Delete(id)\\n    return session.Close()\\n}\\n\\n// Transaction \u5728\u4e8b\u52a1\u4e2d\u6267\u884cSQL\\nfunc (e *trans) Transaction(fn func(session Interface) error) error {\\n    var err error\\n    gls.EnsureGoroutineId(func(gid uint) {\\n        session, isNew := e.getTransaction(gid)\\n\\n        if isNew {\\n            // \u5f53\u524dgoroutine\u6ca1\u6709\u6d3b\u8dc3\u4e8b\u52a1\uff0c\u521b\u5efa\u65b0\u4e8b\u52a1\\n            rollback := func() {\\n                rollbackErr := session.Rollback()\\n                if rollbackErr != nil {\\n                    e.logger.Errorf(\\"rollback err:%v\\", rollbackErr)\\n                    err = gone.ToErrorWithMsg(err, fmt.Sprintf(\\"rollback error: %v\\", rollbackErr))\\n                }\\n            }\\n\\n            isRollback := false\\n            defer func(e *trans, id uint, session Session) {\\n                err := e.delTransaction(id, session)\\n                if err != nil {\\n                    e.logger.Errorf(\\"del session err:%v\\", err)\\n                }\\n            }(e, gid, session)\\n\\n            // \u5904\u7406panic\u60c5\u51b5\uff0c\u786e\u4fdd\u4e8b\u52a1\u56de\u6eda\\n            defer func() {\\n                if info := recover(); info != nil {\\n                    e.logger.Errorf(\\"session rollback for panic: %s\\", info)\\n                    e.logger.Errorf(\\"%s\\", gone.PanicTrace(2, 1))\\n                    if !isRollback {\\n                        rollback()\\n                        err = gone.NewInnerError(fmt.Sprintf(\\"%s\\", info), gone.DbRollForPanicError)\\n                    } else {\\n                        err = gone.ToErrorWithMsg(info, fmt.Sprintf(\\"rollback for err: %v, but panic for\\", err))\\n                    }\\n                }\\n            }()\\n\\n            // \u5f00\u59cb\u4e8b\u52a1\\n            err = session.Begin()\\n            if err != nil {\\n                err = gone.ToError(err)\\n                return\\n            }\\n\\n            // \u6267\u884c\u7528\u6237\u51fd\u6570\\n            err = gone.ToError(fn(session))\\n            if err == nil {\\n                // \u4e8b\u52a1\u63d0\u4ea4\\n                err = gone.ToError(session.Commit())\\n            } else {\\n                // \u4e8b\u52a1\u56de\u6eda\\n                e.logger.Errorf(\\"session rollback for err: %v\\", err)\\n                isRollback = true\\n                rollback()\\n            }\\n        } else {\\n            // \u5f53\u524dgoroutine\u5df2\u6709\u6d3b\u8dc3\u4e8b\u52a1\uff0c\u590d\u7528\u73b0\u6709\u4e8b\u52a1\\n            err = gone.ToError(fn(session))\\n        }\\n    })\\n    return err\\n}\\n```\\n\\n\u4e8b\u52a1\u589e\u5f3a\u7684\u6838\u5fc3\u662f\u901a\u8fc7goroutine\u672c\u5730\u5b58\u50a8(gls)\u5b9e\u73b0\uff0c\u8fd9\u6837\u53ef\u4ee5\uff1a\\n\\n- \u5728\u540c\u4e00goroutine\u4e2d\u81ea\u52a8\u5171\u4eab\u4e8b\u52a1\u4e0a\u4e0b\u6587\\n\\n- \u652f\u6301\u5d4c\u5957\u4e8b\u52a1\u8c03\u7528\uff0c\u5185\u5c42\u4e8b\u52a1\u51fd\u6570\u81ea\u52a8\u4f7f\u7528\u5916\u5c42\u4e8b\u52a1\\n\\n- \u63d0\u4f9b\u7edf\u4e00\u7684\u9519\u8bef\u5904\u7406\u548c\u56de\u6eda\u673a\u5236\\n\\n### 3. \u5b9e\u73b0Engine\u5c01\u88c5\\n\\n\u7136\u540e\u5b9e\u73b0eng\u7ed3\u6784\u4f53\uff0c\u5c01\u88c5\u539f\u751f\u7684xorm\u63a5\u53e3\u5e76\u589e\u5f3a\u529f\u80fd\uff1a\\n\\n```go\\n//eng.go\\npackage xorm\\n\\nimport (\\n    \\"github.com/gone-io/gone/v2\\"\\n    \\"xorm.io/xorm\\"\\n)\\n\\nfunc newEng(xEng xorm.EngineInterface, logger gone.Logger) *eng {\\n    e := eng{EngineInterface: xEng}\\n    e.trans = newTrans(logger, func() Session {\\n        return e.NewSession()\\n    })\\n    return &e\\n}\\n\\ntype eng struct {\\n    xorm.EngineInterface  // \u5d4c\u5165\u539f\u751fxorm\u63a5\u53e3\\n    trans                 // \u5d4c\u5165\u4e8b\u52a1\u589e\u5f3a\u529f\u80fd\\n}\\n\\n// \u83b7\u53d6\u539f\u59cb\u5f15\u64ce\u5b9e\u4f8b\\nfunc (e *eng) GetOriginEngine() xorm.EngineInterface {\\n    return e.EngineInterface\\n}\\n\\n// \u8bbe\u7f6e\u4e3b\u4ece\u7b56\u7565\\nfunc (e *eng) SetPolicy(policy xorm.GroupPolicy) {\\n    if group, ok := e.EngineInterface.(*xorm.EngineGroup); ok {\\n        group.SetPolicy(policy)\\n    }\\n}\\n\\n// \u589e\u5f3a\u7684SQL\u62fc\u63a5\u529f\u80fd\\nfunc (e *eng) Sqlx(sql string, args ...any) *xorm.Session {\\n    sql, args = sqlDeal(sql, args...)\\n    return e.SQL(sql, args...)\\n}\\n```\\n\\n\u8fd9\u4e2a\u5c01\u88c5\u5c42\u5b9e\u73b0\u4e86\uff1a\\n\\n- \u5d4c\u5165\u539f\u751fxorm\u63a5\u53e3\u4fdd\u6301API\u517c\u5bb9\\n\\n- \u96c6\u6210\u4e8b\u52a1\u589e\u5f3a\u529f\u80fd\\n\\n- \u6dfb\u52a0SQL\u62fc\u63a5\u589e\u5f3a\u529f\u80fd\\n\\n### 4. \u5b9e\u73b0Engine\u63d0\u4f9b\u8005\\n\\n\u6700\u540e\uff0c\u5b9e\u73b0engProvider\u4e3a\u5e94\u7528\u63d0\u4f9b\u589e\u5f3a\u7248\u7684Engine\u5b9e\u4f8b\uff1a\\n```go\\n//eng_provider.go\\npackage xorm\\n\\nimport (\\n    \\"github.com/gone-io/gone/v2\\"\\n    \\"github.com/spf13/cast\\"\\n    \\"reflect\\"\\n)\\n\\ntype engProvider struct {\\n    gone.Flag\\n    logger    gone.Logger   `gone:\\"*\\"`\\n    xProvider *xormProvider `gone:\\"*\\"`\\n}\\n\\nfunc (s *engProvider) GonerName() string {\\n    return \\"xorm\\" // \u6ce8\u518c\u4e3axorm\u540d\u79f0\\n}\\n\\n// \u63d0\u4f9b\u5b9e\u4f8b\uff0c\u6839\u636e\u7c7b\u578b\u548c\u914d\u7f6e\u63d0\u4f9b\u4e0d\u540c\u7684\u5b9e\u4f8b\\nfunc (s *engProvider) Provide(tagConf string, t reflect.Type) (any, error) {\\n    switch t {\\n    case xormInterfaceSlice: // \u63d0\u4f9bEngine\u5207\u7247\\n        group, err := s.xProvider.ProvideEngineGroup(tagConf)\\n        if err != nil {\\n            return nil, gone.ToError(err)\\n        }\\n        slaves := group.Slaves()\\n        engines := make([]Engine, 0, len(slaves))\\n        for _, slave := range slaves {\\n            engines = append(engines, newEng(slave, s.logger))\\n        }\\n        return engines, nil\\n    case xormInterface: // \u63d0\u4f9b\u5355\u4e00Engine\\n        return s.ProvideEngine(tagConf)\\n    default:\\n        return nil, gone.NewInnerErrorWithParams(gone.GonerTypeNotMatch, \\"Cannot find matched value for %q\\", gone.GetTypeName(t))\\n    }\\n}\\n\\n// \u6839\u636e\u6807\u7b7e\u914d\u7f6e\u63d0\u4f9bEngine\u5b9e\u4f8b\\nfunc (s *engProvider) ProvideEngine(tagConf string) (Engine, error) {\\n    m, _ := gone.TagStringParse(tagConf)\\n\\n    // \u5904\u7406master\u6807\u8bb0\\n    if v, ok := m[masterKey]; ok && (v == \\"\\" || cast.ToBool(v)) {\\n        group, err := s.xProvider.ProvideEngineGroup(tagConf)\\n        if err != nil {\\n            return nil, gone.ToError(err)\\n        }\\n        return newEng(group.Master(), s.logger), nil\\n    }\\n\\n    // \u5904\u7406slave\u6807\u8bb0\\n    if index, ok := m[slaveKey]; ok {\\n        i := cast.ToInt(index)\\n        group, err := s.xProvider.ProvideEngineGroup(tagConf)\\n        if err != nil {\\n            return nil, gone.ToError(err)\\n        }\\n        slaves := group.Slaves()\\n        if i < 0 || i >= len(slaves) {\\n            return nil, gone.ToError(\\"slave index out of range\\")\\n        }\\n        return newEng(slaves[i], s.logger), nil\\n    }\\n\\n    // \u63d0\u4f9b\u9ed8\u8ba4\u5f15\u64ce\\n    provideEngine, err := s.xProvider.Provide(tagConf)\\n    if err != nil {\\n        return nil, gone.ToError(err)\\n    }\\n    return newEng(provideEngine, s.logger), nil\\n}\\n```\\n\\n\\n\u8fd9\u4e2aProvider\u5b9e\u73b0\u4e86\uff1a\\n\\n- \u5c06\u81ea\u8eab\u6ce8\u518c\u4e3a\\"xorm\\"\u540d\u79f0\uff0c\u4e0e\u539f\u6765\u7684\u6ce8\u5165\u6807\u7b7e\u4fdd\u6301\u4e00\u81f4\uff1b\\n\\n- \u80fd\u591f\u63d0\u4f9b\u5355\u4e2aEngine\u5b9e\u4f8b\u6216Engine\u5207\u7247\uff1b\\n\\n- \u6839\u636e\u6807\u7b7e\u914d\u7f6e\u63d0\u4f9b\u4e3b\u5e93\u3001\u4ece\u5e93\u6216\u9ed8\u8ba4\u6570\u636e\u5e93\u5b9e\u4f8b\uff1b\\n\\n- \u4f7f\u7528newEng\u5305\u88c5\u539f\u751f\u5f15\u64ce\u5b9e\u4f8b\uff0c\u589e\u5f3a\u5176\u529f\u80fd\u3002\\n\\n## \u6d4b\u8bd5\\n\\n### \u6d4b\u8bd5\u8986\u76d6\u7387\\n\u6d4b\u8bd5\u662f\u9a8c\u8bc1\u6539\u9020\u6210\u529f\u7684\u5173\u952e\u73af\u8282\u3002\u901a\u8fc7\u7f16\u5199\u5168\u9762\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u9a8c\u8bc1\u529f\u80fd\u6b63\u786e\u6027\uff0c\u8fd8\u80fd\u63d0\u9ad8\u4ee3\u7801\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u3002\\n\\n\u6d4b\u8bd5\u8986\u76d6\u7387\\n\\n\u5982\u56fe\u6240\u793a\uff0c\u6539\u9020\u540e\u7684\u4ee3\u7801\u6d4b\u8bd5\u8986\u76d6\u7387\u5f97\u5230\u4e86\u663e\u8457\u63d0\u5347\u3002\\n![](../static/img/20250414-xorm-update-process_codecov.png)\\n\\n### \u4e0b\u9762\u662f\u90e8\u5206\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u6d4b\u8bd5xormProvider\uff1a\\n\\n```go\\n// xorm_provider_test.go\\npackage xorm\\n\\nimport (\\n    \\"database/sql\\"\\n    \\"github.com/DATA-DOG/go-sqlmock\\"\\n    \\"github.com/gone-io/gone/v2\\"\\n    \\"github.com/stretchr/testify/assert\\"\\n    \\"os\\"\\n    \\"testing\\"\\n    \\"xorm.io/xorm\\"\\n)\\n\\nfunc Test_xormProvider_Init(t *testing.T) {\\n    // \u521b\u5efaSQL\u6a21\u62df\u5668\uff0c\u7528\u4e8e\u6a21\u62df\u6570\u636e\u5e93\u64cd\u4f5c\u800c\u65e0\u9700\u771f\u5b9e\u6570\u636e\u5e93\\n    db, mock, _ := sqlmock.NewWithDSN(\\n        \\"root@/blog\\",\\n        sqlmock.MonitorPingsOption(true),\\n    )\\n    defer db.Close()\\n\\n    // \u6ce8\u518c\u6a21\u62df\u7684\u6570\u636e\u5e93\u9a71\u52a8\\n    drivers := sql.Drivers()\\n    if !contains(drivers, \\"mysql\\") {\\n        sql.Register(\\"mysql\\", db.Driver())\\n    }\\n\\n    // \u5b9a\u4e49\u6d4b\u8bd5\u7528\u4f8b\u7ed3\u6784\\n    type Tests struct {\\n        name        string\\n        before      func()         // \u6d4b\u8bd5\u524d\u51c6\u5907\\n        after       func()         // \u6d4b\u8bd5\u540e\u6e05\u7406\\n        exceptPanic bool           // \u662f\u5426\u671f\u671b\u53d1\u751fpanic\\n        injectFn    any            // \u4f9d\u8d56\u6ce8\u5165\u6d4b\u8bd5\u51fd\u6570\\n    }\\n\\n    tests := []Tests{\\n        {\\n            name: \\"inject default db failed\\",\\n            before: func() {\\n                // \u8bbe\u7f6e\u9519\u8bef\u7684\u9a71\u52a8\u540d\u79f0\uff0c\u9884\u671f\u4f1a\u5931\u8d25\\n                _ = os.Setenv(\\"GONE_DATABASE\\", `{\\n                    \\"driver-name\\":\\"error\\",\\n                    \\"dsn\\": \\"root@/blog\\",\\n                    \\"max-idle-count\\": 5,\\n                    \\"max-open\\": 10,\\n                    \\"max-lifetime\\": 10000,\\n                    \\"show-sql\\": true,\\n                    \\"ping-after-init\\": true\\n                }`)\\n            },\\n            after: func() {\\n                _ = os.Unsetenv(\\"GONE_DATABASE\\")\\n            },\\n            injectFn: func(in struct {\\n                db *xorm.Engine `gone:\\"*\\"`\\n            }) {\\n                assert.NotNil(t, db)\\n            },\\n            exceptPanic: true, // \u9884\u671f\u4f1a\u53d1\u751fpanic\\n        },\\n        \\n        // ... \u66f4\u591a\u6d4b\u8bd5\u7528\u4f8b\\n        \\n        {\\n            name: \\"inject default db\\",\\n            before: func() {\\n                // \u8bbe\u7f6e\u6b63\u786e\u7684\u6570\u636e\u5e93\u914d\u7f6e\\n                _ = os.Setenv(\\"GONE_DATABASE\\", `{\\n                    \\"driver-name\\":\\"mysql\\",\\n                    \\"dsn\\": \\"root@/blog\\",\\n                    \\"max-idle-count\\": 5,\\n                    \\"max-open\\": 10,\\n                    \\"max-lifetime\\": 10000,\\n                    \\"show-sql\\": true,\\n                    \\"ping-after-init\\": true\\n                }`)\\n                mock.ExpectPing() // \u671f\u671b\u6267\u884cping\u64cd\u4f5c\\n            },\\n            after: func() {\\n                _ = os.Unsetenv(\\"GONE_DATABASE\\")\\n            },\\n            injectFn: func(in struct {\\n                db1      *xorm.Engine         `gone:\\"\\"`\\n                db2      *xorm.Engine         `gone:\\"*\\"`\\n                db       xorm.EngineInterface `gone:\\"*\\"`\\n                injector gone.StructInjector  `gone:\\"*\\"`\\n            }) {\\n                // \u9a8c\u8bc1\u6ce8\u5165\u7684\u5b9e\u4f8b\u662f\u5426\u7b26\u5408\u9884\u671f\\n                assert.NotNil(t, in.db1)\\n                assert.NotNil(t, in.db2)\\n                assert.Equal(t, in.db1, in.db2)\\n                assert.Equal(t, in.db1, in.db)\\n\\n                // \u5c1d\u8bd5\u6ce8\u5165\u4e0d\u517c\u5bb9\u7684\u7c7b\u578b\uff0c\u9884\u671f\u4f1a\u5931\u8d25\\n                var x struct {\\n                    db *xorm.EngineGroup `gone:\\"*\\"`\\n                }\\n                err := in.injector.InjectStruct(&x)\\n                assert.Error(t, err)\\n            },\\n            exceptPanic: false, // \u4e0d\u671f\u671b\u53d1\u751fpanic\\n        },\\n        \\n        // ... \u66f4\u591a\u6d4b\u8bd5\u7528\u4f8b\\n    }\\n\\n    // \u6267\u884c\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\\n    for _, tt := range tests {\\n        t.Run(tt.name, func(t *testing.T) {\\n            tt.before()\\n            defer tt.after()\\n\\n            func() {\\n                defer func() {\\n                    err := recover()\\n                    if tt.exceptPanic {\\n                        assert.Error(t, err.(error))\\n                    } else {\\n                        assert.Nil(t, err)\\n                    }\\n                }()\\n\\n                // \u542f\u52a8\u5e94\u7528\u5e76\u6267\u884c\u6d4b\u8bd5\u51fd\u6570\\n                gone.\\n                    NewApp().\\n                    Load(&xormProvider{}).\\n                    Load(xormEngineProvider).\\n                    Load(xormGroupProvider).\\n                    Run(tt.injectFn)\\n            }()\\n        })\\n    }\\n}\\n```\\n\\n\u8fd9\u6bb5\u6d4b\u8bd5\u4ee3\u7801\u4f7f\u7528\u4e86\u591a\u79cd\u6d4b\u8bd5\u6280\u5de7\uff1a\\n\\n1. SQL\u6a21\u62df\uff1a\u4f7f\u7528sqlmock\u5e93\u6a21\u62df\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u65e0\u9700\u771f\u5b9e\u6570\u636e\u5e93\u5373\u53ef\u8fdb\u884c\u6d4b\u8bd5\\n\\n2. \u73af\u5883\u53d8\u91cf\u914d\u7f6e\uff1a\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u6a21\u62df\u4e0d\u540c\u7684\u914d\u7f6e\u573a\u666f\\n\\n3. \u4f9d\u8d56\u6ce8\u5165\u6d4b\u8bd5\uff1a\u5229\u7528gone\u6846\u67b6\u7684\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u9a8c\u8bc1\u5404\u79cd\u6ce8\u5165\u573a\u666f\\n\\n4. \u5f02\u5e38\u6d4b\u8bd5\uff1a\u901a\u8fc7recover\u6355\u83b7\u5e76\u9a8c\u8bc1\u9884\u671f\u7684panic\u60c5\u51b5\\n\\n5. \u7ec4\u4ef6\u4ea4\u4e92\u6d4b\u8bd5\uff1a\u6d4b\u8bd5\u4e0d\u540c\u7ec4\u4ef6\u4e4b\u95f4\u7684\u4ea4\u4e92\u884c\u4e3a\\n\\n\u901a\u8fc7\u8fd9\u4e9b\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5168\u9762\u9a8c\u8bc1\u6539\u9020\u540e\u7684\u529f\u80fd\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff0c\u540c\u65f6\u63d0\u9ad8\u4ee3\u7801\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u3002\\n\\n## \u603b\u7ed3\\n\\n\u901a\u8fc7\u8fd9\u6b21\u6539\u9020\uff0c\u6211\u4eec\u6210\u529f\u5730\uff1a\\n\\n1. \u7edf\u4e00\u4e86xorm\u7ec4\u4ef6\u7684\u5b9e\u73b0\u673a\u5236\uff0c\u5168\u90e8\u91c7\u7528Provider\u673a\u5236\uff0c\u7b80\u5316\u4e86\u4ee3\u7801\u7ed3\u6784\\n\\n2. \u4fdd\u6301\u4e86\u4e0e\u539f\u6709\u914d\u7f6e\u548c\u6ce8\u5165\u65b9\u5f0f\u7684\u517c\u5bb9\u6027\uff0c\u786e\u4fdd\u7528\u6237\u4ee3\u7801\u65e0\u9700\u66f4\u6539\\n\\n3. \u4fdd\u7559\u5e76\u589e\u5f3a\u4e86\u539f\u6709\u529f\u80fd\uff0c\u5305\u62ec\u4e8b\u52a1\u7ba1\u7406\u548cSQL\u62fc\u63a5\u80fd\u529b\\n\\n4. \u91cd\u6784\u4e86\u4ee3\u7801\u7ed3\u6784\uff0c\u4f7f\u5404\u7ec4\u4ef6\u804c\u8d23\u66f4\u52a0\u6e05\u6670\uff0c\u8fb9\u754c\u66f4\u52a0\u5206\u660e\\n\\n5. \u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u6d4b\u8bd5\u6027\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6d4b\u8bd5\u8986\u76d6\u7387\\n\\n\u8fd9\u6b21\u6539\u9020\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u4ee3\u7801\u8d28\u91cf\uff0c\u8fd8\u4e3a\u672a\u6765\u7684\u529f\u80fd\u6269\u5c55\u548c\u7ef4\u62a4\u5960\u5b9a\u4e86\u826f\u597d\u57fa\u7840\u3002\u901a\u8fc7\u5408\u7406\u91c7\u7528\u8bbe\u8ba1\u6a21\u5f0f\u548c\u5206\u5c42\u67b6\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4fdd\u6301\u517c\u5bb9\u6027\u7684\u540c\u65f6\uff0c\u4e0d\u65ad\u4f18\u5316\u548c\u6f14\u8fdb\u7cfb\u7edf\u3002"}]}}')}}]);